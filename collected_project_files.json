[
  {
    "path": "posts.csv",
    "content": "name,id,created_at,updated_at,is_template,deleted_at\ntest-tradesu ,e670c22e-d93d-41d2-8803-024ddb24fe43,2025-08-09 02:30:57.037411,2025-08-09 02:30:57.037416,false,\nВнешняя реклама,042bcf5d-5a66-4e2c-b648-cf6224c9bc20,2025-08-19 18:11:03.330186,2025-08-29 19:11:42.363802,false,\nTest-delete,c3334e7e-5a0f-409d-943a-d3edd8bf1157,2025-08-09 02:34:18.186141,2025-08-09 02:34:18.186146,false,\nинтенсив по маркетингу,307639c8-59d4-4cf6-b09e-a94b32ff5c5d,2025-08-19 18:19:21.123324,2025-08-22 19:17:20.830054,false,\nTest-link,0704459a-3ae7-4210-abe7-6600aa5f1bd2,2025-08-08 15:15:45.879835,2025-08-08 15:15:45.879841,false,\nTest-delete-2,0a44b32c-803f-42dc-913a-40522e982b06,2025-08-09 02:37:43.898712,2025-08-09 02:37:43.898719,false,\nхогвартс маркетплейсов,d836b384-0590-4003-88ad-38ac1fdb0963,2025-08-18 16:26:21.582043,2025-08-23 12:40:10.585528,false,\nTest-buttons,0bf98a76-2609-4223-84e4-bcf9f1857d93,2025-08-07 14:20:16.936041,2025-08-07 14:20:16.936051,false,\nСупервеб,1552f582-e4f0-487a-91b8-9ab02aae34be,2025-08-19 10:46:51.104811,2025-08-23 20:59:35.676910,true,\nTest log,a44e8f7f-327b-491e-9ec7-c54a7b83b24d,2025-08-22 22:20:33.472495,2025-08-22 22:20:33.472500,false,\nтариф корпоративный,2e7ad635-d6a3-4f5e-9ec3-c7a627d111ed,2025-08-18 14:10:18.753184,2025-08-23 12:49:21.508834,false,\nHI,6dfd1745-57eb-4579-b684-c31d737b642d,2025-08-08 11:18:51.706280,2025-08-19 16:11:19.074624,false,\nНастройка рекламы на вб,66d1bcb2-9aea-410f-bca2-0a3a86928bb9,2025-08-19 14:35:43.409960,2025-08-24 06:04:38.777433,true,\nТест,6dd17870-96cb-4bca-abab-7553f1eb35d0,2025-08-23 11:45:49.223291,2025-08-23 12:53:36.322387,false,\nHi,5ed91574-cf36-4d9f-95b2-c5f7ae508e96,2025-08-19 16:53:17.764266,2025-08-19 16:53:17.764271,false,\nTest,4c60ee49-2fbd-4923-956f-28d0fba6238a,2025-08-08 23:01:01.123075,2025-08-08 23:01:01.123086,false,\nTest-link-new,6898f8d8-6999-4048-bbbe-0de6efed41e5,2025-08-08 23:06:21.029560,2025-08-08 23:06:21.029567,false,\nTest,20293245-999d-48a4-a24c-d6253dae04ed,2025-08-07 16:09:46.741914,2025-08-19 17:18:28.820090,false,\nКитай,3e2f3147-b407-484d-8b5d-d197d932ae02,2025-08-18 17:21:35.201428,2025-08-26 07:07:51.494487,true,\nHi,3a07d4bf-ff2a-40ba-9b41-82028862344a,2025-08-07 15:45:12.677896,2025-08-19 16:12:41.326743,false,\nFast track,5064a1a6-a8a7-4875-b209-e33fcc54c84a,2025-08-19 18:35:37.056441,2025-08-24 06:11:35.277518,true,\nTeset,16663078-7e53-4751-ab79-dd0ed1a9ab05,2025-08-22 11:54:32.204505,2025-08-23 12:40:32.397716,false,\nHi,39eb9a1a-0f68-4856-aef8-f86001535ec7,2025-08-22 22:48:50.564482,2025-08-23 12:41:30.191187,false,\nновинка от данилы,336afcc2-d715-4782-acc4-459e1d6950ad,2025-08-18 16:48:21.695958,2025-08-23 12:40:37.516569,false,\nСервисы,afaff303-ff0a-4ecc-b856-a8a7ed022aa5,2025-08-18 16:00:45.406541,2025-08-23 12:49:57.237494,false,\nТест,24114439-ff67-4db3-b106-4d60234487ff,2025-08-23 11:45:53.845562,2025-08-23 12:55:25.662275,false,\nхогвартс маркетплейсов,152e53fd-456b-41f1-a7c0-d6e11afd1900,2025-08-23 15:34:37.758709,2025-08-23 17:46:41.164216,false,\nМаркетПапа интенсив по маркетингу,02e7d221-a802-480a-a5d9-9a74b2c78e3e,2025-08-26 13:16:21.281366,2025-09-02 04:46:43.436187,false,\nМаркетПапа интенсив по маркетингу,3ed20c66-80f4-4b07-a0be-594a01dac2d5,2025-08-26 13:16:26.751076,2025-09-02 04:48:00.290434,true,\nДарим seo-бота,30e09114-86aa-49e7-9f64-08d36a169bc3,2025-08-09 17:10:05.090524,2025-09-02 14:13:46.565222,true,\nменеджер по рекламе озон,e3914a76-3cd1-4cd5-b533-052816cca252,2025-08-19 09:51:43.639276,2025-08-26 09:01:03.004900,true,\nавторский курс,284f56b9-933f-466f-86b0-405777a7c7ea,2025-08-18 17:49:15.570703,2025-08-24 06:09:23.542864,true,\nменеджер по рекламе вб,90b3016b-615b-4d53-b6a6-bc129991d61b,2025-08-19 14:50:19.304410,2025-08-26 09:56:51.381675,true,\nновинка от данилы2,22554dbf-0be1-40c5-887a-d85fd1f2acd6,2025-08-23 15:27:55.083071,2025-09-02 03:26:03.513614,true,\nнастройка внутренней рекламы озон,f12e6ec2-6281-46e0-ae32-c6b737229a58,2025-08-18 17:06:13.347020,2025-09-02 03:28:05.335079,true,\nНа вб с меркатус,5767edee-14e4-4e79-b366-f8bb6d334116,2025-08-19 18:50:09.497427,2025-09-02 04:50:15.507252,true,\nУсловия,60954624-6041-4fb9-83ac-4d48fa42d416,2025-08-27 08:15:30.187599,2025-08-27 08:15:30.187608,true,\nХогвартс маркетплейсов,eade560d-1644-482f-99cf-91028e17487c,2025-08-23 20:58:24.362254,2025-09-02 03:22:52.382560,true,\nОзон с меркатус,3d65e187-2a95-45d0-920c-e33b463f1922,2025-08-19 11:20:53.412270,2025-09-02 04:33:49.257505,true,\nлагерь про,64483c3a-7025-42b6-8108-1bd362b68841,2025-08-19 18:08:41.600946,2025-09-02 04:44:54.849033,true,\nвнешняя реклама для маркетплейсов,c9c90253-54ae-45f6-aa8e-36f3a76f6f02,2025-08-19 19:03:04.632474,2025-09-03 08:27:32.359192,true,\n"
  },
  {
    "path": "Dockerfile",
    "content": "# ------------------------------------------\n# Stage 1: Build dependencies and install Python packages\n# ------------------------------------------\nARG PYTHON_VERSION=3.12.3\nFROM python:${PYTHON_VERSION}-slim AS builder\n\nENV PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONUNBUFFERED=1\n\n# Install build dependencies\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y gcc libpq-dev wget && \\\n    rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\n\n# Install Python dependencies\nCOPY requirements.txt .\nRUN pip install --upgrade pip && \\\n    pip install --prefix=/install -r requirements.txt\n\n# ------------------------------------------\n# Stage 2: Final runtime image\n# ------------------------------------------\nFROM python:${PYTHON_VERSION}-slim AS runtime\n\nENV PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONUNBUFFERED=1\n\nWORKDIR /app\n\n# Copy installed Python packages from builder stage\nCOPY --from=builder /install /usr/local\n\n# Copy application code\nCOPY . .\n\n#ENTRYPOINT [\"sh\", \"-c\", \"uvicorn main:app --host 0.0.0.0 --port 8080\"]\n"
  },
  {
    "path": "Makefile",
    "content": "bw:\n\tdocker build -f worker/Dockerfile -t account-worker --label keep=yes .\n\nmn:\n\t@docker network inspect assistant_bridge >/dev/null 2>&1 || \\\n\t  docker network create assistant_bridge\n\n.PHONY: prepare-dirs\nprepare-dirs:\n\tmkdir -p ./data/loki ./data/grafana ./data/promtail\n\nlocalup: prepare-dirs\n\tdocker compose -f local.compose.yaml up --build -d\n"
  },
  {
    "path": "db.env",
    "content": "POSTGRES_USER=postgres\nPOSTGRES_PASSWORD=postgres\n"
  },
  {
    "path": "__init__.py",
    "content": ""
  },
  {
    "path": "login_script.py",
    "content": "import asyncio\n\nfrom telethon import TelegramClient\nfrom telethon.errors import SessionPasswordNeededError\nfrom telethon.sessions import StringSession\n\n# Replace these with your own values\napi_id = 27878010  # e.g. 123456\napi_hash = 'a8c3c7628be9f25001bd387bd713f6f8'\nphone = '+79776721730'  # your phone number in international format\n# phone = '+79817331201'  # your phone number in international format\npassword = 'gRizzli1980'\n# password = 'Rider2108'\n\n# Session file will be created as 'user.session'\nsession_name = 'service'\n# proxy = ('socks5', '91.236.79.114', '80', True, 'silent', 'bob',  )\n\n\nasync def main():\n    client = TelegramClient(session_name, api_id, api_hash)\n    # client = TelegramClient(session_name, api_id, api_hash, proxy=proxy)\n    await client.connect()\n    h = await client.send_code_request(phone)\n    h = h.phone_code_hash\n    code = input('Enter the code: ')\n    try:\n        await client.sign_in(phone, code, phone_code_hash=h)\n    except SessionPasswordNeededError:\n        await client.sign_in(password=password)\n\n    string = StringSession.save(client.session)\n    with open(f'{session_name}.txt', 'w') as f:\n        print(string, file=f)\n\n    await client.disconnect()\n\n    # async with TelegramClient(session_name, api_id, api_hash) as client:\n    #     h = await client.send_code_request(phone)\n    #     h = h.phone_code_hash\n    #     code = input('Enter the code: ')\n    #     await client.sign_in(phone, code, phone_code_hash=h, password='1106')\n    #     # chat_id = await client.get_entity('https://t.me/+1wnlX4i4t55jMzQy')\n    #     # print(chat_id.id)\n    #     string = StringSession.save(client.session)\n    #     with open(f'{session_name}.txt', 'w') as f:\n    #         print(string, file=f)\n\n\nif __name__ == '__main__':\n    # Run the async main\n    asyncio.run(main())\n"
  },
  {
    "path": "prod.env",
    "content": "BOT_TOKEN=7896764828:AAEHkX7k9hJYE4mXN3uPlUlnZSYCgc8plgQ\nSERVICE_BOT_TOKEN=7833321728:AAEBMG-lLmEBBufoDMcot4haB-0EAs_X6xs\nPOSTING_BOT_USERNAME=avocado_mpstats_bot\nENVIRONMENT=prod\nHOST_UPLOAD_DIR=/home/github-runner/actions-runner/_work/ai-assistant/ai-assistant/upload/\nSENDER_MANAGER_ID=3c70753e-829b-4418-b6b7-b25434e48b01"
  },
  {
    "path": "test.py",
    "content": "import imageio\n\n# Make sure you have imageio-ffmpeg installed:\n# pip install imageio imageio-ffmpeg\n\nreader = imageio.get_reader('input.webm',  'ffmpeg')\nmeta   = reader.get_meta_data()\nfps    = meta['fps']  # frames per second of the source\n\n# Create an animated WebP writer; duration is seconds per frame\nwriter = imageio.get_writer(\n    'output.webp',\n    format='webp',\n    mode='I',            # “I” = multiple images (animation)\n    duration=1/fps       # pause between frames\n)\n\nfor frame in reader:\n    writer.append_data(frame)\n\nwriter.close()\nreader.close()\n"
  },
  {
    "path": "send_test_message.py",
    "content": "#!/usr/bin/env python3\n\"\"\"\nПростой скрипт для отправки тестового сообщения в Telegram\n\"\"\"\n\nimport asyncio\nfrom telethon import TelegramClient\nfrom telethon.sessions import StringSession\n\n\nasync def send_test_message():\n    # Настройки - замените на свои\n    api_id = 12345678  # Ваш API ID\n    api_hash = 'your_api_hash_here'  # Ваш API Hash\n\n    # Либо используйте session string (если есть)\n    session_string = None  # Или укажите session string если есть\n\n    # ID чата куда отправить сообщение (ваш личный чат)\n    # Можно получить через @userinfobot или в логах\n    chat_id = 123456789  # Ваш Telegram ID\n\n    # Создаем клиент\n    if session_string:\n        client = TelegramClient(StringSession(session_string), api_id, api_hash)\n    else:\n        # Если нет session string, будет запрошена авторизация\n        client = TelegramClient('test_session', api_id, api_hash)\n\n    try:\n        print(\"Подключаемся к Telegram...\")\n        await client.start()\n\n        print(\"Отправляем тестовое сообщение...\")\n        await client.send_message(chat_id, \"Тестовое сообщение от скрипта! 🚀\")\n\n        print(\"✅ Сообщение отправлено успешно!\")\n\n    except Exception as e:\n        print(f\"❌ Ошибка: {e}\")\n\n    finally:\n        await client.disconnect()\n\n\nif __name__ == '__main__':\n    asyncio.run(send_test_message())\n"
  },
  {
    "path": "test.html",
    "content": "<div><img src=\"https://ai.avocado.ceo/api/upload/864fa7c4-ee1d-4ff7-b706-94c8b06f5eba.webp\"\n          alt=\"❗️_Autumn_iraida_chernykh_5460910183670622453\" height=\"24\" width=\"24\"\n          data-custom-emoji-id=\"5460910183670622453\" style=\"display: inline-block; vertical-align: middle;\"><b>НАСТРОЙКА\n    ВНУТРЕННЕЙ РЕКЛАМЫ НА OZON</b><img src=\"https://ai.avocado.ceo/api/upload/864fa7c4-ee1d-4ff7-b706-94c8b06f5eba.webp\"\n                                       alt=\"❗️_Autumn_iraida_chernykh_5460910183670622453\" height=\"24\" width=\"24\"\n                                       data-custom-emoji-id=\"5460910183670622453\"\n                                       style=\"display: inline-block; vertical-align: middle;\"></div>\n<div><br>\n    <div><img src=\"https://ai.avocado.ceo/api/upload/39f285bb-ee98-494d-8e94-95e263aecc35.webp\"\n              alt=\"🔥_ChernoZheltie_vkvadratax_5267386791333213211\" height=\"24\" width=\"24\"\n              data-custom-emoji-id=\"5267386791333213211\" style=\"display: inline-block; vertical-align: middle;\"><img\n            src=\"https://ai.avocado.ceo/api/upload/672b6fdf-1ac2-4f2a-a543-f936b23dd076.webp\"\n            alt=\"🔥_ChernoZheltie_vkvadratax_5267348583304146151\" height=\"24\" width=\"24\"\n            data-custom-emoji-id=\"5267348583304146151\" style=\"display: inline-block; vertical-align: middle;\"><img\n            src=\"https://ai.avocado.ceo/api/upload/09c3f565-c1e7-4688-a218-0111ac391051.webp\"\n            alt=\"🔥_ChernoZheltie_vkvadratax_5267521923889249080\" height=\"24\" width=\"24\"\n            data-custom-emoji-id=\"5267521923889249080\" style=\"display: inline-block; vertical-align: middle;\"><img\n            src=\"https://ai.avocado.ceo/api/upload/321c9021-d767-4ede-bf7b-42a9a0a67dae.webp\"\n            alt=\"🔥_ChernoZheltie_vkvadratax_5264738875275753508\" height=\"24\" width=\"24\"\n            data-custom-emoji-id=\"5264738875275753508\" style=\"display: inline-block; vertical-align: middle;\"><img\n            src=\"https://ai.avocado.ceo/api/upload/5fe0a8f4-5eb6-4ce2-9cd7-32add983c355.webp\"\n            alt=\"🔥_ChernoZheltie_vkvadratax_5264926359188158106\" height=\"24\" width=\"24\"\n            data-custom-emoji-id=\"5264926359188158106\" style=\"display: inline-block; vertical-align: middle;\"><img\n            src=\"https://ai.avocado.ceo/api/upload/56da9bc9-89b8-4873-9f2a-b8ae5c764e57.webp\"\n            alt=\"🔥_ChernoZheltie_vkvadratax_5267207927420174055\" height=\"24\" width=\"24\"\n            data-custom-emoji-id=\"5267207927420174055\" style=\"display: inline-block; vertical-align: middle;\"><img\n            src=\"https://ai.avocado.ceo/api/upload/5fe0a8f4-5eb6-4ce2-9cd7-32add983c355.webp\"\n            alt=\"🔥_ChernoZheltie_vkvadratax_5264926359188158106\" height=\"24\" width=\"24\"\n            data-custom-emoji-id=\"5264926359188158106\" style=\"display: inline-block; vertical-align: middle;\"><img\n            src=\"https://ai.avocado.ceo/api/upload/b5c11a8e-94b8-439c-b73d-3a7a5111d657.webp\"\n            alt=\"🔥_ChernoZheltie_vkvadratax_5267277956861932872\" height=\"24\" width=\"24\"\n            data-custom-emoji-id=\"5267277956861932872\" style=\"display: inline-block; vertical-align: middle;\"><br></div>\n    <div><br></div>\n    <div>\n        <div>👨🏼‍💻Спикер: Лилия Жаркова<br><img\n                src=\"https://ai.avocado.ceo/api/upload/6c9c9c88-9dc4-4f1a-967c-6d43e41af08e.webp\"\n                alt=\"💰_FluentEmojiSet5_6334575946938451719\" height=\"24\" width=\"24\"\n                data-custom-emoji-id=\"6334575946938451719\" style=\"display: inline-block; vertical-align: middle;\">\n            Стоимость <img src=\"https://ai.avocado.ceo/api/upload/5d4f504e-a1e4-44b5-8928-093ec0a1a4b5.webp\"\n                           alt=\"🅰️_LZFAlphabet_5440417838139453591\" height=\"24\" width=\"24\"\n                           data-custom-emoji-id=\"5440417838139453591\"\n                           style=\"display: inline-block; vertical-align: middle;\"><img\n                    src=\"https://ai.avocado.ceo/api/upload/a7eb5ab9-3a3d-4b46-b4d9-6c61f1c34f60.webp\"\n                    alt=\"🅰️_LZFAlphabet_5440372710918075920\" height=\"24\" width=\"24\"\n                    data-custom-emoji-id=\"5440372710918075920\"\n                    style=\"display: inline-block; vertical-align: middle;\"><img\n                    src=\"https://ai.avocado.ceo/api/upload/b7299d84-cc0d-4f35-b9e9-5127653bbf14.webp\"\n                    alt=\"🅰️_LZFAlphabet_5440364842537988733\" height=\"24\" width=\"24\"\n                    data-custom-emoji-id=\"5440364842537988733\"\n                    style=\"display: inline-block; vertical-align: middle;\"><img\n                    src=\"https://ai.avocado.ceo/api/upload/b7299d84-cc0d-4f35-b9e9-5127653bbf14.webp\"\n                    alt=\"🅰️_LZFAlphabet_5440364842537988733\" height=\"24\" width=\"24\"\n                    data-custom-emoji-id=\"5440364842537988733\"\n                    style=\"display: inline-block; vertical-align: middle;\"><img\n                    src=\"https://ai.avocado.ceo/api/upload/52c780aa-3b5b-479e-8f7a-a7300547d4aa.webp\"\n                    alt=\"🅰️_LZFAlphabet_5373356725585845776\" height=\"24\" width=\"24\"\n                    data-custom-emoji-id=\"5373356725585845776\"\n                    style=\"display: inline-block; vertical-align: middle;\"><br><br><b>Программа курса\n                предусматривает</b><br><img\n                    src=\"https://ai.avocado.ceo/api/upload/20bfc7b5-401f-4469-af13-8f24d5f6dd87.webp\"\n                    alt=\"🟠_Autumn_iraida_chernykh_5461154709043689556\" height=\"24\" width=\"24\"\n                    data-custom-emoji-id=\"5461154709043689556\" style=\"display: inline-block; vertical-align: middle;\">Модуль\n            1: Как работает реклама на Ozon<br><img\n                    src=\"https://ai.avocado.ceo/api/upload/20bfc7b5-401f-4469-af13-8f24d5f6dd87.webp\"\n                    alt=\"🟠_Autumn_iraida_chernykh_5461154709043689556\" height=\"24\" width=\"24\"\n                    data-custom-emoji-id=\"5461154709043689556\" style=\"display: inline-block; vertical-align: middle;\">Модуль\n            2: Подготовка к запуску рекламы<br><img\n                    src=\"https://ai.avocado.ceo/api/upload/20bfc7b5-401f-4469-af13-8f24d5f6dd87.webp\"\n                    alt=\"🟠_Autumn_iraida_chernykh_5461154709043689556\" height=\"24\" width=\"24\"\n                    data-custom-emoji-id=\"5461154709043689556\" style=\"display: inline-block; vertical-align: middle;\">Модуль\n            3: Пошаговый запуск рекламной кампании<br><img\n                    src=\"https://ai.avocado.ceo/api/upload/20bfc7b5-401f-4469-af13-8f24d5f6dd87.webp\"\n                    alt=\"🟠_Autumn_iraida_chernykh_5461154709043689556\" height=\"24\" width=\"24\"\n                    data-custom-emoji-id=\"5461154709043689556\" style=\"display: inline-block; vertical-align: middle;\">Модуль\n            4: Аналитика и оптимизация рекламных кампаний<br><img\n                    src=\"https://ai.avocado.ceo/api/upload/20bfc7b5-401f-4469-af13-8f24d5f6dd87.webp\"\n                    alt=\"🟠_Autumn_iraida_chernykh_5461154709043689556\" height=\"24\" width=\"24\"\n                    data-custom-emoji-id=\"5461154709043689556\" style=\"display: inline-block; vertical-align: middle;\">Модуль\n            5: Стратегия работы с разными нишами<br><img\n                    src=\"https://ai.avocado.ceo/api/upload/20bfc7b5-401f-4469-af13-8f24d5f6dd87.webp\"\n                    alt=\"🟠_Autumn_iraida_chernykh_5461154709043689556\" height=\"24\" width=\"24\"\n                    data-custom-emoji-id=\"5461154709043689556\" style=\"display: inline-block; vertical-align: middle;\">Модуль\n            6: Работа с клиентом<br><br>Пишите ➡@Sobyan_mpstat ⬅, чтобы уточнить вопросы и получить реквизиты для оплаты\n            🙋🏻<br></div>\n    </div>\n</div>"
  },
  {
    "path": ".gitignore",
    "content": ".venv\n__pycache__\n.idea\n.DS_Store\nscrape.py\ndasha.session\ndasha.txt\ncollected_py_files.json\nlogin_script.py\ndata/\ndata/**\nposts.csv\nposts_to_publish.csv"
  },
  {
    "path": ".env",
    "content": ""
  },
  {
    "path": "create_tests.py",
    "content": "#!/usr/bin/env python3\nimport asyncio\nimport datetime\n\nimport httpx\n\n# === CONFIGURATION ===\nURL = \"https://ai.avocado.ceo/api/post-to-publish\"\nTOKEN = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhYzIzNzE5OS0xYjlmLTQ0YjEtYWIyYy04NzFlOWEwNDBlZmEiLCJleHAiOjE3NTE3NjgyMTUsImlzcyI6ImFzc2lzdGFudC1hZG1pbi1iYWNrIiwiYXVkIjoiYXNzaXN0YW50LWFkbWluLWZyb250In0.9XycyVPKJlTFvd1wgeBj9ui0-4I5y_zNN4Bttq0uS64\"\n\nHEADERS = {\n    \"Accept\": \"application/json, text/plain, */*\",\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": f\"Bearer {TOKEN}\",\n}\n\nBODY_TEMPLATE = {\n    \"post_id\": \"3cef2321-1d90-4670-b102-8612a9bc8c37\",\n    \"scheduled_type\": \"everyday\",\n    \"responsible_manager_id\": \"70c81f07-ab4a-4794-b33e-2aab81eef36e\",\n    \"scheduled_date\": None,\n    # \"scheduled_time\" filled in per-task\n    \"chat_ids\": [\n        \"be6ffc15-665e-4c8d-8353-692b1754259c\",\n        \"e28ee4f5-985c-4b59-9b64-43ec917761ad\",\n        \"e7241e0d-dca5-4958-839d-b0e8c658a7cc\",\n        \"d3dee63d-1337-4875-beb9-904fb844061c\",\n        \"37640e1d-9d67-4ddd-9157-4b486141b28a\"\n    ],\n    \"manager_id\": \"ac237199-1b9f-44b1-ab2c-871e9a040efa\",\n    \"status\": \"pending\"\n}\n\nasync def send_at(client: httpx.AsyncClient, time_str: str):\n    \"\"\"Fire one POST with scheduled_time = time_str.\"\"\"\n    payload = BODY_TEMPLATE.copy()\n    payload[\"scheduled_time\"] = time_str\n    resp = await client.post(URL, json=payload, headers=HEADERS)\n    if resp.status_code == 200:\n        print(f\"✓ Scheduled at {time_str}\")\n    else:\n        print(f\"✗ Failed at {time_str}: {resp.status_code} — {resp.text!r}\")\n\nasync def main():\n    # build all the 15-minute timestamps from 00:00 to 23:45\n    t = datetime.datetime.combine(datetime.date.today(), datetime.time(0, 0))\n    end = t + datetime.timedelta(days=1)\n\n    async with httpx.AsyncClient(timeout=30.0) as client:\n        tasks = []\n        while t < end:\n            ts = t.time().strftime(\"%H:%M\")\n            tasks.append(send_at(client, ts))\n            t += datetime.timedelta(minutes=15)\n\n        # run them concurrently\n        await asyncio.gather(*tasks)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n"
  },
  {
    "path": "compose.yaml",
    "content": "services:\n  db:\n    image: postgres:17\n    container_name: db\n    env_file:\n      - db.env\n    restart: unless-stopped\n    volumes:\n      - postgres_data:/var/lib/postgresql/data/\n    ports:\n      - \"127.0.0.1:5432:5432\"\n    networks:\n      - assistant_bridge\n\n  migrator:\n    build:\n      context: .\n      dockerfile: migrator/Dockerfile\n    container_name: migrator\n    restart: no\n    env_file:\n      - .env\n    volumes:\n      - ./migrator/migrations/:/app/migrations/\n    depends_on:\n      - db\n    networks:\n      - assistant_bridge\n\n  bot:\n    build:\n      context: .\n      dockerfile: bot/Dockerfile\n    container_name: bot\n    restart: unless-stopped\n    env_file:\n      - .env\n    volumes:\n      - ${HOST_UPLOAD_DIR}:/app/upload/\n    networks:\n      - assistant_bridge\n    depends_on:\n      - db\n      - migrator\n\n  worker-manager:\n    build:\n      context: .\n      dockerfile: worker-manager/Dockerfile\n    container_name: worker-manager\n    restart: unless-stopped\n    env_file:\n      - .env\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - ./worker-manager/infrastructure/docker/worker-settings:/app/infrastructure/docker/worker-settings\n    networks:\n      - assistant_bridge\n    depends_on:\n      - db\n      - migrator\n\n  watcher:\n    build:\n      context: .\n      dockerfile: watcher/Dockerfile\n    container_name: watcher\n    restart: unless-stopped\n    env_file:\n      - .env\n    networks:\n      - assistant_bridge\n    depends_on:\n      - db\n      - migrator\n\n  admin-backend:\n    build:\n      context: .\n      dockerfile: admin/backend/Dockerfile\n    container_name: admin-backend\n    restart: unless-stopped\n    env_file:\n      - .env\n    volumes:\n      - ${HOST_UPLOAD_DIR}:/app/upload/\n    networks:\n      - assistant_bridge\n    depends_on:\n      - db\n      - migrator\n\n  admin-frontend:\n    build:\n      context: admin/frontend\n      dockerfile: Dockerfile\n    container_name: admin-frontend\n    restart: unless-stopped\n    depends_on:\n      - admin-backend\n    volumes:\n      - ./admin/frontend/nginx.conf:/etc/nginx/nginx.conf:ro\n\n  posts:\n    build:\n      context: .\n      dockerfile: posts-service/Dockerfile\n    container_name: posts-service\n    restart: unless-stopped\n    env_file:\n      - .env\n    volumes:\n      - ./posts-service/jobs.sqlite:/app/jobs.sqlite\n    networks:\n      - assistant_bridge\n    depends_on:\n      - db\n      - migrator\n      - worker-manager\n\n  loki:\n    image: grafana/loki:2.9.0\n    container_name: loki\n    command: -config.file=/etc/loki/config.yaml\n    restart: unless-stopped\n    volumes:\n      - ./observability/loki/config.yaml:/etc/loki/config.yaml:ro\n      - ./data/loki:/loki\n    ports:\n      - \"3100:3100\"\n    networks:\n      - assistant_bridge\n\n  promtail:\n    image: grafana/promtail:2.9.0\n    container_name: promtail\n    command: -config.file=/etc/promtail/promtail.yaml\n    restart: unless-stopped\n    volumes:\n      - ./observability/promtail/promtail.yaml:/etc/promtail/promtail.yaml:ro\n      - /var/lib/docker/containers:/var/lib/docker/containers:ro\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - ./data/promtail:/run/promtail\n    depends_on:\n      - loki\n    networks:\n      - assistant_bridge\n\n  grafana:\n    image: grafana/grafana:10.4.0\n    container_name: grafana\n    restart: unless-stopped\n    env_file:\n      - grafana.env\n    volumes:\n      - ./data/grafana:/var/lib/grafana\n      - ./observability/grafana/provisioning:/etc/grafana/provisioning:ro\n    networks:\n      - assistant_bridge\n\nvolumes:\n  postgres_data:\n    external: true\n    name: ai-assistant_postgres_data\n\nnetworks:\n  assistant_bridge:\n    external: true\n    name: assistant_bridge\n\ninclude:\n  - ./nginx/compose.yaml\n"
  },
  {
    "path": "posts_to_publish.csv",
    "content": "post_id,creator_id,responsible_manager_id,scheduled_type,scheduled_date,scheduled_time,status,id,created_at,updated_at,deleted_at\n30e09114-86aa-49e7-9f64-08d36a169bc3,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,09:45:00,POSTED,3852eb5e-dbd2-45c2-9af7-fcabba8b5228,2025-08-19 09:24:07.327509,2025-08-19 06:45:52.927877,\nf12e6ec2-6281-46e0-ae32-c6b737229a58,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-18,17:15:00,SCHEDULED,ce8d97f9-ecac-42a0-ac47-9e1b21459b83,2025-08-18 17:06:13.648231,2025-08-18 14:06:17.659913,\n20293245-999d-48a4-a24c-d6253dae04ed,3c70753e-829b-4418-b6b7-b25434e48b01,4463809f-1bc2-4287-8356-ca4762c8a513,SINGLE,2025-08-09,02:15:00,POSTED,10a08475-69d3-489c-af3a-dba6df47be01,2025-08-09 02:15:08.136907,2025-08-08 23:15:17.823835,\n336afcc2-d715-4782-acc4-459e1d6950ad,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,09:45:00,POSTED,986d6ca5-c7c4-4e21-9549-54b6fe8bc334,2025-08-19 09:25:45.289336,2025-08-19 06:46:16.975273,\n3d65e187-2a95-45d0-920c-e33b463f1922,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,11:30:00,POSTED,b15f6af8-f4eb-4378-a82f-976350f59296,2025-08-19 11:20:54.123015,2025-08-19 08:30:17.788750,\n20293245-999d-48a4-a24c-d6253dae04ed,3c70753e-829b-4418-b6b7-b25434e48b01,4463809f-1bc2-4287-8356-ca4762c8a513,SINGLE,2025-08-09,02:15:00,POSTED,0e8b7462-7a20-4f49-ad67-a1a0825091b3,2025-08-09 02:15:25.729505,2025-08-08 23:16:20.528343,\n3a07d4bf-ff2a-40ba-9b41-82028862344a,3c70753e-829b-4418-b6b7-b25434e48b01,4463809f-1bc2-4287-8356-ca4762c8a513,SINGLE,2025-08-09,02:15:00,POSTED,72bb85e7-9824-46ff-8d3e-32f0a6de4214,2025-08-09 02:15:39.432992,2025-08-08 23:16:22.925794,\n3e2f3147-b407-484d-8b5d-d197d932ae02,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-18,18:00:00,POSTED,6568433f-1c69-45bb-8c75-dc891f6d19af,2025-08-18 17:21:35.774842,2025-08-18 14:57:32.326328,\n284f56b9-933f-466f-86b0-405777a7c7ea,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-18,18:00:00,POSTED,5d2b19f3-2220-4e94-811c-bb1e40a23953,2025-08-18 17:49:15.900516,2025-08-18 15:00:35.203977,\nc3334e7e-5a0f-409d-943a-d3edd8bf1157,3c70753e-829b-4418-b6b7-b25434e48b01,a9d9b221-8ccd-45fa-acd3-a5513161d79f,SINGLE,2025-08-09,02:45:00,POSTED,6f92f13a-f2a3-4bec-86d1-6c94880aabb4,2025-08-09 02:34:18.487635,2025-08-08 23:45:06.529487,\n0a44b32c-803f-42dc-913a-40522e982b06,3c70753e-829b-4418-b6b7-b25434e48b01,4463809f-1bc2-4287-8356-ca4762c8a513,SINGLE,2025-08-09,02:45:00,POSTED,6f803438-9915-44cb-b0c9-17a493b3e99b,2025-08-09 02:37:44.169863,2025-08-08 23:45:08.971628,\ne670c22e-d93d-41d2-8803-024ddb24fe43,ac237199-1b9f-44b1-ab2c-871e9a040efa,a9d9b221-8ccd-45fa-acd3-a5513161d79f,SINGLE,2025-08-09,06:45:00,POSTED,8ddf4504-96fb-426f-98aa-43942d709637,2025-08-09 02:30:57.305367,2025-08-09 03:45:05.761456,\n3e2f3147-b407-484d-8b5d-d197d932ae02,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-18,18:30:00,SCHEDULED,636d7296-b0ae-4236-b8ed-eff527e115fd,2025-08-18 18:25:29.639309,2025-08-18 15:25:34.758867,\n30e09114-86aa-49e7-9f64-08d36a169bc3,b9f82e78-377b-4988-8c65-de2cfe982256,a9d9b221-8ccd-45fa-acd3-a5513161d79f,SINGLE,2025-08-09,17:15:00,POSTED,7df0b145-2138-40ca-a322-9139f34ae816,2025-08-09 17:11:57.044094,2025-08-09 14:15:16.928385,\n2e7ad635-d6a3-4f5e-9ec3-c7a627d111ed,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,SINGLE,2025-08-18,14:15:00,POSTED,87523ce0-1c66-4a70-bb13-83de079ea2f4,2025-08-18 14:10:19.785214,2025-08-18 11:15:30.732478,\n66d1bcb2-9aea-410f-bca2-0a3a86928bb9,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,14:45:00,POSTED,3904b640-e01a-46c7-915f-89c3a8f6c55c,2025-08-19 14:35:43.843847,2025-08-19 11:45:30.543754,\n2e7ad635-d6a3-4f5e-9ec3-c7a627d111ed,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-18,14:30:00,SCHEDULED,d85b31a0-826d-4853-bf51-d27f7b940759,2025-08-18 14:15:45.180028,2025-08-18 11:15:46.582984,\n2e7ad635-d6a3-4f5e-9ec3-c7a627d111ed,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-18,15:15:00,SCHEDULED,3b9f9b82-acca-4003-8722-fe2eb6429644,2025-08-18 15:13:28.713097,2025-08-18 12:13:36.003328,\n2e7ad635-d6a3-4f5e-9ec3-c7a627d111ed,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-18,15:30:00,POSTED,1ffc527f-2217-4ef7-9874-46fd2d44f849,2025-08-18 15:29:07.533368,2025-08-18 12:30:35.193374,\nafaff303-ff0a-4ecc-b856-a8a7ed022aa5,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-18,16:15:00,POSTED,f359a520-b4eb-42f1-8cf0-e4510bc3cc78,2025-08-18 16:00:46.150965,2025-08-18 13:15:07.892201,\nd836b384-0590-4003-88ad-38ac1fdb0963,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-18,16:30:00,SCHEDULED,0dd6c028-3f0d-4f9d-bbb9-68803ab23a38,2025-08-18 16:26:22.372531,2025-08-18 13:26:24.034018,\n3e2f3147-b407-484d-8b5d-d197d932ae02,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,16:45:00,POSTED,5d0a639d-715a-4b71-938e-bedd08c86dee,2025-08-19 19:12:07.757532,2025-08-24 13:37:56.183112,\n336afcc2-d715-4782-acc4-459e1d6950ad,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-18,17:00:00,SCHEDULED,a18745b7-4b4a-40c2-b272-7de5e733b863,2025-08-18 16:48:22.005010,2025-08-18 13:48:26.121387,\n2e7ad635-d6a3-4f5e-9ec3-c7a627d111ed,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,10:00:00,POSTED,d96fe7af-9014-410b-a805-5804704a016c,2025-08-19 09:24:29.623528,2025-08-19 07:01:28.561548,\n3e2f3147-b407-484d-8b5d-d197d932ae02,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,10:00:00,POSTED,3635ce35-debd-4fef-bd9e-b9bdfd456fdd,2025-08-19 09:26:45.182863,2025-08-19 07:02:01.877064,\nf12e6ec2-6281-46e0-ae32-c6b737229a58,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,10:00:00,POSTED,0fb72536-b060-48d7-9874-64ac7dd52ffb,2025-08-19 09:56:00.105277,2025-08-19 07:06:28.961068,\ne3914a76-3cd1-4cd5-b533-052816cca252,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,10:00:00,POSTED,3ee6c374-e262-4e54-917f-41eae4ffd7f2,2025-08-19 09:51:44.341733,2025-08-19 07:10:01.695806,\n5064a1a6-a8a7-4875-b209-e33fcc54c84a,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,19:45:00,POSTED,c19fb3f0-ff14-4d6b-aa6e-25355a11205b,2025-08-19 19:19:06.121451,2025-08-19 16:45:33.172013,\n284f56b9-933f-466f-86b0-405777a7c7ea,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,09:30:00,POSTED,2d5409b0-7ef9-4d23-b9a4-79fef58080c5,2025-08-19 09:23:48.142265,2025-08-19 06:30:53.705042,\nafaff303-ff0a-4ecc-b856-a8a7ed022aa5,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,09:30:00,POSTED,5b9282a3-f58a-4905-9474-8b56959cde1f,2025-08-19 09:24:59.815887,2025-08-19 06:30:56.240316,\nd836b384-0590-4003-88ad-38ac1fdb0963,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,09:45:00,POSTED,39dd069f-80e0-49cc-a3df-8a767e9d3d63,2025-08-19 09:25:21.787705,2025-08-19 06:45:28.825959,\nf12e6ec2-6281-46e0-ae32-c6b737229a58,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,10:00:00,POSTED,33e86dee-5bc4-4e99-84b7-c53d1843e6d1,2025-08-19 09:26:09.859973,2025-08-19 07:11:56.503810,\n30e09114-86aa-49e7-9f64-08d36a169bc3,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,10:15:00,POSTED,0e8d9230-fce6-4882-84dc-cae05a9b37a9,2025-08-19 09:56:32.225825,2025-08-19 07:17:43.066502,\n2e7ad635-d6a3-4f5e-9ec3-c7a627d111ed,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,10:15:00,POSTED,0cb8a253-2eeb-4e82-9346-da54745f7b41,2025-08-19 09:57:02.071213,2025-08-19 07:17:59.441752,\n64483c3a-7025-42b6-8108-1bd362b68841,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,18:30:00,POSTED,e47986a2-987d-477b-8658-d408063563c7,2025-08-19 18:08:41.908608,2025-08-19 15:30:09.492953,\n307639c8-59d4-4cf6-b09e-a94b32ff5c5d,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,18:30:00,POSTED,2d7e493f-0f0c-44fe-9781-f3e1c39563fb,2025-08-19 18:19:21.508551,2025-08-19 15:30:12.030069,\n042bcf5d-5a66-4e2c-b648-cf6224c9bc20,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,18:30:00,POSTED,3d2abd15-a50f-4fc6-8532-63687d0a9da4,2025-08-19 18:11:03.922072,2025-08-19 15:30:14.629996,\n1552f582-e4f0-487a-91b8-9ab02aae34be,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,11:30:00,POSTED,e42061f5-50c4-4c7a-8964-d3d4bff3b0f3,2025-08-19 10:46:51.440643,2025-08-19 08:04:38.648498,\n5064a1a6-a8a7-4875-b209-e33fcc54c84a,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,20:30:00,SCHEDULED,26f87874-befc-4100-aa29-3e9c60ed8dcc,2025-08-19 20:10:10.626647,2025-08-19 17:10:12.917013,\n284f56b9-933f-466f-86b0-405777a7c7ea,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,17:00:00,SCHEDULED,a00ada8d-cb85-4c28-882f-d69234d17caa,2025-08-19 17:07:04.578076,2025-08-19 14:07:09.741302,\n90b3016b-615b-4d53-b6a6-bc129991d61b,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,18:00:00,SCHEDULED,9e5e9982-a24f-4e0d-a5fb-095927fb5fe1,2025-08-19 14:50:19.804341,2025-08-19 14:47:46.264090,\n5064a1a6-a8a7-4875-b209-e33fcc54c84a,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,18:45:00,POSTED,ff83bc9e-e606-4d79-a5b8-836436989e94,2025-08-19 18:35:37.349717,2025-08-19 15:45:08.085312,\nf12e6ec2-6281-46e0-ae32-c6b737229a58,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,20:00:00,POSTED,a6958a9c-6309-4922-b413-69b62d92dc72,2025-08-19 19:57:55.716259,2025-08-19 17:02:29.990408,\n5767edee-14e4-4e79-b366-f8bb6d334116,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,19:00:00,POSTED,875b08db-cc44-438e-869a-d26871f7c9aa,2025-08-19 18:50:09.873902,2025-08-19 16:00:12.696540,\n64483c3a-7025-42b6-8108-1bd362b68841,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,19:15:00,POSTED,d877de61-b44f-45cb-979a-84db202d9e39,2025-08-19 19:09:00.186207,2025-08-19 16:15:25.696109,\nc9c90253-54ae-45f6-aa8e-36f3a76f6f02,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,19:15:00,POSTED,3db148f3-9c10-4b3d-991b-ba184c39f6f9,2025-08-19 19:03:05.054345,2025-08-19 16:15:31.709980,\n307639c8-59d4-4cf6-b09e-a94b32ff5c5d,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,20:15:00,SCHEDULED,55f67421-08cf-4a1d-bb02-31c8af0e5414,2025-08-19 20:10:58.114379,2025-08-19 17:11:03.116274,\n5767edee-14e4-4e79-b366-f8bb6d334116,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,20:15:00,SCHEDULED,1cf4940d-9861-452d-9552-ba80fef8e194,2025-08-19 20:09:14.520521,2025-08-19 17:09:22.753362,\n5767edee-14e4-4e79-b366-f8bb6d334116,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,20:45:00,POSTED,e7eff916-3b55-4124-8428-0f35d538ae15,2025-08-19 20:15:50.394438,2025-08-19 17:46:36.814703,\n64483c3a-7025-42b6-8108-1bd362b68841,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,20:45:00,SCHEDULED,754557eb-ef37-4220-9709-225cc42da993,2025-08-19 20:11:56.112848,2025-08-19 17:12:03.252955,\n284f56b9-933f-466f-86b0-405777a7c7ea,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,20:45:00,POSTED,2897ea20-3fe7-4c47-936e-8f895a239652,2025-08-19 20:13:39.775007,2025-08-19 17:46:20.784111,\n042bcf5d-5a66-4e2c-b648-cf6224c9bc20,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,21:15:00,POSTED,5b6d359a-dce5-4cf0-b27c-852c8b092561,2025-08-19 20:17:37.093257,2025-08-19 18:18:39.237050,\n5064a1a6-a8a7-4875-b209-e33fcc54c84a,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,21:00:00,POSTED,79a71ea1-e3bc-46b8-b0d5-77aec8bc9a4e,2025-08-19 20:14:31.116925,2025-08-19 18:03:13.003611,\n30e09114-86aa-49e7-9f64-08d36a169bc3,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,20:45:00,POSTED,7aa177b7-5cf9-4586-9ec0-fc95a36117ff,2025-08-19 20:18:08.627548,2025-08-19 17:46:45.169223,\n3e2f3147-b407-484d-8b5d-d197d932ae02,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,21:30:00,POSTED,506201c2-a6ca-497a-9319-528242dec5c5,2025-08-19 20:18:44.310344,2025-08-19 18:32:34.714191,\n307639c8-59d4-4cf6-b09e-a94b32ff5c5d,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,21:15:00,POSTED,7d348c54-0016-4123-b670-c04b3d3cd726,2025-08-19 20:19:08.757548,2025-08-19 18:19:06.948215,\n336afcc2-d715-4782-acc4-459e1d6950ad,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,21:00:00,POSTED,e4606b5f-9ceb-4d3d-a852-22a187d1ff21,2025-08-19 20:15:19.446801,2025-08-19 18:03:00.514846,\n1552f582-e4f0-487a-91b8-9ab02aae34be,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,21:15:00,POSTED,887f07e3-e73e-4afa-9527-351ad53e33f3,2025-08-19 20:16:45.886294,2025-08-19 18:19:15.253307,\nafaff303-ff0a-4ecc-b856-a8a7ed022aa5,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,21:15:00,POSTED,bf2d23a1-77d7-4231-8b23-dd3c4e447ebc,2025-08-19 20:20:06.432117,2025-08-19 18:19:17.672836,\neade560d-1644-482f-99cf-91028e17487c,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,16:45:00,POSTED,afb0d19b-d569-4e0b-9e34-13c31705a856,2025-08-24 15:21:09.348179,2025-08-24 13:41:32.854034,\neade560d-1644-482f-99cf-91028e17487c,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,10:00:00,SCHEDULED,ee6dc3e5-7d26-464e-8c6b-3b0de5f28d61,2025-09-02 06:22:52.528479,2025-09-02 03:22:58.170819,\n64483c3a-7025-42b6-8108-1bd362b68841,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,18:30:00,POSTED,bd34bc26-b1d8-44ff-9b6a-2c6ed2590a49,2025-08-24 18:16:18.509310,2025-08-24 15:32:39.973554,\nf12e6ec2-6281-46e0-ae32-c6b737229a58,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,18:30:00,POSTED,5aafc7ce-3b66-4646-8b66-9ce5fc48b3c2,2025-08-24 18:17:19.101394,2025-08-24 15:32:58.971893,\n042bcf5d-5a66-4e2c-b648-cf6224c9bc20,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-25,11:45:00,POSTED,575cdc95-94ee-4128-b2a6-f77e8377fe12,2025-08-25 11:32:36.934841,2025-08-25 08:45:19.028167,\n30e09114-86aa-49e7-9f64-08d36a169bc3,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-25,12:30:00,POSTED,7af36a86-4c5d-431a-b84f-8e5a7f7d5685,2025-08-25 12:09:19.095855,2025-08-25 09:31:28.449253,\neade560d-1644-482f-99cf-91028e17487c,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-25,12:30:00,SCHEDULED,fe5a5c84-e1ec-4a78-97da-9c494252dba5,2025-08-25 12:04:41.037709,2025-08-25 09:05:18.578443,2025-08-25 12:05:18.580640\n22554dbf-0be1-40c5-887a-d85fd1f2acd6,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-25,12:45:00,POSTED,58d4bb7a-bf33-4267-9116-c89b1ea5d031,2025-08-25 12:07:16.760366,2025-08-25 09:46:48.868486,\nc9c90253-54ae-45f6-aa8e-36f3a76f6f02,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-25,12:45:00,POSTED,c438503d-d075-4e27-8061-3dcc3b3e7462,2025-08-25 12:08:40.748436,2025-08-25 09:47:01.214168,\nf12e6ec2-6281-46e0-ae32-c6b737229a58,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,11:30:00,SCHEDULED,0fd5dfc4-59c1-4e79-bed3-6a6301409475,2025-09-02 06:28:05.427705,2025-09-02 03:28:08.671109,\n5767edee-14e4-4e79-b366-f8bb6d334116,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,SINGLE,2025-08-25,22:30:00,POSTED,c5feeeff-6035-4161-809c-699b35a631c5,2025-08-25 22:16:30.794581,2025-08-25 19:30:59.334642,\n3e2f3147-b407-484d-8b5d-d197d932ae02,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,12:00:00,SCHEDULED,dd00dfe2-12eb-4fab-93fa-ba4b127bbd20,2025-09-02 06:43:02.915407,2025-09-02 03:43:10.163158,\n3d65e187-2a95-45d0-920c-e33b463f1922,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,14:30:00,SCHEDULED,662d742a-8b5f-44c7-8798-36c65dc09407,2025-09-02 07:36:49.526553,2025-09-02 04:38:10.686774,2025-09-02 07:38:10.688068\n3ed20c66-80f4-4b07-a0be-594a01dac2d5,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,SINGLE,2025-08-26,18:30:00,POSTED,8e1c066f-aea5-4732-8081-33f9c013393e,2025-08-26 13:16:26.794562,2025-08-26 15:33:21.850431,\n66d1bcb2-9aea-410f-bca2-0a3a86928bb9,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,15:00:00,POSTED,5e94fe69-4b26-41da-b6f8-3c968dd2a3ff,2025-08-26 12:56:07.312909,2025-08-27 05:31:14.153488,2025-08-27 08:31:14.164947\n284f56b9-933f-466f-86b0-405777a7c7ea,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,12:30:00,POSTED,ff06ec41-3826-416c-8fe4-afced3342dbe,2025-08-26 12:00:15.764302,2025-08-27 05:35:48.119279,2025-08-27 08:35:48.122294\n1552f582-e4f0-487a-91b8-9ab02aae34be,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,EVERYDAY,,18:15:00,POSTED,39c6255b-4beb-4454-b3de-cbca84f68ae2,2025-09-03 18:09:11.606844,2025-09-03 15:15:21.688902,\n64483c3a-7025-42b6-8108-1bd362b68841,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,17:00:00,SCHEDULED,7acda0d4-b975-4da5-97c9-8ea3a061e163,2025-09-02 07:44:54.956193,2025-09-02 04:44:55.850738,\n66d1bcb2-9aea-410f-bca2-0a3a86928bb9,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-09-02,12:00:00,SCHEDULED,13ea340f-f02f-40fa-b0bf-356dee5adad7,2025-09-02 11:47:12.294967,2025-09-02 08:47:18.360335,\n3e2f3147-b407-484d-8b5d-d197d932ae02,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,EVERYDAY,,18:30:00,POSTED,47727110-3397-41ff-9850-813ca6ae6307,2025-09-03 18:22:07.200901,2025-09-03 15:30:20.896240,\n30e09114-86aa-49e7-9f64-08d36a169bc3,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-09-02,17:15:00,POSTED,cbf78eda-70dd-4763-a1a0-50c210d88e72,2025-09-02 17:13:46.814943,2025-09-02 14:15:12.716476,\n3d65e187-2a95-45d0-920c-e33b463f1922,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,14:30:00,SCHEDULED,91f3140f-b4f7-449d-890a-0a719858e4e7,2025-09-02 07:39:13.101946,2025-09-03 06:22:12.719628,2025-09-03 09:22:12.723255\n90b3016b-615b-4d53-b6a6-bc129991d61b,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,16:00:00,SCHEDULED,0e914cc5-ee03-4b53-a7e3-f3986730585d,2025-09-02 07:43:09.901329,2025-09-03 06:22:22.567198,2025-09-03 09:22:22.578514\ne3914a76-3cd1-4cd5-b533-052816cca252,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,13:00:00,SCHEDULED,1498b776-d452-4367-8514-644a97eade49,2025-09-02 06:39:49.340373,2025-09-03 06:22:31.615281,2025-09-03 09:22:31.616646\neade560d-1644-482f-99cf-91028e17487c,3c70753e-829b-4418-b6b7-b25434e48b01,a9d9b221-8ccd-45fa-acd3-a5513161d79f,SINGLE,2025-09-03,10:15:00,POSTED,0c9ee760-3ed7-4738-adec-37399f216717,2025-09-03 10:09:45.999671,2025-09-03 07:17:30.692598,\n284f56b9-933f-466f-86b0-405777a7c7ea,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,21:30:00,POSTED,96261a5b-35bb-4f6c-841e-201ef675b06a,2025-08-19 20:20:35.666389,2025-08-19 18:33:37.742301,\n1552f582-e4f0-487a-91b8-9ab02aae34be,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-25,12:15:00,POSTED,8a9cad1f-fc58-476b-a2b6-ea6781b5d6db,2025-08-25 12:00:17.660564,2025-08-25 09:15:30.641258,\n042bcf5d-5a66-4e2c-b648-cf6224c9bc20,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,18:15:00,POSTED,88bc2ed3-ea10-48f5-b2cb-f0978e327287,2025-08-24 18:15:08.526971,2025-08-24 15:15:48.412458,\nf12e6ec2-6281-46e0-ae32-c6b737229a58,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-25,12:45:00,POSTED,e802c645-a85b-452b-a678-0ae7a8512e81,2025-08-25 12:06:14.372818,2025-08-25 09:45:10.119638,\n042bcf5d-5a66-4e2c-b648-cf6224c9bc20,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,18:15:00,POSTED,965eca3d-291c-4a66-9ace-2dfef50cb452,2025-08-24 18:15:14.462541,2025-08-24 15:17:12.818587,\n3d65e187-2a95-45d0-920c-e33b463f1922,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-25,13:00:00,POSTED,0319a220-2d27-4ca6-a6d7-7b0d480b9b1b,2025-08-25 12:07:48.894430,2025-08-25 10:00:36.240550,\n66d1bcb2-9aea-410f-bca2-0a3a86928bb9,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,18:30:00,POSTED,2ac49141-ee89-4ab3-8b32-ada224c4ab31,2025-08-24 18:16:48.490845,2025-08-24 15:32:26.026803,\n5064a1a6-a8a7-4875-b209-e33fcc54c84a,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,18:45:00,POSTED,a8d11e51-f509-4ac8-97d5-43320f04470d,2025-08-24 18:18:26.951909,2025-08-24 15:45:53.862989,\n3e2f3147-b407-484d-8b5d-d197d932ae02,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,18:45:00,POSTED,5eaccfba-b198-476d-9170-753da26c9de5,2025-08-24 18:17:51.607089,2025-08-24 15:46:17.411498,\n22554dbf-0be1-40c5-887a-d85fd1f2acd6,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,11:00:00,SCHEDULED,df2535b0-807d-4cc6-93a3-23bc75625d05,2025-09-02 06:26:03.640171,2025-09-02 03:26:08.488508,\n66d1bcb2-9aea-410f-bca2-0a3a86928bb9,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,EVERYDAY,,18:15:00,SCHEDULED,5852b519-2992-42db-9ca5-5bb0fd8319a6,2025-09-03 18:19:25.860855,2025-09-03 15:19:28.180312,\neade560d-1644-482f-99cf-91028e17487c,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,SINGLE,2025-08-26,10:00:00,POSTED,ee2ca388-79d2-4a1f-b743-0aa23f5b0b08,2025-08-26 08:04:35.048544,2025-08-26 07:02:46.321123,\n1552f582-e4f0-487a-91b8-9ab02aae34be,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,14:00:00,SCHEDULED,575f2493-b0b2-4dec-b0f3-be2d94258ef0,2025-09-02 06:40:55.415555,2025-09-02 03:40:59.947907,\n3e2f3147-b407-484d-8b5d-d197d932ae02,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,12:00:00,SCHEDULED,8a22d78b-fad0-4a22-b2da-de32727af16e,2025-09-02 06:35:15.974118,2025-09-02 03:41:15.601250,2025-09-02 06:41:15.607168\n66d1bcb2-9aea-410f-bca2-0a3a86928bb9,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,15:00:00,SCHEDULED,fb841d45-c83c-4649-b75c-9422f8be7093,2025-09-02 07:37:50.693432,2025-09-02 04:37:55.023046,\n66d1bcb2-9aea-410f-bca2-0a3a86928bb9,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,15:00:00,POSTED,0b898b52-2400-48ed-884b-76b859af2358,2025-08-26 12:56:06.740222,2025-08-27 05:29:53.927663,2025-08-27 08:29:53.929664\n60954624-6041-4fb9-83ac-4d48fa42d416,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,SINGLE,2025-08-27,08:30:00,POSTED,12a3e09c-4003-428b-9fb9-91d31b7657c5,2025-08-27 08:15:30.243976,2025-08-27 05:30:20.589973,\n90b3016b-615b-4d53-b6a6-bc129991d61b,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,16:00:00,POSTED,d9c8bbb8-a0f6-4713-bb59-4c2e3b70927f,2025-08-26 12:56:51.661749,2025-08-27 05:31:55.916644,2025-08-27 08:31:55.918744\ne3914a76-3cd1-4cd5-b533-052816cca252,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,13:00:00,POSTED,1f4de262-8218-445f-8be5-1023c03e964d,2025-08-26 12:01:03.160572,2025-08-27 05:35:50.163677,2025-08-27 08:35:50.168238\n3ed20c66-80f4-4b07-a0be-594a01dac2d5,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,18:00:00,SCHEDULED,66fceaf2-6919-434b-a925-f0de5ecc01bf,2025-09-02 07:48:00.392278,2025-09-02 04:48:06.139941,\n1552f582-e4f0-487a-91b8-9ab02aae34be,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-09-02,14:45:00,SCHEDULED,64113fa7-4a87-4ae2-85e0-dc2125733031,2025-09-02 14:37:19.008791,2025-09-02 11:37:19.519759,\n3e2f3147-b407-484d-8b5d-d197d932ae02,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-09-02,14:45:00,SCHEDULED,17ad3156-a3e1-456b-8d59-c1d34e8aa642,2025-09-02 14:37:46.355982,2025-09-02 11:37:49.584881,\n90b3016b-615b-4d53-b6a6-bc129991d61b,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-09-02,18:00:00,POSTED,f37abe8c-bd6e-499c-9d1f-233d06017b95,2025-09-02 17:53:00.810226,2025-09-02 15:00:37.626976,\n1552f582-e4f0-487a-91b8-9ab02aae34be,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-09-03,11:30:00,POSTED,fd09ba6f-44fe-432e-b50c-3650b4a267c8,2025-09-03 11:20:19.238579,2025-09-03 08:31:24.213874,\nc9c90253-54ae-45f6-aa8e-36f3a76f6f02,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-09-03,11:30:00,POSTED,a908ec9f-6475-4825-b898-cb7a99167ce8,2025-09-03 11:27:55.475342,2025-09-03 08:32:16.902949,\ne3914a76-3cd1-4cd5-b533-052816cca252,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-19,20:30:00,POSTED,d16103cd-dd6f-45b4-971f-ac435af858be,2025-08-19 20:14:05.209973,2025-08-19 17:31:00.455469,\n5064a1a6-a8a7-4875-b209-e33fcc54c84a,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-20,20:30:00,POSTED,9765410f-ac23-4c8f-bc7a-de10b288243d,2025-08-19 20:24:48.017650,2025-08-20 17:30:22.240698,\n1552f582-e4f0-487a-91b8-9ab02aae34be,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,17:30:00,SCHEDULED,594842cb-e2aa-4d80-a393-6f25e1e890a0,2025-08-23 23:36:09.284536,2025-08-24 13:50:51.664701,\n336afcc2-d715-4782-acc4-459e1d6950ad,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-22,22:30:00,SCHEDULED,807ddd7d-889a-4928-adea-d4d819124f90,2025-08-22 22:18:43.313260,2025-08-22 19:18:48.037871,\n307639c8-59d4-4cf6-b09e-a94b32ff5c5d,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,SINGLE,2025-08-21,16:15:00,POSTED,16b832ab-066f-412e-8281-27e935067ce8,2025-08-21 16:09:43.736321,2025-08-21 13:15:19.492849,\na44e8f7f-327b-491e-9ec7-c54a7b83b24d,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-22,22:30:00,SCHEDULED,e47a9abe-dc42-43a6-ba74-98e1158fc112,2025-08-22 22:20:33.740436,2025-08-22 19:20:38.200229,\n3e2f3147-b407-484d-8b5d-d197d932ae02,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-22,22:30:00,SCHEDULED,74028f29-dd84-42b1-a10f-e78f7264a603,2025-08-22 22:20:55.547792,2025-08-22 19:20:58.256045,\n152e53fd-456b-41f1-a7c0-d6e11afd1900,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,16:15:00,POSTED,721ad46f-ee50-4835-a7c5-7b243b96a6a2,2025-08-23 16:06:48.074989,2025-08-23 13:18:46.715938,\n39eb9a1a-0f68-4856-aef8-f86001535ec7,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-22,23:00:00,SCHEDULED,07e6aac1-5339-410e-bc5c-702eb901bf58,2025-08-22 22:48:50.842914,2025-08-22 19:48:57.224854,\n5767edee-14e4-4e79-b366-f8bb6d334116,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,16:30:00,POSTED,2332d76c-ad0a-4856-9435-bf380af0f02a,2025-08-23 15:57:00.506102,2025-08-23 13:33:05.824390,\n5064a1a6-a8a7-4875-b209-e33fcc54c84a,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,16:45:00,SCHEDULED,df6b0103-3ce6-4972-8cbb-e33652d58728,2025-08-23 15:56:17.860147,2025-08-23 12:59:31.297879,2025-08-23 15:59:31.299763\n24114439-ff67-4db3-b106-4d60234487ff,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,11:45:00,SCHEDULED,8e7e4cab-367d-4768-bced-f1107364b857,2025-08-23 11:45:54.091700,2025-08-23 08:46:07.332028,\n6dd17870-96cb-4bca-abab-7553f1eb35d0,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,11:45:00,POSTED,56c33138-5430-4de4-9b0d-19879ddb0ee0,2025-08-23 11:45:49.542174,2025-08-23 08:46:17.889861,\nc9c90253-54ae-45f6-aa8e-36f3a76f6f02,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,16:15:00,POSTED,d03eef38-113f-44ba-a843-9b5d89d39054,2025-08-23 15:50:45.789137,2025-08-23 13:18:58.809242,\nd836b384-0590-4003-88ad-38ac1fdb0963,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-22,11:45:00,POSTED,da1875ac-0d9f-4672-a5bc-06e4516037b3,2025-08-22 11:44:47.785319,2025-08-22 08:45:51.634052,\n336afcc2-d715-4782-acc4-459e1d6950ad,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,12:00:00,POSTED,f1e41b80-ebf8-401c-b2af-ac809c753577,2025-08-23 11:53:20.799019,2025-08-23 09:00:45.446186,\nd836b384-0590-4003-88ad-38ac1fdb0963,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-22,11:45:00,POSTED,adc5290f-664c-4a8c-869c-20aee9b2a4ad,2025-08-22 11:44:54.409472,2025-08-22 08:46:40.120585,\n22554dbf-0be1-40c5-887a-d85fd1f2acd6,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,15:30:00,POSTED,53e60c05-0016-4875-9b8b-219515f438e3,2025-08-23 15:27:55.415264,2025-08-23 12:30:14.502460,\n30e09114-86aa-49e7-9f64-08d36a169bc3,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,16:00:00,SCHEDULED,b31bab7d-5f06-4b9c-850f-3de67a1c9284,2025-08-23 15:48:08.602782,2025-08-23 12:52:23.570855,2025-08-23 15:52:23.586211\n152e53fd-456b-41f1-a7c0-d6e11afd1900,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,16:15:00,POSTED,87a8f1af-db18-4daa-a5e7-126ea90099e1,2025-08-23 16:06:44.936096,2025-08-23 13:19:10.892728,\n16663078-7e53-4751-ab79-dd0ed1a9ab05,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-22,12:00:00,POSTED,63357e6d-da66-48e8-979d-dab966270526,2025-08-22 11:54:32.574095,2025-08-22 09:00:08.808696,\nd836b384-0590-4003-88ad-38ac1fdb0963,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-22,12:00:00,POSTED,e72a1005-71df-4844-8408-5a9160abd0b5,2025-08-22 11:55:52.052997,2025-08-22 09:00:15.789169,\n336afcc2-d715-4782-acc4-459e1d6950ad,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-22,13:30:00,POSTED,a0a180dd-3797-450c-a41b-1e88f04c13d1,2025-08-22 13:27:28.721509,2025-08-22 10:30:19.695084,\n16663078-7e53-4751-ab79-dd0ed1a9ab05,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-22,20:45:00,SCHEDULED,71ace900-6ebb-4b55-bdb7-809359aaa185,2025-08-22 20:41:29.290029,2025-08-22 17:41:34.074707,\n152e53fd-456b-41f1-a7c0-d6e11afd1900,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,15:45:00,POSTED,c524a397-6bed-4f50-839e-cbe351c614b4,2025-08-23 15:34:38.033946,2025-08-23 12:45:14.065000,\nd836b384-0590-4003-88ad-38ac1fdb0963,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-22,22:30:00,SCHEDULED,9584050c-638e-4e6e-9536-bd68e6bb4218,2025-08-22 22:18:12.782449,2025-08-22 19:18:17.981431,\n152e53fd-456b-41f1-a7c0-d6e11afd1900,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,15:45:00,POSTED,6cab82d0-75a6-4b95-9a9e-4347e1b2c616,2025-08-23 15:42:59.792244,2025-08-23 12:45:20.655479,\ne3914a76-3cd1-4cd5-b533-052816cca252,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,16:15:00,POSTED,62b9671d-4dda-46fa-af00-f3ed0337d554,2025-08-23 15:47:44.541109,2025-08-23 13:15:29.522601,\n1552f582-e4f0-487a-91b8-9ab02aae34be,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,16:30:00,POSTED,841cde71-46be-45b3-bb31-9de2fd4b8b14,2025-08-23 15:51:44.360866,2025-08-23 13:30:44.710523,\n152e53fd-456b-41f1-a7c0-d6e11afd1900,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,20:00:00,POSTED,2f221654-c368-444a-89fb-fe95fefcebc3,2025-08-23 19:52:29.832167,2025-08-23 17:00:51.203337,\nf12e6ec2-6281-46e0-ae32-c6b737229a58,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,16:45:00,POSTED,b3c7fb7c-e740-4fd7-b35e-764e7da7fd25,2025-08-23 15:55:46.638239,2025-08-23 13:46:22.933270,\n90b3016b-615b-4d53-b6a6-bc129991d61b,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,16:30:00,POSTED,cd22aa83-afeb-49c2-a5ef-ed5c898e4cf0,2025-08-23 15:53:14.509620,2025-08-23 13:31:58.631308,\nf12e6ec2-6281-46e0-ae32-c6b737229a58,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,16:30:00,POSTED,09b9a46a-8b78-4ecf-ac54-210c94273404,2025-08-23 16:00:24.914397,2025-08-23 13:32:51.759284,\n5064a1a6-a8a7-4875-b209-e33fcc54c84a,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,16:45:00,POSTED,6a3f6f6d-1e39-4681-bcc2-f0258933c54f,2025-08-23 15:57:49.810590,2025-08-23 13:46:35.281528,\n30e09114-86aa-49e7-9f64-08d36a169bc3,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,16:00:00,SCHEDULED,9371ea01-ee06-4857-a3d4-6ca01cb02b92,2025-08-23 15:48:30.617576,2025-08-23 12:59:39.250703,2025-08-23 15:59:39.253051\n042bcf5d-5a66-4e2c-b648-cf6224c9bc20,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,16:00:00,SCHEDULED,378cc405-ee85-49fb-985b-ebc080c284c3,2025-08-23 15:47:18.165847,2025-08-23 12:59:42.821150,2025-08-23 15:59:42.821950\n1552f582-e4f0-487a-91b8-9ab02aae34be,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,16:15:00,POSTED,c279de3c-966a-464a-a374-def15d4cd174,2025-08-23 15:48:57.243082,2025-08-23 13:15:44.501435,\n284f56b9-933f-466f-86b0-405777a7c7ea,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,16:30:00,SCHEDULED,9e660bc0-5edf-46f4-80c7-35d13da7aadf,2025-08-23 15:54:49.797180,2025-08-23 12:59:58.817846,2025-08-23 15:59:58.819074\n284f56b9-933f-466f-86b0-405777a7c7ea,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,16:30:00,SCHEDULED,41fc0935-f5df-4005-81bc-4c82e2f3ea7f,2025-08-23 15:54:35.897578,2025-08-23 12:56:34.543465,2025-08-23 15:56:34.544577\n3e2f3147-b407-484d-8b5d-d197d932ae02,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,16:45:00,POSTED,14fcec4c-fb01-463a-a656-f8cd4567d730,2025-08-23 15:55:10.284318,2025-08-23 13:47:08.028723,\n284f56b9-933f-466f-86b0-405777a7c7ea,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,16:30:00,SCHEDULED,1dba003f-b430-4ec2-a706-2e745b60b4cd,2025-08-23 15:54:27.638819,2025-08-23 12:56:36.374453,2025-08-23 15:56:36.375840\n152e53fd-456b-41f1-a7c0-d6e11afd1900,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,16:00:00,POSTED,f4807e27-c596-495d-b2c9-eca4e0d28ab9,2025-08-23 15:46:45.342637,2025-08-23 13:00:26.289892,\neade560d-1644-482f-99cf-91028e17487c,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,21:00:00,POSTED,d3ada68b-69d9-4055-b848-095191551538,2025-08-23 20:58:24.789941,2025-08-23 18:00:09.116764,\n64483c3a-7025-42b6-8108-1bd362b68841,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,16:15:00,POSTED,1b9e4cd8-ea25-48e1-965d-b7250f346bce,2025-08-23 15:50:10.118040,2025-08-23 13:15:55.308389,\n042bcf5d-5a66-4e2c-b648-cf6224c9bc20,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,16:00:00,POSTED,430d0258-4977-497e-8dc7-8d41e922ef72,2025-08-23 15:47:24.501223,2025-08-23 13:00:43.064650,\n3d65e187-2a95-45d0-920c-e33b463f1922,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,16:00:00,POSTED,86976b37-837b-41fc-9953-0a3bb1db02c4,2025-08-23 15:49:35.565701,2025-08-23 13:00:50.109951,\n64483c3a-7025-42b6-8108-1bd362b68841,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,16:15:00,POSTED,b1de1351-3bb4-45fb-93ef-f1c9b02ebb8d,2025-08-23 15:50:14.936415,2025-08-23 13:16:26.118876,\n5767edee-14e4-4e79-b366-f8bb6d334116,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,16:30:00,POSTED,aaf28453-b32a-4950-b7b0-875c0a7ec581,2025-08-23 15:51:10.877790,2025-08-23 13:17:49.885023,\n152e53fd-456b-41f1-a7c0-d6e11afd1900,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,16:15:00,POSTED,174cdcf9-3136-4227-bc73-34b83a508244,2025-08-23 16:06:43.155878,2025-08-23 13:18:34.790956,\n152e53fd-456b-41f1-a7c0-d6e11afd1900,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,20:00:00,POSTED,96e7fb3c-447a-48e8-b12a-33f5918b0bba,2025-08-23 19:52:13.121313,2025-08-23 17:00:44.889186,\neade560d-1644-482f-99cf-91028e17487c,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-23,23:33:00,POSTED,876b1d80-84c1-4f38-8ca3-a5269b8f9b75,2025-08-23 21:53:08.915991,2025-08-23 20:33:17.789324,\ne3914a76-3cd1-4cd5-b533-052816cca252,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,00:45:00,SCHEDULED,716f3756-5bfc-404e-9a33-fd34d11e1cf7,2025-08-23 23:35:10.798513,2025-08-23 21:00:47.544400,\n30e09114-86aa-49e7-9f64-08d36a169bc3,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,00:45:00,SCHEDULED,7cdbab35-ea2f-4115-9e4a-82fab4bd6cb3,2025-08-23 23:35:33.223295,2025-08-23 21:00:04.946901,\n3d65e187-2a95-45d0-920c-e33b463f1922,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,23:45:00,SCHEDULED,ed53ab14-42e5-49e9-8950-67a67768a034,2025-08-23 23:39:17.520208,2025-08-23 20:43:17.675354,2025-08-23 23:43:17.677102\n042bcf5d-5a66-4e2c-b648-cf6224c9bc20,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,00:45:00,SCHEDULED,925b84f8-a3c8-4f91-9cd0-1548f7a417ee,2025-08-23 23:34:44.814343,2025-08-23 20:59:08.428505,\n284f56b9-933f-466f-86b0-405777a7c7ea,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,16:45:00,SCHEDULED,73d9bac2-2ee9-4c5a-aec6-1fed6437a5ea,2025-08-23 23:45:42.003169,2025-08-24 13:36:39.673817,\n64483c3a-7025-42b6-8108-1bd362b68841,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,16:45:00,SCHEDULED,709e1cdd-e46e-41bd-9f1b-d401688b2188,2025-08-23 23:39:38.471789,2025-08-24 13:39:06.736941,\n5064a1a6-a8a7-4875-b209-e33fcc54c84a,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,16:45:00,SCHEDULED,9c5b5f9e-537b-49b5-a377-445ef61ea51b,2025-08-23 23:44:03.609425,2025-08-24 13:39:53.733429,\n66d1bcb2-9aea-410f-bca2-0a3a86928bb9,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,17:30:00,SCHEDULED,7f8194f9-ec51-4e3d-9c03-54119fe85e51,2025-08-23 23:40:54.556237,2025-08-24 13:45:36.263123,\n22554dbf-0be1-40c5-887a-d85fd1f2acd6,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,17:30:00,SCHEDULED,5f7e49f9-b584-48b3-97cf-f87ee9700a01,2025-08-23 23:40:27.632120,2025-08-24 13:51:34.767851,\nc9c90253-54ae-45f6-aa8e-36f3a76f6f02,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,17:30:00,SCHEDULED,b800cf38-a477-4ad2-9449-06a5e6f0a158,2025-08-23 23:44:57.546581,2025-08-24 13:52:12.969356,\n3e2f3147-b407-484d-8b5d-d197d932ae02,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,17:15:00,SCHEDULED,9d9cba9b-d168-4363-a5a1-5fb8f7d8b4b6,2025-08-23 23:42:53.854826,2025-08-24 13:53:44.779495,\n90b3016b-615b-4d53-b6a6-bc129991d61b,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-25,00:00:00,SCHEDULED,0277c180-9e44-409d-a7ac-149fe6233a70,2025-08-23 23:41:20.563147,2025-08-23 20:43:03.874309,2025-08-23 23:43:03.875772\n90b3016b-615b-4d53-b6a6-bc129991d61b,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-25,00:00:00,SCHEDULED,e61c47b2-29c7-49ba-8dda-d61a4461d242,2025-08-23 23:42:11.659591,2025-08-23 20:44:21.116924,2025-08-23 23:44:21.118313\n3d65e187-2a95-45d0-920c-e33b463f1922,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,23:45:00,SCHEDULED,91911a11-4e78-42c1-b2c0-b66b89a1041b,2025-08-23 23:39:12.358945,2025-08-23 20:47:45.996612,2025-08-23 23:47:45.997844\n042bcf5d-5a66-4e2c-b648-cf6224c9bc20,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,18:15:00,POSTED,1c3bec31-52ce-4954-9260-5d17f57772c6,2025-08-24 18:15:11.612407,2025-08-24 15:16:39.314927,\n042bcf5d-5a66-4e2c-b648-cf6224c9bc20,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-25,12:15:00,POSTED,7cee0723-8170-46cd-a9e7-3c0986b8979b,2025-08-25 12:00:42.004974,2025-08-25 09:15:45.771614,\n5767edee-14e4-4e79-b366-f8bb6d334116,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-25,12:30:00,POSTED,4c39c34e-132f-4d6d-bef3-4ea66d58052f,2025-08-25 12:04:12.153367,2025-08-25 09:30:53.857229,\neade560d-1644-482f-99cf-91028e17487c,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-25,12:30:00,POSTED,1ab27217-6f97-410b-83be-bc39e3b81572,2025-08-25 12:05:08.349397,2025-08-25 09:31:04.852297,\n90b3016b-615b-4d53-b6a6-bc129991d61b,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-25,12:45:00,POSTED,2cace7dd-6fd5-4ce2-b1eb-84524c802ef8,2025-08-25 12:06:38.693113,2025-08-25 09:46:38.989908,\n5767edee-14e4-4e79-b366-f8bb6d334116,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-25,13:00:00,POSTED,f65f5853-937f-4e48-a1c3-d03a09baa0fe,2025-08-25 12:12:32.147774,2025-08-25 10:00:16.607803,\neade560d-1644-482f-99cf-91028e17487c,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,09:45:00,SCHEDULED,a52dbd12-711b-48e6-a658-06968d09bad6,2025-08-23 23:46:22.344061,2025-08-24 06:12:21.289266,\n284f56b9-933f-466f-86b0-405777a7c7ea,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,12:30:00,SCHEDULED,7cb6bba9-f626-4e76-bd91-1b1182a2eace,2025-09-02 06:36:43.841791,2025-09-02 03:36:49.480775,\n1552f582-e4f0-487a-91b8-9ab02aae34be,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,18:30:00,POSTED,54c1c6b1-2b9c-4aa9-a6fd-6c3687262b93,2025-08-24 18:15:44.818623,2025-08-24 15:31:30.502036,\n5767edee-14e4-4e79-b366-f8bb6d334116,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,19:00:00,POSTED,6871bcd6-0bce-4961-bf39-80eca41df2c9,2025-08-24 18:19:04.329241,2025-08-24 16:00:45.488315,\n3d65e187-2a95-45d0-920c-e33b463f1922,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,14:30:00,SCHEDULED,c73e1c51-b5eb-4ea0-8933-55e7c2b0aed5,2025-09-02 07:33:49.375808,2025-09-02 04:33:54.650657,\n5767edee-14e4-4e79-b366-f8bb6d334116,ac237199-1b9f-44b1-ab2c-871e9a040efa,3c70753e-829b-4418-b6b7-b25434e48b01,SINGLE,2025-09-04,10:00:00,SCHEDULED,4f80b752-c375-4f8b-b9b4-9151fc74d890,2025-09-04 09:51:49.596637,2025-09-04 06:51:49.695248,\n90b3016b-615b-4d53-b6a6-bc129991d61b,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,16:00:00,SCHEDULED,cd1b2478-4e47-41bd-a3ca-27d6cb0cd208,2025-09-02 07:41:17.668683,2025-09-02 04:41:25.342879,\n5064a1a6-a8a7-4875-b209-e33fcc54c84a,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,19:00:00,SCHEDULED,49fa883e-6e85-4fdc-a235-e8c0bd501ee7,2025-09-02 07:49:04.781845,2025-09-02 04:49:06.250422,\n5767edee-14e4-4e79-b366-f8bb6d334116,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,20:00:00,SCHEDULED,c8b9d576-f175-4793-b8fa-b37bc9d6c1b2,2025-09-02 07:50:15.610076,2025-09-02 04:50:16.373862,\n22554dbf-0be1-40c5-887a-d85fd1f2acd6,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,11:00:00,POSTED,25ad7676-1785-4718-a109-56ebcaed743c,2025-08-26 10:03:23.745448,2025-08-27 05:35:36.452763,2025-08-27 08:35:36.455069\n3e2f3147-b407-484d-8b5d-d197d932ae02,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,12:00:00,POSTED,f5d57078-5ff2-4a67-9da8-240382576a4a,2025-08-26 10:07:51.585484,2025-08-27 05:35:39.965329,2025-08-27 08:35:39.975199\n1552f582-e4f0-487a-91b8-9ab02aae34be,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,14:00:00,POSTED,9d808493-60b4-4834-ade0-4f9781b91fbf,2025-08-26 12:54:39.157857,2025-08-27 05:35:51.924621,2025-08-27 08:35:51.925803\n64483c3a-7025-42b6-8108-1bd362b68841,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,17:00:00,POSTED,e9dc81b2-f7a9-4db0-a2e1-36360653fe4a,2025-08-26 12:57:40.119618,2025-08-27 05:35:58.473377,2025-08-27 08:35:58.474710\n3e2f3147-b407-484d-8b5d-d197d932ae02,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-09-02,17:15:00,POSTED,d3d7bbcb-f292-4183-bb44-92f7fd9b5652,2025-09-02 17:12:02.642245,2025-09-02 14:16:24.180744,\n30e09114-86aa-49e7-9f64-08d36a169bc3,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-09-02,18:00:00,POSTED,c248de19-46e8-4b46-8913-2f8f0851b8fa,2025-09-02 17:53:33.980724,2025-09-02 15:00:30.917443,\n5064a1a6-a8a7-4875-b209-e33fcc54c84a,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,19:00:00,SCHEDULED,7c31cdfa-0bb9-47e3-b629-8f0d0322b7b9,2025-09-02 07:51:17.924863,2025-09-03 06:22:25.661318,2025-09-03 09:22:25.663563\n1552f582-e4f0-487a-91b8-9ab02aae34be,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-09-03,11:30:00,POSTED,512cbc3e-6cb2-42e7-ad70-e4ef80bbd8eb,2025-09-03 11:20:25.896123,2025-09-03 08:32:20.995143,\n90b3016b-615b-4d53-b6a6-bc129991d61b,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,17:00:00,SCHEDULED,561b8acc-5dff-4328-b63e-12d03124d192,2025-08-24 09:21:09.654930,2025-08-24 13:43:09.957688,\n3d65e187-2a95-45d0-920c-e33b463f1922,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,17:00:00,SCHEDULED,1f297b25-dbe1-4c61-8672-6fc237d7d764,2025-08-24 09:21:55.121615,2025-08-24 13:43:56.114294,\n90b3016b-615b-4d53-b6a6-bc129991d61b,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-25,00:00:00,SCHEDULED,171d0361-07a9-4d1b-8b54-4bc4b3c3bc87,2025-08-23 23:42:14.627082,2025-08-23 20:43:05.738925,2025-08-23 23:43:05.740838\n5767edee-14e4-4e79-b366-f8bb6d334116,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,17:00:00,SCHEDULED,bc571bdf-de0a-4c67-a0b7-b3755db31c56,2025-08-23 23:48:33.116989,2025-08-24 13:46:57.174167,\neade560d-1644-482f-99cf-91028e17487c,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,17:15:00,SCHEDULED,57a4bab5-c495-43c0-915a-ddcacd1b8ff8,2025-08-24 15:06:57.845855,2025-08-24 13:53:01.502745,\n3d65e187-2a95-45d0-920c-e33b463f1922,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-25,00:30:00,SCHEDULED,ed886e70-4099-413f-a1cf-6aa3ed033073,2025-08-23 23:47:02.288219,2025-08-23 20:47:48.982169,2025-08-23 23:47:48.983906\nf12e6ec2-6281-46e0-ae32-c6b737229a58,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-25,12:15:00,POSTED,ae8ea530-0b8b-4c29-9672-c3d457ab56cf,2025-08-25 12:01:52.836236,2025-08-25 09:15:58.210953,\n64483c3a-7025-42b6-8108-1bd362b68841,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-25,12:15:00,POSTED,c87b97a1-d99f-481e-a7d4-717a51e325a2,2025-08-25 12:01:00.896388,2025-08-25 09:16:09.932981,\n66d1bcb2-9aea-410f-bca2-0a3a86928bb9,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-25,12:15:00,POSTED,8093e986-9af9-406e-a04c-4b7992522cbc,2025-08-25 12:01:31.008620,2025-08-25 09:16:31.919095,\n5064a1a6-a8a7-4875-b209-e33fcc54c84a,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-25,12:30:00,POSTED,bb386325-c38d-4585-960f-e80e154f9f03,2025-08-25 12:03:47.270497,2025-08-25 09:30:18.558187,\n3e2f3147-b407-484d-8b5d-d197d932ae02,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-25,12:30:00,POSTED,e0f0d15d-a850-4eb6-b71f-6149009e02d2,2025-08-25 12:03:01.177602,2025-08-25 09:31:18.766807,\n30e09114-86aa-49e7-9f64-08d36a169bc3,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-25,12:45:00,POSTED,a5ec3954-9977-4314-96c6-d5d4446680fb,2025-08-25 12:05:46.949834,2025-08-25 09:45:13.231204,\n3d65e187-2a95-45d0-920c-e33b463f1922,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,14:30:00,POSTED,04fcbdfb-1e25-4d95-96fe-4a5219fb247e,2025-08-26 12:55:17.756507,2025-08-27 05:40:32.921637,2025-08-27 08:40:32.923144\n1552f582-e4f0-487a-91b8-9ab02aae34be,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,18:30:00,POSTED,2fe38d5e-7f4f-40f1-bc0a-5c6042b5e8dc,2025-08-24 18:15:39.456769,2025-08-24 15:31:16.966555,\n5767edee-14e4-4e79-b366-f8bb6d334116,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-08-24,19:00:00,POSTED,693e84d7-3cc8-488c-b3ee-9e89296e86c2,2025-08-24 18:19:11.759936,2025-08-24 16:01:01.864903,\n1552f582-e4f0-487a-91b8-9ab02aae34be,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,SINGLE,2025-08-25,22:30:00,POSTED,ad52af8d-f8ce-4fa1-8557-0783ae5cdd22,2025-08-25 22:15:54.445068,2025-08-25 19:30:08.473156,\ne3914a76-3cd1-4cd5-b533-052816cca252,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,13:00:00,SCHEDULED,18d1b5c8-4c3c-4b25-8a45-1b95e329baf3,2025-09-02 06:37:58.420355,2025-09-02 03:37:59.596715,\n1552f582-e4f0-487a-91b8-9ab02aae34be,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-09-02,11:45:00,SCHEDULED,d0e94cc7-ff3d-4476-8c77-9fac9d88dfef,2025-09-02 11:45:32.628873,2025-09-02 08:45:38.171839,\nf12e6ec2-6281-46e0-ae32-c6b737229a58,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,11:30:00,POSTED,bb5bfced-cd7e-47a5-9f7c-fcb2caf2a10a,2025-08-26 10:07:17.641659,2025-08-27 05:35:38.309052,2025-08-27 08:35:38.310271\n042bcf5d-5a66-4e2c-b648-cf6224c9bc20,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,18:00:00,POSTED,f72ea50f-0c55-4378-8413-9a4cbaa6d2da,2025-08-26 12:59:07.972906,2025-08-27 05:35:56.615646,2025-08-27 08:35:56.617023\n66d1bcb2-9aea-410f-bca2-0a3a86928bb9,3c70753e-829b-4418-b6b7-b25434e48b01,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-09-02,17:15:00,POSTED,50a31fd5-52aa-4986-b99a-43ba25a88a8a,2025-09-02 17:12:35.202330,2025-09-02 14:16:19.567295,\n30e09114-86aa-49e7-9f64-08d36a169bc3,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-09-02,18:00:00,POSTED,9828da8a-c482-4672-b175-c7dfa6607523,2025-09-02 17:54:07.977954,2025-09-02 15:00:24.693474,\n3d65e187-2a95-45d0-920c-e33b463f1922,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,14:30:00,SCHEDULED,7e596ce5-c477-4831-9bdc-e786399591e4,2025-09-02 07:35:39.239586,2025-09-03 06:22:14.855882,2025-09-03 09:22:14.858272\n90b3016b-615b-4d53-b6a6-bc129991d61b,3c70753e-829b-4418-b6b7-b25434e48b01,3c70753e-829b-4418-b6b7-b25434e48b01,EVERYDAY,,16:00:00,SCHEDULED,37c91ee9-f207-4b1a-919f-d56fb3800f24,2025-09-02 07:42:15.740091,2025-09-03 06:22:19.646671,2025-09-03 09:22:19.661526\nc9c90253-54ae-45f6-aa8e-36f3a76f6f02,ac237199-1b9f-44b1-ab2c-871e9a040efa,ac237199-1b9f-44b1-ab2c-871e9a040efa,SINGLE,2025-09-03,11:30:00,POSTED,6d851675-1342-4e81-8018-d842c2058d55,2025-09-03 11:27:32.966298,2025-09-03 08:32:24.196623,\n"
  },
  {
    "path": "local.compose.yaml",
    "content": "services:\n  bot:\n    build:\n      context: .\n      dockerfile: bot/Dockerfile\n    container_name: bot\n    restart: unless-stopped\n    volumes:\n      - ./upload/:/app/upload/\n    networks:\n      - assistant_bridge\n    depends_on:\n      - db\n      - migrator\n\n  db:\n    image: postgres:17\n    container_name: db\n    env_file: db.env\n    ports:\n      - \"5432:5432\"\n    restart: unless-stopped\n    volumes:\n      - postgres_data:/var/lib/postgresql/data/\n    networks:\n      - assistant_bridge\n\n  admin-backend:\n    build:\n      context: .\n      dockerfile: admin/backend/Dockerfile\n    container_name: admin-backend\n    restart: unless-stopped\n    ports:\n      - \"9090:8080\"\n    volumes:\n      - /etc/localtime:/etc/localtime:ro\n      - ./upload/:/app/upload/\n    networks:\n      - assistant_bridge\n    depends_on:\n      - db\n      - migrator\n\n  admin-frontend:\n    build:\n      context: admin/frontend\n      dockerfile: Dockerfile\n    container_name: admin-frontend\n    restart: unless-stopped\n    ports:\n      - \"3000:80\"\n    volumes:\n      - ./admin/frontend/nginx.conf:/etc/nginx/nginx.conf:ro\n\n  worker-manager:\n    build:\n      context: .\n      dockerfile: worker-manager/Dockerfile\n    container_name: worker-manager\n    restart: unless-stopped\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - ./worker-manager/infrastructure/docker/worker-settings:/app/infrastructure/docker/worker-settings\n    networks:\n      - assistant_bridge\n    depends_on:\n      - db\n      - migrator\n\n  #  worker:\n  #    build:\n  #      context: .\n  #      dockerfile: worker/Dockerfile\n  #    container_name: worker\n  #    restart: no\n  #    volumes:\n  #      - ./upload/:/app/upload/\n  #    networks:\n  #      - assistant_bridge\n\n  posts:\n    build:\n      context: .\n      dockerfile: posts-service/Dockerfile\n    container_name: posts-service\n    restart: unless-stopped\n    volumes:\n      - ./posts-service/jobs.sqlite:/app/jobs.sqlite\n    networks:\n      - assistant_bridge\n    depends_on:\n      - db\n      - migrator\n\n  loki:\n    image: grafana/loki:2.9.0\n    container_name: loki\n    command: -config.file=/etc/loki/config.yaml\n    restart: unless-stopped\n    ports:\n      - \"3100:3100\"\n    volumes:\n      - ./observability/loki/config.yaml:/etc/loki/config.yaml:ro\n      - ./data/loki:/loki\n    networks:\n      - assistant_bridge\n\n  promtail:\n    image: grafana/promtail:2.9.0\n    container_name: promtail\n    command: -config.file=/etc/promtail/promtail.yaml\n    restart: unless-stopped\n    volumes:\n      - ./observability/promtail/promtail.yaml:/etc/promtail/promtail.yaml:ro\n      - /var/lib/docker/containers:/var/lib/docker/containers:ro\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - ./data/promtail:/run/promtail\n    depends_on:\n      - loki\n    networks:\n      - assistant_bridge\n\n  grafana:\n    image: grafana/grafana:10.4.0\n    container_name: grafana\n    restart: unless-stopped\n    ports:\n      - \"3001:3000\"\n    volumes:\n      - ./data/grafana:/var/lib/grafana\n      - ./observability/grafana/provisioning:/etc/grafana/provisioning:ro\n    networks:\n      - assistant_bridge\n\n  watcher:\n    build:\n      context: .\n      dockerfile: watcher/Dockerfile\n    container_name: watcher\n    restart: unless-stopped\n    networks:\n      - assistant_bridge\n    depends_on:\n      - db\n      - migrator\n\n  migrator:\n    build:\n      context: .\n      dockerfile: migrator/Dockerfile\n    container_name: migrator\n    restart: no\n    volumes:\n      - ./migrator/migrations/:/app/migrations/\n    depends_on:\n      - db\n    networks:\n      - assistant_bridge\n\nvolumes:\n  postgres_data:\n\n\nnetworks:\n  assistant_bridge:\n    external: true\n    name: assistant_bridge\n"
  },
  {
    "path": "worker-manager/requirements.txt",
    "content": "aiodocker==0.24.0\naiofiles==24.1.0\naiogram==3.20.0.post0\naiohappyeyeballs==2.6.1\naiohttp==3.11.18\naiosignal==1.3.2\nalembic==1.15.2\nalembic-postgresql-enum==1.7.0\nannotated-types==0.7.0\nanyio==4.9.0\nAPScheduler==3.11.0\nasyncpg==0.30.0\nattrs==25.3.0\ncertifi==2025.4.26\nfastapi==0.115.12\nfrozenlist==1.6.0\ngreenlet==3.2.2\nh11==0.16.0\nhttpcore==1.0.9\nhttpx==0.28.1\nidna==3.10\nmagic-filter==1.0.12\nMako==1.3.10\nMarkupSafe==3.0.2\nmultidict==6.4.3\npropcache==0.3.1\npydantic==2.11.4\npydantic-settings==2.9.1\npydantic_core==2.33.2\npython-dotenv==1.1.0\nsniffio==1.3.1\nSQLAlchemy==2.0.41\nstarlette==0.46.2\ntyping-inspection==0.4.0\ntyping_extensions==4.13.2\ntzlocal==5.3.1\nyarl==1.20.0\n"
  },
  {
    "path": "worker-manager/Dockerfile",
    "content": "# worker-manager/Dockerfile\nARG PYTHON_VERSION=3.12.3\nFROM python:${PYTHON_VERSION}-slim AS builder\nENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1\n\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y gcc libpq-dev \\\n && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\n\n# 1) copy & install service deps + shared\nCOPY worker-manager/requirements.txt .\n\nRUN pip install --upgrade pip \\\n && pip install --prefix=/install -r requirements.txt\n\nCOPY shared/ ./shared\n\nRUN pip install --prefix=/install ./shared\n\n# ─── runtime ────────────────────────────────────────────────────\nFROM python:${PYTHON_VERSION}-slim AS runtime\nENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1\n# Set the TZ environment variable\nENV TZ=Europe/Moscow\n\n# Install tzdata, configure the timezone, and clean up\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends tzdata \\\n && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n && echo $TZ > /etc/timezone \\\n && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\n\n# bring in installed packages\nCOPY --from=builder /install /usr/local\n\n# copy your service code\nCOPY worker-manager/ .\n\nCOPY .env ./.env\n\nENTRYPOINT [\"python3\", \"main.py\"]\n"
  },
  {
    "path": "worker-manager/lol.py",
    "content": "[\n    MessageEntityDTO(type=\n                     'custom_emoji',\n                     offset=0,\n                     length=2,\n                     custom_emoji_id=5442607073164540686),\n    MessageEntityDTO(type=\n                     'custom_emoji',\n                     offset=2,\n                     length=2,\n                     custom_emoji_id=5440872743895575862),\n    MessageEntityDTO(type=\n                     'custom_emoji',\n                     offset=4,\n                     length=2,\n                     custom_emoji_id=5442820717722743409),\n    MessageEntityDTO(type=\n                     'custom_emoji',\n                     offset=6,\n                     length=2,\n                     custom_emoji_id=5440872743895575862),\n    MessageEntityDTO(type=\n                     'custom_emoji',\n                     offset=8,\n                     length=2,\n                     custom_emoji_id=5440422395099754542),\n    MessageEntityDTO(type=\n                     'custom_emoji',\n                     offset=10,\n                     length=2,\n                     custom_emoji_id=5440870355893759889),\n    MessageEntityDTO(type=\n                     'custom_emoji',\n                     offset=12,\n                     length=2,\n                     custom_emoji_id=5440500799727743101),\n    MessageEntityDTO(type=\n                     'custom_emoji',\n                     offset=14,\n                     length=2,\n                     custom_emoji_id=5440477035673694181),\n    MessageEntityDTO(type=\n                     'custom_emoji',\n                     offset=16,\n                     length=2,\n                     custom_emoji_id=5442915778233906362),\n    MessageEntityDTO(type=\n                     'custom_emoji',\n                     offset=22,\n                     length=2,\n                     custom_emoji_id=5431747364320716081),\n    MessageEntityDTO(type=\n                     'custom_emoji',\n                     offset=212,\n                     length=2,\n                     custom_emoji_id=5282999122008221435),\n    MessageEntityDTO(type=\n                     'custom_emoji',\n                     offset=307,\n                     length=2,\n                     custom_emoji_id=5345927337856740600),\n    MessageEntityDTO(type=\n                     'custom_emoji',\n                     offset=383,\n                     length=2,\n                     custom_emoji_id=5413523216788385992)\n]\n"
  },
  {
    "path": "worker-manager/__init__.py",
    "content": ""
  },
  {
    "path": "worker-manager/main.py",
    "content": "import asyncio\nimport logging\n\nfrom shared.infrastructure.main_db import init_db\n\nfrom settings import settings\nfrom dependencies.services.consumer import get_consumer\nfrom dependencies.services.container_manager import get_container_manager\n\nlogger = logging.getLogger(__name__)\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n)\n\n\nasync def main():\n    logger.info(\"Initializing service...\")\n\n    init_db(settings.db.url)\n    consumer = get_consumer()\n\n    container_manager = get_container_manager()\n\n    logger.info(\"Service initialized, starting...\")\n\n    try:\n        await asyncio.gather(consumer.execute(), container_manager.start_watching())\n    except KeyboardInterrupt:\n        logger.info(\"Shutting down...\")\n    except Exception as e:\n        logger.error(\"Unexpected exception\", exc_info=True)\n    finally:\n        logger.info(\"Service has been successfully shut down\")\n\n\nif __name__ == '__main__':\n    asyncio.run(main())\n"
  },
  {
    "path": "worker-manager/settings/worker.py",
    "content": "from pydantic import Field\nfrom shared.settings import AbstractSettings\n\n\nclass CommonWorkerSettings(AbstractSettings):\n    api_id: int\n    api_hash: str\n    # Max age for a queued send request to still be sent (minutes)\n    stale_threshold_minutes: int = Field(default=60)\n"
  },
  {
    "path": "worker-manager/settings/__init__.py",
    "content": "from pathlib import Path\n\nfrom pydantic import Field\nfrom pydantic_settings import (\n    SettingsConfigDict,\n)\nfrom shared.infrastructure.main_db import MainDBSettings\nfrom shared.services.upload.settings import UploadSettings\nfrom shared.services.watcher_client import WatcherSettings\nfrom shared.settings import AbstractSettings, DockerSettings, EnvironmentSettings\n\nfrom .posting_bot import PostingBotSettings\nfrom .worker import CommonWorkerSettings\n\n\nclass Settings(AbstractSettings):\n    db: MainDBSettings = Field(default_factory=MainDBSettings)\n    upload: UploadSettings = Field(default_factory=UploadSettings)\n    watcher: WatcherSettings = Field(default_factory=WatcherSettings)\n    docker: DockerSettings\n    worker: CommonWorkerSettings\n    posting_bot: PostingBotSettings\n\n    environment: EnvironmentSettings\n\n    model_config = SettingsConfigDict(\n        extra=\"ignore\",\n        json_file=Path(__file__).parent.parent / \"settings.json\",\n        json_file_encoding=\"utf-8\",\n    )\n\n\nsettings = Settings()\n"
  },
  {
    "path": "worker-manager/settings/posting_bot.py",
    "content": "from pydantic import SecretStr, Field\nfrom shared.settings import BotSettings\n\n\nclass PostingBotSettings(BotSettings):\n    token: SecretStr = Field(..., alias=\"POSTING_BOT_TOKEN\")\n    username: str = Field(..., alias=\"POSTING_BOT_USERNAME\")\n"
  },
  {
    "path": "worker-manager/dependencies/__init__.py",
    "content": ""
  },
  {
    "path": "worker-manager/dependencies/services/upload.py",
    "content": "from shared.abstractions.services import UploadServiceInterface\n\nfrom shared.dependencies.services.upload import get_upload_service as get_base_upload_service\n\nfrom settings import settings\n\n\ndef get_upload_service() -> UploadServiceInterface:\n    return get_base_upload_service(\n        public_backend_base_url=settings.environment.api_host,\n    )\n"
  },
  {
    "path": "worker-manager/dependencies/services/bot_service.py",
    "content": "from abstractions.services.bot_service import BotServiceInterface\nfrom services.bot_service import AiogramBotService\n\ndef get_bot_service() -> BotServiceInterface:\n    return AiogramBotService()\n"
  },
  {
    "path": "worker-manager/dependencies/services/__init__.py",
    "content": ""
  },
  {
    "path": "worker-manager/dependencies/services/watcher_client.py",
    "content": "from shared.abstractions.services.watcher_client import WatcherClientInterface\nfrom shared.dependencies.services.watcher_client import get_watcher_client_from_url\n\nfrom settings import settings\n\n\ndef get_watcher_client() -> WatcherClientInterface:\n    return get_watcher_client_from_url(settings.watcher.url)\n"
  },
  {
    "path": "worker-manager/dependencies/services/account_manager.py",
    "content": "from pathlib import Path\n\nfrom shared.dependencies.repositories import get_user_repository\nfrom shared.dependencies.repositories.worker_message import get_worker_message_repository\n\nfrom abstractions.services.manager import AccountManagerInterface\nfrom dependencies.services.bot_service import get_bot_service\nfrom dependencies.services.container_manager import get_container_manager\nfrom dependencies.services.watcher_client import get_watcher_client\nfrom services.account_manager import AccountManager\nfrom settings import settings\n\n\ndef get_account_manager() -> AccountManagerInterface:\n    return AccountManager(\n        container_manager=get_container_manager(),\n        worker_message_repository=get_worker_message_repository(),\n        user_repository=get_user_repository(),\n        watcher_client=get_watcher_client(),\n\n        app_root_config_path=Path(settings.docker.app_root_config_path),\n        api_id=settings.worker.api_id,\n        api_hash=settings.worker.api_hash,\n        bot_service=get_bot_service()\n    )\n"
  },
  {
    "path": "worker-manager/dependencies/services/consumer.py",
    "content": "from abstractions.services.sending_consumer import SendingConsumerInterface\nfrom dependencies.services.account_manager import get_account_manager\nfrom dependencies.services.sending_request import get_sending_request_service\nfrom services.sending_consumer import SendingConsumer\n\n\ndef get_consumer() -> SendingConsumerInterface:\n    return SendingConsumer(\n        account_manager=get_account_manager(),\n        sending_request_service=get_sending_request_service(),\n    )\n"
  },
  {
    "path": "worker-manager/dependencies/services/sending_request.py",
    "content": "from datetime import timedelta\n\nfrom shared.dependencies.repositories import get_post_request_repository\n\nfrom abstractions.services.sending_request import SendingRequestServiceInterface\nfrom services.sending_request import SendingRequestService\nfrom settings import settings\nfrom dependencies.services.watcher_client import get_watcher_client\n\n\ndef get_sending_request_service() -> SendingRequestServiceInterface:\n    return SendingRequestService(\n        post_request_repository=get_post_request_repository(),\n        stale_threshold=timedelta(minutes=settings.worker.stale_threshold_minutes),\n        watcher_client=get_watcher_client(),\n    )\n"
  },
  {
    "path": "worker-manager/dependencies/services/container_manager.py",
    "content": "from pathlib import Path\n\nfrom abstractions.services.container_manager import ContainerManagerInterface\nfrom infrastructure.docker import AsyncDockerAPIRepository\nfrom settings import settings\n\n\ndef get_container_manager() -> ContainerManagerInterface:\n    return AsyncDockerAPIRepository(\n        host_root_config_path=Path(settings.docker.host_root_config_path),\n        host_upload_dir=Path(settings.upload.host_upload_dir),\n        app_upload_dir=Path(settings.upload.app_upload_dir),\n\n        network_name=settings.docker.workers_network_name,\n        worker_image=settings.docker.worker_image,\n    )\n"
  },
  {
    "path": "worker-manager/abstractions/__init__.py",
    "content": ""
  },
  {
    "path": "worker-manager/abstractions/services/bot_service.py",
    "content": "from abc import ABC, abstractmethod\n\nclass BotServiceInterface(ABC):\n    @abstractmethod\n    async def send_post(\n        self,\n        chat_id: int,\n        text: str,\n        entities: list = None,\n        media_path: str = None,\n    ) -> None:\n        ...\n"
  },
  {
    "path": "worker-manager/abstractions/services/__init__.py",
    "content": ""
  },
  {
    "path": "worker-manager/abstractions/services/sending_consumer.py",
    "content": "from abc import ABC\n\nfrom shared.abstractions.services.consumer import ConsumerInterface\n\nfrom abstractions.services.manager import AccountManagerInterface\n\n\nclass SendingConsumerInterface(\n    ConsumerInterface[AccountManagerInterface],\n    ABC,\n):\n    ...\n"
  },
  {
    "path": "worker-manager/abstractions/services/sending_request.py",
    "content": "from abc import ABC, abstractmethod\nfrom typing import Optional\n\nfrom shared.domain.models import SendingRequest\n\n\nclass SendingRequestServiceInterface(ABC):\n    @abstractmethod\n    async def get_queued_message(self) -> Optional[SendingRequest]:\n        ...\n\n    @abstractmethod\n    async def set_in_progress(self, request: SendingRequest) -> None:\n        ...\n\n    @abstractmethod\n    async def set_failed(self, request: SendingRequest) -> None:\n        ..."
  },
  {
    "path": "worker-manager/abstractions/services/manager.py",
    "content": "from abc import ABC, abstractmethod\n\nfrom shared.domain.models import SendingRequest\n\nclass AccountManagerInterface(ABC):\n    @abstractmethod\n    async def send(self, request: SendingRequest):\n        ...\n"
  },
  {
    "path": "worker-manager/abstractions/services/container_manager.py",
    "content": "from abc import ABC, abstractmethod\nfrom dataclasses import dataclass\nfrom pathlib import Path\nfrom uuid import UUID\n\nfrom shared.domain.models import UserWithSessionString\n\n\n@dataclass\nclass WorkerContainer:\n    id: UUID\n    config_path: Path\n    restarts: int = 0\n    container_id: str = None\n\n\nclass ContainerManagerInterface(ABC):\n    @abstractmethod\n    async def get_container(self, worker_id: UUID) -> WorkerContainer:\n        pass\n\n    @abstractmethod\n    async def start_container(self, worker_id: UUID, config_path: Path) -> None:\n        pass\n\n    @abstractmethod\n    async def stop_container(self, worker_id: UUID) -> None:\n        pass\n\n    @abstractmethod\n    async def get_running_containers(self) -> list[WorkerContainer]:\n        pass\n\n    @abstractmethod\n    async def check_health(self, worker_id: UUID) -> bool:\n        pass\n\n    @abstractmethod\n    async def repair_container(self, worker_id: UUID) -> bool:\n        pass\n\n    @abstractmethod\n    async def check_for_active_worker(self, user_id: UUID) -> bool:\n        ...\n\n    @abstractmethod\n    async def start_watching(self) -> None:\n        ...\n"
  },
  {
    "path": "worker-manager/infrastructure/bot_db.py",
    "content": ""
  },
  {
    "path": "worker-manager/infrastructure/__init__.py",
    "content": ""
  },
  {
    "path": "worker-manager/infrastructure/docker/__init__.py",
    "content": "from asyncio import sleep\nfrom dataclasses import dataclass, field\nfrom logging import getLogger\nfrom pathlib import Path\nfrom typing import Any\nfrom uuid import UUID\n\nfrom aiodocker import Docker\nfrom dotenv import dotenv_values\nfrom shared.abstractions.singleton import Singleton\n\nfrom abstractions.services.container_manager import ContainerManagerInterface, WorkerContainer\n\nlogger = getLogger(__name__)\n\n\n@dataclass\nclass AsyncDockerAPIRepository(\n    ContainerManagerInterface,\n    Singleton,\n):\n    host_root_config_path: Path\n    host_upload_dir: Path\n    app_upload_dir: Path\n\n    client: Docker = field(default_factory=Docker)\n\n    worker_image: str = 'account-worker'\n    network_name: str = \"assistant_bridge\"\n    config_file_destination: Path = Path(\"/app/settings.json\")\n    # fluentd_address: str = \"localhost:24224\"   # todo: logging\n    # loki_labels: dict[str, str] = field(default_factory=lambda: {\n    #     \"service\": \"worker\",\n    # })\n\n    max_restarts: int = 3\n\n    _containers: dict[UUID, WorkerContainer] = field(default_factory=dict)\n\n    container_watcher_delay: float = 5\n\n    async def start_watching(self) -> None:\n        logger.info(f\"Starting container watcher, {id(self)}\")\n        while True:\n            logger.info(f\"Refreshing containers!\")\n            await self.refresh_containers()\n            await sleep(self.container_watcher_delay)\n\n    async def check_for_active_worker(self, user_id: UUID) -> bool:\n        return user_id in self._containers\n\n    async def get_container(self, worker_id: UUID) -> WorkerContainer:\n        return self._containers.get(worker_id)\n\n    async def refresh_containers(self) -> None:\n        to_remove = []\n        for worker_id, worker in self._containers.items():\n            if not await self.check_health(worker_id):\n                logger.info(f\"Container {worker_id} is not running, clean up...\")\n                to_remove.append(worker_id)\n\n        for worker_id in to_remove:\n            del self._containers[worker_id]\n\n    async def start_container(self, worker_id: UUID, config_path: Path) -> None:\n        logger.info(f\"Starting container with worker ID {worker_id} and config {config_path}\")\n\n        container_name = f\"{self.worker_image}-{worker_id}\"\n        container = await self.client.containers.create_or_replace(\n            name=container_name,\n            config=self._get_container_config(\n                self.worker_image,\n                config_path,\n                worker_id,\n            )\n        )\n        await container.start()\n\n        # network = await self.client.networks.get(self.network_name)\n        # await network.connect({\"Container\": container.id})\n\n        worker = WorkerContainer(\n            id=worker_id,\n            config_path=config_path,\n            container_id=container.id,\n        )\n\n        self._containers[worker_id] = worker\n\n        return container.id\n\n    def _get_container_config(self, image: str, config_path: Path, worker_id: UUID) -> dict[str, Any]:\n        env_map = dotenv_values(str('.env'))\n        env_list = [f\"{k}={v}\" for k, v in env_map.items() if v is not None]\n\n        return {\n            \"Image\": image,\n            \"Env\": env_list,\n            \"HostConfig\": {\n                \"Binds\": [\n                    f\"{self.host_root_config_path / config_path.name}:{self.config_file_destination}:ro\",\n                    f\"{self.host_upload_dir}:{self.app_upload_dir}\"\n                ],\n                # Пример включения docker logging driver (если решим вернуться к fluentd/loki)\n                # \"LogConfig\": {\n                #     \"Type\": \"loki\",\n                #     \"Config\": {\n                #         \"loki-url\": \"http://loki:3100/loki/api/v1/push\",\n                #         \"loki-external-labels\": \"service=worker,container={{.Name}}\"\n                #     }\n                # },\n                \"NetworkMode\": self.network_name,\n            },\n        }\n\n    async def stop_container(self, worker_id: UUID) -> None:\n        logger.info(f\"Stopping container {worker_id}\")\n        bot = self._containers.pop(worker_id, None)\n        if not bot:\n            return\n        container = await self.client.containers.get(\n            container_id=bot.container_id\n        )\n        await container.delete(force=True)\n\n    async def get_running_containers(self) -> list[WorkerContainer]:\n        return list(self._containers.values())\n\n    async def check_health(self, worker_id: UUID) -> bool:\n        bot = self._containers.get(worker_id)\n        if not bot:\n            return False\n        container = await self.client.containers.get(\n            container_id=bot.container_id\n        )\n        data = await container.show()\n        return data.get(\"State\", {}).get(\"Running\", False)\n\n    async def repair_container(self, worker_id: UUID) -> bool:\n        bot = self._containers.get(worker_id)\n        if not bot:\n            return False\n        container = await self.client.containers.get(\n            container_id=bot.container_id\n        )\n        if not await self.check_health(worker_id):\n            if bot.restarts >= self.max_restarts:\n                return False\n            bot.restarts += 1\n            await container.restart()\n        return True\n"
  },
  {
    "path": "worker-manager/infrastructure/docker/worker-settings/.placeholder",
    "content": ""
  },
  {
    "path": "worker-manager/infrastructure/docker/worker-settings/.gitignore",
    "content": "*\n!.placeholder"
  },
  {
    "path": "worker-manager/services/upload.py",
    "content": ""
  },
  {
    "path": "worker-manager/services/bot_service.py",
    "content": "import logging\nfrom aiogram import Bot, types\nfrom aiogram.client.default import DefaultBotProperties\nfrom aiogram.enums import ParseMode\n\n# from aiogram.client.session import SessionMiddleware\n\nfrom abstractions.services.bot_service import BotServiceInterface\nfrom dependencies.services.upload import get_upload_service\nfrom settings import settings\n\nlogger = logging.getLogger(__name__)\n\nclass AiogramBotService(BotServiceInterface):\n    def __init__(self):\n        token = settings.posting_bot.token.get_secret_value()\n        # устанавливаем HTML-парсинг по умолчанию\n        default_props = DefaultBotProperties(parse_mode=ParseMode.HTML)\n        self.bot = Bot(\n            token=token,\n            default=default_props,\n            # при желании можно явно попросить бот сам закрыть сессию в деструкторе\n            # auto_close=True,\n        )\n        self.upload = get_upload_service()\n\n    async def send_post(\n            self,\n            chat_id: int,\n            text: str,\n            entities: list = None,\n            media_path: str = None,\n    ) -> None:\n        \"\"\"\n        Отправляем либо текст, либо фото+текст пользователю/каналу.\n        Поддержка платных эмоджи: просто встраиваются в text.\n        \"\"\"\n        # 1) Логируем исходные entities перед любой обработкой\n        logger.debug(\"BOT_BUILD raw_entities=%s\", entities[:8])\n\n        if media_path:\n            logger.info(f\"BotService: send_photo to {chat_id}\")\n            media_url = self.upload.get_file_url(media_path)\n            logger.info(media_url)\n            logger.info(media_path)\n            logger.info(settings.environment.host)\n\n            # 2) Проверяем offsets прямо перед отправкой фото\n            bad = []\n            for ent in entities or []:\n                offset = ent[\"offset\"]\n                length = ent[\"length\"]\n                frag = text[offset: offset + length]\n                if frag != \"🦏\":\n                    bad.append((offset, repr(frag)))\n            logger.debug(\n                \"BOT_SEND_PHOTO text=%r ENT(first8)=%s BAD(first5)=%s\",\n                text[:200],\n                entities[:8],\n                bad[:5],\n            )\n\n            await self.bot.send_photo(\n                chat_id,\n                photo=media_url,\n                caption=text,\n                caption_entities=entities,\n            )\n        else:\n            logger.info(f\"BotService: send_message to {chat_id}\")\n\n            # 3) Проверяем offsets прямо перед отправкой текста\n            bad = []\n            for ent in entities or []:\n                offset = ent[\"offset\"]\n                length = ent[\"length\"]\n                frag = text[offset: offset + length]\n                if frag != \"🦏\":\n                    bad.append((offset, repr(frag)))\n            logger.debug(\n                \"BOT_SEND_TEXT text=%r ENT(first8)=%s BAD(first5)=%s\",\n                text[:200],\n                entities[:8],\n                bad[:5],\n            )\n\n            await self.bot.send_message(\n                chat_id,\n                text,\n                entities=entities,\n            )\n"
  },
  {
    "path": "worker-manager/services/__init__.py",
    "content": ""
  },
  {
    "path": "worker-manager/services/sending_consumer.py",
    "content": "import logging\nfrom asyncio import sleep\nfrom dataclasses import dataclass\nfrom typing import NoReturn\n\nfrom abstractions.services.manager import AccountManagerInterface\nfrom abstractions.services.sending_consumer import SendingConsumerInterface\nfrom abstractions.services.sending_request import SendingRequestServiceInterface\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass SendingConsumer(SendingConsumerInterface):\n    account_manager: AccountManagerInterface\n    sending_request_service: SendingRequestServiceInterface\n\n    idle_delay: float = 5\n    global_delay: float = 5\n\n    async def execute(self) -> NoReturn:\n        while True:\n            message_to_send = await self.sending_request_service.get_queued_message()\n            if message_to_send is None:\n                await sleep(self.idle_delay)\n                continue\n\n            logger.info(f\"new message! {message_to_send.id}\")\n            await self.sending_request_service.set_in_progress(message_to_send)\n\n            try:\n                await self.account_manager.send(message_to_send)\n            except Exception as e:\n                logger.error(e, exc_info=True)\n                await self.sending_request_service.set_failed(message_to_send)\n\n            await sleep(self.global_delay)\n"
  },
  {
    "path": "worker-manager/services/account_manager.py",
    "content": "import logging\nfrom dataclasses import dataclass\nfrom pathlib import Path\nfrom uuid import UUID, uuid4\n\nfrom shared.abstractions.services.watcher_client import WatcherClientInterface\nfrom shared.domain.models import SendingRequest\nfrom shared.abstractions.repositories import UserRepositoryInterface\nfrom shared.abstractions.repositories.worker_message import WorkerMessageRepositoryInterface\nfrom shared.domain.dto import CreateWorkerMessageDTO\nfrom shared.domain.models import SendPostRequest, UserWithSessionString\nfrom shared.domain.enums import WorkerMessageType, WorkerMessageStatus\nfrom shared.settings.worker import WorkerSettings\n\nfrom abstractions.services.bot_service import BotServiceInterface\nfrom abstractions.services.container_manager import ContainerManagerInterface\nfrom abstractions.services.manager import AccountManagerInterface\nfrom dependencies.services.bot_service import get_bot_service\nfrom services.exceptions import UnknownRequestTypeException\n\nlogger = logging.getLogger(__name__)\n\n@dataclass\nclass AccountManager(AccountManagerInterface):\n    container_manager: ContainerManagerInterface\n    worker_message_repository: WorkerMessageRepositoryInterface\n    user_repository: UserRepositoryInterface\n    bot_service: BotServiceInterface\n    watcher_client: WatcherClientInterface\n\n    app_root_config_path: Path\n    api_id: int\n    api_hash: str\n\n    async def send(self, request: SendingRequest) -> None:\n        if isinstance(request, SendPostRequest):\n            await self._send_post(request)\n            return\n\n        raise UnknownRequestTypeException(f\"{type(request)} requests are not supported\")\n\n    async def _send_post(self, request: SendPostRequest) -> None:\n        worker_message_dto = CreateWorkerMessageDTO(\n            user_id=request.user_id,\n            type=WorkerMessageType.POST,\n            text=request.post.text,\n            entities=request.post.entities,\n            media_path=request.post.image_path,\n            status=WorkerMessageStatus.PENDING,\n            chat_id=request.chat.chat_id,\n            request_id=request.id,\n        )\n\n        logger.info(f\"Sending post request {worker_message_dto}\")\n        logger.info(f\"Request was {request}\")\n\n        await self.worker_message_repository.create(worker_message_dto)\n\n        await self.ensure_worker_running(request.user_id)\n\n    async def ensure_worker_running(self, user_id: UUID) -> None:\n        user = await self.user_repository.get(user_id)\n\n        if await self.container_manager.check_for_active_worker(user.id):\n            return\n\n        worker_settings = self._make_worker_settings(user)\n        worker_settings_file = self.settings_to_file(worker_settings)\n\n        logger.info(worker_settings.model_dump())\n        logger.info(worker_settings_file)\n        with worker_settings_file.open('rt') as f:\n            logger.info(f.read())\n\n        await self.container_manager.start_container(\n            worker_id=worker_settings.user.id,\n            config_path=worker_settings_file,\n        )\n\n    def _make_worker_settings(self, user: UserWithSessionString) -> WorkerSettings:\n        return WorkerSettings(\n            user=user,\n            api_id=self.api_id,\n            api_hash=self.api_hash,\n        )\n\n    def settings_to_file(self, settings: WorkerSettings) -> Path:\n        filename = f\"{settings.user.telegram_username}.{uuid4()}.json\"\n        file_path = self.app_root_config_path / filename\n\n        if isinstance(settings, WorkerSettings):\n            structured_settings = settings.model_dump_json(\n                indent=4,\n            )\n            with file_path.open('wt') as f:\n                f.write(structured_settings)\n        else:\n            raise Exception('Settings should be of type WorkerSettings')\n\n        return file_path\n"
  },
  {
    "path": "worker-manager/services/exceptions.py",
    "content": "class UnknownRequestTypeException(Exception):\n    ...\n"
  },
  {
    "path": "worker-manager/services/sending_request.py",
    "content": "import logging\nfrom datetime import datetime, timedelta\nfrom dataclasses import dataclass\nfrom typing import Optional\n\nfrom shared.abstractions.repositories import SendPostRequestRepositoryInterface\nfrom shared.domain.dto import UpdateSendPostRequestDTO\nfrom shared.domain.enums import SendPostRequestStatus\nfrom shared.domain.requests import PostRequestStatusChangedRequest\nfrom shared.domain.models import SendingRequest, SendPostRequest\n\nfrom abstractions.services.sending_request import SendingRequestServiceInterface\nfrom shared.abstractions.services.watcher_client import WatcherClientInterface\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass SendingRequestService(SendingRequestServiceInterface):\n    post_request_repository: SendPostRequestRepositoryInterface\n    stale_threshold: timedelta = timedelta(hours=1)\n    watcher_client: WatcherClientInterface | None = None\n\n    async def get_queued_message(self) -> Optional[SendingRequest]:\n        \n        # Defense-in-depth: drop stale queued requests (older than 1 hour)\n        # Context: send post requests are created at the intended send time (MSK).\n        # If services were down, very old PLANNED requests could flood out later.\n        # We mark such requests as FAILED and skip them.\n        stale_threshold = self.stale_threshold\n\n        while True:\n            message = await self.post_request_repository.get_queued_message()\n            if message is None:\n                return None\n\n            try:\n                now = datetime.now()  # created_at is stored without tz (DB/MSK)\n                if (now - message.created_at) > stale_threshold:\n                    age = now - message.created_at\n                    logger.warning(\n                        \"Marking request %s as STALE at %s (age=%s > %s)\",\n                        getattr(message, 'id', None),\n                        now.isoformat(),\n                        age,\n                        stale_threshold,\n                    )\n                    await self.set_stale(message)\n                    # Continue to check next queued message\n                    continue\n            except Exception:\n                # If comparison fails for any reason, fall back to returning the message\n                logger.error(\"Failed to evaluate staleness for message %s\", getattr(message, 'id', None), exc_info=True)\n                return message\n\n            logger.info(f\"Received message {message}\")\n            return message\n\n    async def set_stale(self, request: SendingRequest) -> None:\n        if isinstance(request, SendPostRequest):\n            dto = UpdateSendPostRequestDTO(\n                status=SendPostRequestStatus.STALE,\n                stale_at=datetime.now(),\n            )\n\n            await self.post_request_repository.update(\n                obj_id=request.id,\n                obj=dto,\n            )\n            # Notify watcher that a child request became terminal to allow publication finalization\n            if self.watcher_client:\n                await self.watcher_client.report_request_status_changed(\n                    PostRequestStatusChangedRequest(request_id=request.id)\n                )\n\n    async def set_in_progress(self, request: SendingRequest):\n        if isinstance(request, SendPostRequest):\n            dto = UpdateSendPostRequestDTO(\n                status=SendPostRequestStatus.IN_PROGRESS,\n            )\n\n            await self.post_request_repository.update(\n                obj_id=request.id,\n                obj=dto,\n            )\n            if self.watcher_client:\n                await self.watcher_client.report_request_status_changed(\n                    PostRequestStatusChangedRequest(request_id=request.id)\n                )\n\n    async def set_failed(self, request: SendingRequest) -> None:\n        if isinstance(request, SendPostRequest):\n            dto = UpdateSendPostRequestDTO(\n                status=SendPostRequestStatus.FAILED,\n            )\n\n            await self.post_request_repository.update(\n                obj_id=request.id,\n                obj=dto,\n            )\n"
  },
  {
    "path": "migrator/alembic.ini",
    "content": "# A generic, single database configuration.\n\n[alembic]\n# path to migration scripts\n# Use forward slashes (/) also on windows to provide an os agnostic path\nscript_location = migrations\n\n# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s\n# Uncomment the line below if you want the files to be prepended with date and time\n# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file\n# for all available tokens\n# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s\n\n# sys.path path, will be prepended to sys.path if present.\n# defaults to the current working directory.\nprepend_sys_path = .\n\n# timezone to use when rendering the date within the migration file\n# as well as the filename.\n# If specified, requires the python>=3.9 or backports.zoneinfo library and tzdata library.\n# Any required deps can installed by adding `alembic[tz]` to the pip requirements\n# string value is passed to ZoneInfo()\n# leave blank for localtime\n# timezone =\n\n# max length of characters to apply to the \"slug\" field\n# truncate_slug_length = 40\n\n# set to 'true' to run the environment during\n# the 'revision' command, regardless of autogenerate\n# revision_environment = false\n\n# set to 'true' to allow .pyc and .pyo files without\n# a source .py file to be detected as revisions in the\n# versions/ directory\n# sourceless = false\n\n# version location specification; This defaults\n# to migrations/versions.  When using multiple version\n# directories, initial revisions must be specified with --version-path.\n# The path separator used here should be the separator specified by \"version_path_separator\" below.\n# version_locations = %(here)s/bar:%(here)s/bat:migrations/versions\n\n# version path separator; As mentioned above, this is the character used to split\n# version_locations. The default within new alembic.ini files is \"os\", which uses os.pathsep.\n# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.\n# Valid values for version_path_separator are:\n#\n# version_path_separator = :\n# version_path_separator = ;\n# version_path_separator = space\n# version_path_separator = newline\n#\n# Use os.pathsep. Default configuration used for new projects.\nversion_path_separator = os\n\n# set to 'true' to search source files recursively\n# in each \"version_locations\" directory\n# new in Alembic version 1.10\n# recursive_version_locations = false\n\n# the output encoding used when revision files\n# are written from script.py.mako\n# output_encoding = utf-8\n\nsqlalchemy.url = driver://user:pass@localhost/dbname\n\n\n[post_write_hooks]\n# post_write_hooks defines scripts or Python functions that are run\n# on newly generated revision scripts.  See the documentation for further\n# detail and examples\n\n# format using \"black\" - use the console_scripts runner, against the \"black\" entrypoint\n# hooks = black\n# black.type = console_scripts\n# black.entrypoint = black\n# black.options = -l 79 REVISION_SCRIPT_FILENAME\n\n# lint with attempts to fix using \"ruff\" - use the exec runner, execute a binary\n# hooks = ruff\n# ruff.type = exec\n# ruff.executable = %(here)s/.venv/bin/ruff\n# ruff.options = check --fix REVISION_SCRIPT_FILENAME\n\n# Logging configuration\n[loggers]\nkeys = root,sqlalchemy,alembic\n\n[handlers]\nkeys = console\n\n[formatters]\nkeys = generic\n\n[logger_root]\nlevel = WARNING\nhandlers = console\nqualname =\n\n[logger_sqlalchemy]\nlevel = WARNING\nhandlers =\nqualname = sqlalchemy.engine\n\n[logger_alembic]\nlevel = INFO\nhandlers =\nqualname = alembic\n\n[handler_console]\nclass = StreamHandler\nargs = (sys.stderr,)\nlevel = NOTSET\nformatter = generic\n\n[formatter_generic]\nformat = %(levelname)-5.5s [%(name)s] %(message)s\ndatefmt = %H:%M:%S\n"
  },
  {
    "path": "migrator/Dockerfile",
    "content": "# worker-manager/Dockerfile\nARG PYTHON_VERSION=3.12.3\nFROM python:${PYTHON_VERSION}-slim AS builder\nENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1\n\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y gcc libpq-dev \\\n && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\n\n# 1) copy & install service deps + shared\nCOPY shared/ ./shared\nRUN pip install --upgrade pip \\\n    && pip install --prefix=/install ./shared\n\n# ─── runtime ────────────────────────────────────────────────────\nFROM python:${PYTHON_VERSION}-slim AS runtime\nENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1\n# Set the TZ environment variable\nENV TZ=Europe/Moscow\n\n# Install tzdata, configure the timezone, and clean up\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends tzdata \\\n && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n && echo $TZ > /etc/timezone \\\n && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\n\n# bring in installed packages\nCOPY --from=builder /install /usr/local\n\n# copy your service code\nCOPY migrator/ .\n\nENTRYPOINT [\"python3\", \"main.py\"]\n"
  },
  {
    "path": "migrator/__init__.py",
    "content": ""
  },
  {
    "path": "migrator/main.py",
    "content": "import asyncio\nimport logging\nfrom pathlib import Path\n\nfrom pydantic import Field\nfrom pydantic_settings import SettingsConfigDict\nfrom shared.infrastructure.main_db import apply_migrations, MainDBSettings\nfrom shared.settings import AbstractSettings\n\nlogger = logging.getLogger(__name__)\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n)\n\n\nclass MigratorSettings(AbstractSettings):\n    main_db: MainDBSettings = Field(default_factory=MainDBSettings)\n\n    model_config = SettingsConfigDict(\n        extra=\"ignore\",\n        json_file=Path(__file__).parent / \"settings.json\",\n        json_file_encoding=\"utf-8\",\n    )\n\n\nasync def main():\n    settings = MigratorSettings()\n\n    await apply_migrations(url=settings.main_db.url)\n    logger.info(\"DB upgrade successfully\")\n\n\nif __name__ == '__main__':\n    asyncio.run(main())\n"
  },
  {
    "path": "posts-service/requirements.txt",
    "content": "alembic==1.15.2\nalembic-postgresql-enum==1.7.0\nannotated-types==0.7.0\nAPScheduler==3.11.0\nasyncpg==0.30.0\ngreenlet==3.2.2\nMako==1.3.10\nMarkupSafe==3.0.2\npydantic==2.11.4\npydantic-settings==2.9.1\npydantic_core==2.33.2\npython-dotenv==1.1.0\nSQLAlchemy==2.0.41\ntyping-inspection==0.4.0\ntyping_extensions==4.13.2\ntzlocal==5.3.1\n"
  },
  {
    "path": "posts-service/Dockerfile",
    "content": "ARG PYTHON_VERSION=3.12.3\nFROM python:${PYTHON_VERSION}-slim AS builder\nENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1\n\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y gcc libpq-dev \\\n && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\n\nCOPY posts-service/requirements.txt .\n\nRUN pip install --upgrade pip \\\n && pip install --prefix=/install -r requirements.txt\n\n# 1) copy & install service deps + shared\nCOPY shared/ ./shared\nRUN pip install --prefix=/install ./shared\n\n# ─── runtime ────────────────────────────────────────────────────\nFROM python:${PYTHON_VERSION}-slim AS runtime\nENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1\n# Set the TZ environment variable\nENV TZ=Europe/Moscow\n\n# Install tzdata, configure the timezone, and clean up\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends tzdata \\\n && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n && echo $TZ > /etc/timezone \\\n && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\n\n# bring in installed packages\nCOPY --from=builder /install /usr/local\n\n# copy your service code\nCOPY posts-service/ .\n\nENTRYPOINT [\"python3\", \"main.py\"]\n"
  },
  {
    "path": "posts-service/__init__.py",
    "content": ""
  },
  {
    "path": "posts-service/.gitignore",
    "content": "*.sqlite"
  },
  {
    "path": "posts-service/settings.py",
    "content": "from pathlib import Path\nfrom uuid import UUID\n\nfrom pydantic import Field\nfrom pydantic_settings import SettingsConfigDict\nfrom shared.infrastructure.main_db import MainDBSettings\nfrom shared.services.watcher_client import WatcherSettings\nfrom shared.settings import AbstractSettings\nfrom shared.settings.scheduler import SchedulerSettings\n\nclass SenderSettings(AbstractSettings):\n    id: UUID = Field(..., alias=\"SENDER_MANAGER_ID\")\n\n\nclass BootstrapSettings(AbstractSettings):\n    # How many minutes past the scheduled time a SINGLE post is allowed to be\n    # before being considered stale during bootstrap restore.\n    single_miss_grace_minutes: int = Field(default=60)\n\n\nclass Settings(AbstractSettings):\n    db: MainDBSettings = Field(default_factory=MainDBSettings)\n    scheduler: SchedulerSettings = Field(default_factory=SchedulerSettings)\n    watcher: WatcherSettings = Field(default_factory=WatcherSettings)\n    sender: SenderSettings\n    bootstrap: BootstrapSettings = Field(default_factory=BootstrapSettings)\n\n    model_config = SettingsConfigDict(\n        extra=\"ignore\",\n        json_file=Path(__file__).parent / \"settings.json\",\n        json_file_encoding=\"utf-8\",\n    )\n\n\nsettings = Settings()\n"
  },
  {
    "path": "posts-service/main.py",
    "content": "import asyncio\nimport logging\nfrom datetime import datetime, timedelta\nfrom uuid import UUID\n\nfrom shared.infrastructure.main_db import init_db\nfrom shared.domain.enums import PublicationStatus, ScheduledType\nfrom shared.dependencies.services.get_scheduler import get_scheduler\nfrom apscheduler.events import EVENT_JOB_MISSED\n\nfrom dependencies.services.consumer import get_posts_consumer\nfrom shared.dependencies.repositories.post_to_publish import get_post_to_publish_repository\nfrom dependencies.services.posting import get_posting_service\nfrom settings import settings\n\nlogger = logging.getLogger(__name__)\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n)\n\nasync def main():\n    logger.info(\"Starting posting service\")\n\n    init_db(settings.db.url)\n\n    # bootstrap: re-schedule posts into APScheduler on clean scheduler DB,\n    # with filters to avoid re-scheduling terminal or stale singles\n    try:\n        repo = get_post_to_publish_repository()\n        scheduler = get_scheduler(settings.scheduler.job_store_sqlite_path)\n\n        async def _handle_missed_job(job_id: str):\n            try:\n                if job_id.startswith(\"post_\") and not job_id.startswith(\"post_daily_\"):\n                    post_id_str = job_id.split(\"post_\", 1)[1]\n                    post_uuid = UUID(post_id_str)\n                    logger.info(f\"Marking missed one-off publication {post_uuid} as STALE due to job misfire\")\n                    await repo.set_status(post_uuid, PublicationStatus.STALE)\n            except Exception as e:\n                logger.error(f\"Failed to handle missed job {job_id}: {e}\", exc_info=True)\n\n        def _on_scheduler_event(event):\n            try:\n                if getattr(event, 'code', None) == EVENT_JOB_MISSED:\n                    job_id = getattr(event, 'job_id', None)\n                    if job_id:\n                        asyncio.create_task(_handle_missed_job(job_id))\n            except Exception:\n                logger.error(\"Error in scheduler listener\", exc_info=True)\n\n        scheduler.add_listener(_on_scheduler_event, mask=EVENT_JOB_MISSED)\n        posting_service = get_posting_service()\n        posts = await repo.get_all(limit=10000, offset=0)\n        logger.info(f\"Bootstrap scheduling: restoring {len(posts)} posts into scheduler\")\n        grace = timedelta(minutes=settings.bootstrap.single_miss_grace_minutes)\n        now = datetime.now()\n\n        terminal_statuses = {\n            PublicationStatus.POSTED,\n            PublicationStatus.FAILED,\n            PublicationStatus.CANCELED,\n            PublicationStatus.STALE,\n        }\n\n        restored = 0\n        skipped_terminal = 0\n        marked_stale = 0\n\n        for p in posts:\n            try:\n                # Skip terminal statuses entirely\n                if p.status in terminal_statuses:\n                    skipped_terminal += 1\n                    continue\n\n                # Handle SINGLE posts that are long past due\n                if p.scheduled_type == ScheduledType.SINGLE and p.scheduled_date is not None:\n                    scheduled_at = datetime.combine(p.scheduled_date, p.scheduled_time)\n                    if scheduled_at + grace < now:\n                        # Mark publication as STALE (won't be executed automatically)\n                        await repo.set_status(p.id, PublicationStatus.STALE)\n                        marked_stale += 1\n                        continue\n\n                await posting_service.schedule_post(p)\n                restored += 1\n            except Exception as e:\n                logger.error(f\"Failed to restore scheduling for post {getattr(p, 'id', '?')}: {e}\")\n        logger.info(\n            \"Bootstrap summary: restored=%s, skipped_terminal=%s, marked_stale=%s\",\n            restored, skipped_terminal, marked_stale,\n        )\n    except Exception:\n        logger.error(\"Bootstrap scheduling failed\", exc_info=True)\n\n    consumer = get_posts_consumer()\n\n    try:\n        await consumer.execute()\n    except KeyboardInterrupt:\n        logger.info(\"Received KeyboardInterrupt, shutting down...\")\n        exit(0)\n    except Exception as e:\n        logger.error(f\"An error occurred: {e}\", exc_info=True)\n        exit(1)\n\n\nlogger.info(__name__)\n\nif __name__ == \"__main__\":\n\n    asyncio.run(main())\n"
  },
  {
    "path": "posts-service/dependencies/__init__.py",
    "content": ""
  },
  {
    "path": "posts-service/dependencies/services/posting.py",
    "content": "from shared.dependencies.repositories import get_post_request_repository\nfrom shared.dependencies.services.get_scheduler import get_scheduler\n\nfrom abstractions.services.posting import PostingServiceInterface\nfrom services.posting import PostingService\nfrom settings import settings\n\n\ndef get_posting_service() -> PostingServiceInterface:\n    return PostingService(\n        posts_requests_repository=get_post_request_repository(),\n        scheduler=get_scheduler(settings.scheduler.job_store_sqlite_path),\n    )\n"
  },
  {
    "path": "posts-service/dependencies/services/__init__.py",
    "content": ""
  },
  {
    "path": "posts-service/dependencies/services/watcher_client.py",
    "content": "from shared.abstractions.services.watcher_client import WatcherClientInterface\nfrom shared.dependencies.services.watcher_client import get_watcher_client_from_url\n\nfrom settings import settings\n\n\ndef get_watcher_client() -> WatcherClientInterface:\n    return get_watcher_client_from_url(\n        base_url=settings.watcher.url,\n    )\n"
  },
  {
    "path": "posts-service/dependencies/services/consumer.py",
    "content": "from shared.dependencies.repositories.post_to_publish import get_post_to_publish_repository\n\nfrom abstractions.services.cosumer import PostsConsumerInterface\nfrom dependencies.services.posting import get_posting_service\nfrom services.consumer import PostsConsumer\n\n\ndef get_posts_consumer() -> PostsConsumerInterface:\n    return PostsConsumer(\n        posting_service=get_posting_service(),\n        posts_to_publish_repository=get_post_to_publish_repository(),\n    )\n"
  },
  {
    "path": "posts-service/abstractions/__init__.py",
    "content": ""
  },
  {
    "path": "posts-service/abstractions/services/posting.py",
    "content": "from abc import ABC, abstractmethod\n\n\nclass PostingServiceInterface(ABC):\n    @abstractmethod\n    async def schedule_post(self, post):\n        ...\n"
  },
  {
    "path": "posts-service/abstractions/services/__init__.py",
    "content": ""
  },
  {
    "path": "posts-service/abstractions/services/cosumer.py",
    "content": "from abc import ABC\n\nfrom shared.abstractions.services import ConsumerInterface\n\nfrom abstractions.services.posting import PostingServiceInterface\n\n\nclass PostsConsumerInterface(\n    ConsumerInterface[PostingServiceInterface],\n    ABC,\n):\n    ...\n"
  },
  {
    "path": "posts-service/services/__init__.py",
    "content": ""
  },
  {
    "path": "posts-service/services/consumer.py",
    "content": "import logging\nfrom asyncio import sleep\nfrom dataclasses import dataclass\nfrom typing import NoReturn\n\nfrom shared.abstractions.repositories import PostToPublishRepositoryInterface\nfrom shared.domain.enums import PublicationStatus\n\nfrom abstractions.services.cosumer import PostsConsumerInterface\nfrom abstractions.services.posting import PostingServiceInterface\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass PostsConsumer(PostsConsumerInterface):\n    posting_service: PostingServiceInterface\n\n    posts_to_publish_repository: PostToPublishRepositoryInterface\n\n    idle_delay: int = 10\n    global_delay: int = 10\n\n    async def execute(self) -> NoReturn:\n        logger.info(\"Consumer started\")\n        while True:\n            post_to_publish = await self.posts_to_publish_repository.get_queued_post()\n            if not post_to_publish:\n                logger.info(\"No posts to publish\")\n                await sleep(self.idle_delay)\n                continue\n\n            logger.info(\"Scheduling post\")\n            await self.posts_to_publish_repository.set_status(\n                post_id=post_to_publish.id,\n                status=PublicationStatus.SCHEDULING,\n            )\n            try:\n                await self.posting_service.schedule_post(post_to_publish)\n            except Exception as e:\n                logger.error(f\"Failed to schedule post: {e}\", exc_info=True)\n                await self.posts_to_publish_repository.set_status(\n                    post_id=post_to_publish.id,\n                    status=PublicationStatus.FAILED,\n                )\n            else:\n                logger.info(\"Post scheduled successfully\")\n                await self.posts_to_publish_repository.set_status(\n                    post_id=post_to_publish.id,\n                    status=PublicationStatus.SCHEDULED,\n                )\n\n            await sleep(self.global_delay)\n"
  },
  {
    "path": "posts-service/services/posting/__init__.py",
    "content": "import logging\nfrom dataclasses import dataclass\nfrom datetime import datetime, date, timedelta\nfrom uuid import UUID\n\nfrom shared.abstractions.repositories import SendPostRequestRepositoryInterface\nfrom shared.abstractions.services.scheduler import SchedulerInterface\nfrom shared.abstractions.singleton import Singleton\nfrom shared.domain.enums import ScheduledType\nfrom shared.domain.models import PostToPublish\n\nfrom abstractions.services.posting import PostingServiceInterface\nfrom .jobs import publish\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass PostingService(\n    PostingServiceInterface,\n    Singleton,\n):\n    posts_requests_repository: SendPostRequestRepositoryInterface\n\n    scheduler: SchedulerInterface\n\n    async def schedule_post(self, post: PostToPublish):\n        match post.scheduled_type:\n            case ScheduledType.SINGLE:\n                logger.info(\"Found single scheduled post, scheduling it\")\n                self._schedule_post(\n                    post_id=post.id,\n                    schedule_at=datetime.combine(\n                        post.scheduled_date,\n                        post.scheduled_time,\n                    ),\n                )\n            case ScheduledType.EVERYDAY:\n                logger.info(\"Found daily scheduled post, scheduling it (cron)\")\n                run_hour = post.scheduled_time.hour\n                run_minute = post.scheduled_time.minute\n                self.scheduler.schedule_daily(\n                    callback=publish,\n                    hour=run_hour,\n                    minute=run_minute,\n                    args=(post.id, ),\n                    job_id=f\"post_daily_{post.id}\",\n                )\n\n    def _schedule_post(self, post_id: UUID, schedule_at: datetime) -> None:\n        logger.info(f\"_scheduling post {post_id}\")\n        logger.info(f\"_scheduling post at {schedule_at}, now is {datetime.now()}\")\n        self.scheduler.schedule_once(\n            callback=publish,\n            runs_on=schedule_at,\n            args=(post_id, ),\n            job_id=f\"post_{post_id}\",\n        )\n"
  },
  {
    "path": "posts-service/services/posting/jobs.py",
    "content": "import logging\nfrom datetime import datetime\nfrom uuid import UUID\n\nfrom shared.dependencies.repositories import get_post_request_repository\nfrom shared.dependencies.repositories.post_to_publish import get_post_to_publish_repository\nfrom shared.domain.dto import CreateSendPostRequestDTO\nfrom shared.domain.enums import SendPostRequestStatus, PublicationStatus\n# from shared.domain.requests import PostPublicationStartedRequest\n\n# from dependencies.services.watcher_client import get_watcher_client\nfrom settings import settings\n\n\nasync def publish(post_id: UUID) -> None:\n    posts_to_publish_repository = get_post_to_publish_repository()\n    post_requests_repository = get_post_request_repository()\n    # watcher_client = get_watcher_client()\n\n    logger = logging.getLogger(f'publisher_job_{post_id}')\n\n    post = await posts_to_publish_repository.get(post_id)\n\n    if post.deleted_at is not None:\n        logger.info(f\"Publishing of post {post.id} is cancelled due to the post deletion\")\n        await posts_to_publish_repository.set_status(post.id, PublicationStatus.CANCELED)\n        return\n\n    logger.info(f\"Publishing post {post.id}\")\n    # Mark publication as in progress\n    try:\n        await posts_to_publish_repository.set_status(post.id, PublicationStatus.IN_PROGRESS)\n    except Exception:\n        logger.error(\"Failed to set publication status to IN_PROGRESS\", exc_info=True)\n\n    try:\n        child_requests: list[UUID] = []\n        for chat in post.chats:\n            post_request_dto = CreateSendPostRequestDTO(\n                post_id=post.post_id,\n                chat_id=chat.id,\n                user_id=settings.sender.id,\n                status=SendPostRequestStatus.PLANNED,\n                publication_id=post.id,\n                scheduled_at=(\n                    datetime.combine(post.scheduled_date, post.scheduled_time)\n                    if post.scheduled_date is not None else datetime.now()\n                ),\n            )\n\n            new = await post_requests_repository.create(post_request_dto)\n            child_requests.append(new)\n\n    except Exception as e:\n        logger.error(f\"Failed to publish post: {e}\", exc_info=True)\n        try:\n            await posts_to_publish_repository.set_status(post.id, PublicationStatus.FAILED)\n        except Exception:\n            logger.error(\"Failed to set publication status to FAILED\", exc_info=True)\n"
  },
  {
    "path": "watcher/requirements.txt",
    "content": "aiofiles==24.1.0\nalembic==1.16.0\nalembic-postgresql-enum==1.7.0\nannotated-types==0.7.0\nanyio==4.9.0\nAPScheduler==3.11.0\nasyncpg==0.30.0\ncertifi==2025.4.26\nclick==8.2.1\nfastapi==0.115.12\ngreenlet==3.2.2\nh11==0.16.0\nhttpcore==1.0.9\nhttpx==0.28.1\nidna==3.10\nMako==1.3.10\nMarkupSafe==3.0.2\npydantic==2.11.4\npydantic-settings==2.9.1\npydantic_core==2.33.2\npython-dotenv==1.1.0\nsniffio==1.3.1\nSQLAlchemy==2.0.41\nstarlette==0.46.2\ntyping-inspection==0.4.1\ntyping_extensions==4.13.2\ntzlocal==5.3.1\nuvicorn==0.34.2\n"
  },
  {
    "path": "watcher/Dockerfile",
    "content": "ARG PYTHON_VERSION=3.12.3\nFROM python:${PYTHON_VERSION}-slim AS builder\nENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1\n\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y gcc libpq-dev \\\n && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\n\nCOPY watcher/requirements.txt .\n\nRUN pip install --upgrade pip \\\n && pip install --prefix=/install -r requirements.txt\n\n# 1) copy & install service deps + shared\nCOPY shared/ ./shared\nRUN pip install --prefix=/install ./shared\n\n# ─── runtime ────────────────────────────────────────────────────\nFROM python:${PYTHON_VERSION}-slim AS runtime\nENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1\n# Set the TZ environment variable\nENV TZ=Europe/Moscow\n\n# Install tzdata, configure the timezone, and clean up\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends tzdata \\\n && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n && echo $TZ > /etc/timezone \\\n && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\n\n# bring in installed packages\nCOPY --from=builder /install /usr/local\n\n# copy your service code\nCOPY watcher/ .\n\nENTRYPOINT [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8080\"]\n"
  },
  {
    "path": "watcher/__init__.py",
    "content": ""
  },
  {
    "path": "watcher/settings.py",
    "content": "from pathlib import Path\n\nfrom pydantic import Field\n\nfrom pydantic_settings import SettingsConfigDict\n\nfrom shared.infrastructure.main_db import MainDBSettings\nfrom shared.settings import AbstractSettings\n\n\nclass Settings(AbstractSettings):\n    db: MainDBSettings = Field(default_factory=MainDBSettings)\n\n    model_config = SettingsConfigDict(\n        extra=\"ignore\",\n        json_file=Path(__file__).parent.parent / \"settings.json\",\n        json_file_encoding=\"utf-8\",\n    )\n\nsettings = Settings()\n"
  },
  {
    "path": "watcher/main.py",
    "content": "import logging\nfrom contextlib import asynccontextmanager\nfrom typing import AsyncGenerator\n\nfrom fastapi import FastAPI\nfrom shared.infrastructure.main_db import init_db\n\nfrom routes import (\n    watch_router,\n)\nfrom settings import settings\n\nlogger = logging.getLogger(__name__)\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n)\n\n\n@asynccontextmanager\nasync def lifespan(_) -> AsyncGenerator[None, None]:\n    init_db(settings.db.url)\n\n    yield\n\n\napp = FastAPI(lifespan=lifespan)\n\napp.include_router(watch_router)\n"
  },
  {
    "path": "watcher/dependencies/__init__.py",
    "content": ""
  },
  {
    "path": "watcher/dependencies/services/__init__.py",
    "content": ""
  },
  {
    "path": "watcher/dependencies/services/publication.py",
    "content": "from shared.dependencies.repositories import get_post_request_repository\nfrom shared.dependencies.repositories.post_to_publish import get_post_to_publish_repository\n\nfrom abstractions.services.publication import PublicationServiceInterface\nfrom services.publication import PublicationService\n\n\ndef get_publication_service() -> PublicationServiceInterface:\n    return PublicationService(\n        post_to_publish_repository=get_post_to_publish_repository(),\n        posts_request_repository=get_post_request_repository(),\n    )\n"
  },
  {
    "path": "watcher/dependencies/services/messages.py",
    "content": "from shared.dependencies.repositories import get_post_request_repository\nfrom shared.dependencies.repositories.post_to_publish import get_post_to_publish_repository\nfrom shared.dependencies.repositories.worker_message import get_worker_message_repository\n\nfrom abstractions.services.messages import MessageServiceInterface\nfrom dependencies.services.requests import get_requests_service\nfrom services.messages import MessageService\n\n\ndef get_messages_service() -> MessageServiceInterface:\n    return MessageService(\n        worker_message_repository=get_worker_message_repository(),\n        post_requests_repository=get_post_request_repository(),\n        posts_to_publish_repository=get_post_to_publish_repository(),\n        requests_service=get_requests_service(),\n    )"
  },
  {
    "path": "watcher/dependencies/services/watcher.py",
    "content": "from abstractions.services.watcher import WatcherInterface\nfrom dependencies.services.messages import get_messages_service\nfrom dependencies.services.publication import get_publication_service\nfrom dependencies.services.requests import get_requests_service\nfrom services.watcher import Watcher\n\n\ndef get_watcher() -> WatcherInterface:\n    return Watcher(\n        publication_service=get_publication_service(),\n        requests_service=get_requests_service(),\n        message_service=get_messages_service(),\n    )\n"
  },
  {
    "path": "watcher/dependencies/services/requests.py",
    "content": "from shared.dependencies.repositories import get_post_request_repository\nfrom shared.dependencies.repositories.worker_message import get_worker_message_repository\n\nfrom abstractions.services.requests import SendingRequestsServiceInterface\nfrom dependencies.services.publication import get_publication_service\nfrom services.requests import SendingRequestsService\n\n\ndef get_requests_service() -> SendingRequestsServiceInterface:\n    return SendingRequestsService(\n        post_requests_repository=get_post_request_repository(),\n        messages_repository=get_worker_message_repository(),\n        publication_service=get_publication_service(),\n    )\n"
  },
  {
    "path": "watcher/abstractions/__init__.py",
    "content": ""
  },
  {
    "path": "watcher/abstractions/services/__init__.py",
    "content": ""
  },
  {
    "path": "watcher/abstractions/services/publication.py",
    "content": "from abc import ABC, abstractmethod\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom shared.domain.models import Publication, SendingRequest\nfrom shared.domain.requests import PublicationType, PublicationStartedRequest\n\n\nclass PublicationServiceInterface(ABC):\n    @abstractmethod\n    async def register_finished_request(self, request: SendingRequest) -> None:\n        ...\n"
  },
  {
    "path": "watcher/abstractions/services/messages.py",
    "content": "from abc import ABC, abstractmethod\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom shared.domain.models import WorkerMessage\nfrom shared.domain.requests import MessageSentRequest\n\n\nclass MessageServiceInterface(ABC):\n    @abstractmethod\n    async def get_message(self, message_id: UUID) -> Optional[WorkerMessage]:\n        ...\n\n    @abstractmethod\n    async def register_message(self, request: MessageSentRequest) -> None:\n        ...\n"
  },
  {
    "path": "watcher/abstractions/services/watcher.py",
    "content": "from abc import ABC, abstractmethod\n\nfrom shared.domain.requests import PublicationStartedRequest, RequestProcessingStartedRequest, MessageSentRequest, RequestStatusChangedRequest\n\n\nclass WatcherInterface(\n    ABC,\n):\n    @abstractmethod\n    async def register_message(self, request: MessageSentRequest) -> None:\n        ...\n\n    @abstractmethod\n    async def register_request_status_change(self, request: RequestStatusChangedRequest) -> None:\n        ...\n"
  },
  {
    "path": "watcher/abstractions/services/requests.py",
    "content": "from abc import ABC, abstractmethod\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom shared.domain.models import WorkerMessage, SendingRequest\nfrom shared.domain.requests import PublicationType, RequestProcessingStartedRequest\n\n\nclass SendingRequestsServiceInterface(ABC):\n    @abstractmethod\n    async def get_request(self, request_id: UUID, request_type: PublicationType) -> Optional[SendingRequest]:\n        ...\n\n    @abstractmethod\n    async def register_sent_message(self, message: WorkerMessage) -> None:\n        ...\n"
  },
  {
    "path": "watcher/routes/__init__.py",
    "content": "from .watch import router as watch_router\n"
  },
  {
    "path": "watcher/routes/watch.py",
    "content": "import logging\n\nfrom fastapi import APIRouter, HTTPException\nfrom shared.domain.requests import PublicationStartedRequest, RequestProcessingStartedRequest, MessageSentRequest, RequestStatusChangedRequest\n\nfrom dependencies.services.watcher import get_watcher\nfrom services.exceptions import RepeatedRegistrationException\n\nrouter = APIRouter(\n    prefix='/watch',\n)\n\nlogger = logging.getLogger(__name__)\n\n@router.post('/message')\nasync def message(report: MessageSentRequest):\n    watcher = get_watcher()\n    try:\n        await watcher.register_message(report)\n    except RepeatedRegistrationException as e:\n        logger.error(e)\n        raise HTTPException(\n            status_code=400,\n            detail=str(e),\n        )\n\n@router.post('/request-status')\nasync def request_status(report: RequestStatusChangedRequest):\n    watcher = get_watcher()\n    try:\n        await watcher.register_request_status_change(report)\n    except Exception as e:\n        logger.error(e)\n        raise HTTPException(\n            status_code=400,\n            detail=str(e),\n        )\n"
  },
  {
    "path": "watcher/services/__init__.py",
    "content": ""
  },
  {
    "path": "watcher/services/publication.py",
    "content": "from dataclasses import dataclass\n\nfrom shared.abstractions.repositories import PostToPublishRepositoryInterface, SendPostRequestRepositoryInterface\nfrom shared.domain.dto import UpdatePostToPublishDTO\nfrom shared.domain.enums import SendPostRequestStatus, PublicationStatus\nfrom shared.domain.models import SendingRequest, SendPostRequest\n\nfrom abstractions.services.publication import PublicationServiceInterface\n\n\n@dataclass\nclass PublicationService(PublicationServiceInterface):\n    post_to_publish_repository: PostToPublishRepositoryInterface\n    posts_request_repository: SendPostRequestRepositoryInterface\n\n    async def register_finished_request(self, request: SendingRequest) -> None:\n        if not isinstance(request, SendPostRequest):\n            return\n\n        requests = await self.posts_request_repository.get_requests_from_same_publication(request.id)\n        statuses = {r.status for r in requests}\n\n        # Case 1: all sent -> POSTED (existing behavior)\n        if statuses and statuses.issubset({SendPostRequestStatus.SENT}):\n            await self.post_to_publish_repository.update(\n                obj_id=request.publication_id,\n                obj=UpdatePostToPublishDTO(status=PublicationStatus.POSTED),\n            )\n            return\n\n        # Case 2: all terminal (no PLANNED or IN_PROGRESS)\n        if not (SendPostRequestStatus.PLANNED in statuses or SendPostRequestStatus.IN_PROGRESS in statuses):\n            # If any were SENT and others failed/stale -> FAILED\n            if SendPostRequestStatus.SENT in statuses:\n                await self.post_to_publish_repository.update(\n                    obj_id=request.publication_id,\n                    obj=UpdatePostToPublishDTO(status=PublicationStatus.FAILED),\n                )\n                return\n\n            # If none SENT and all terminal non-sent -> STALE (e.g., all FAILED/STALE)\n            if statuses.issubset({SendPostRequestStatus.FAILED, SendPostRequestStatus.STALE}):\n                await self.post_to_publish_repository.update(\n                    obj_id=request.publication_id,\n                    obj=UpdatePostToPublishDTO(status=PublicationStatus.STALE),\n                )\n                return\n\n        # todo: stories\n"
  },
  {
    "path": "watcher/services/messages.py",
    "content": "from dataclasses import dataclass\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom shared.abstractions.repositories import SendPostRequestRepositoryInterface, PostToPublishRepositoryInterface\nfrom shared.abstractions.repositories.worker_message import WorkerMessageRepositoryInterface\nfrom shared.domain.enums import WorkerMessageType, WorkerMessageStatus\nfrom shared.domain.models import WorkerMessage\nfrom shared.domain.requests import MessageSentRequest\nfrom shared.infrastructure.sqlalchemy import NotFoundException\n\nfrom abstractions.services.messages import MessageServiceInterface\nfrom abstractions.services.requests import SendingRequestsServiceInterface\nfrom services.exceptions import MessageNotFoundException\n\n\n@dataclass\nclass MessageService(MessageServiceInterface):\n    worker_message_repository: WorkerMessageRepositoryInterface\n    post_requests_repository: SendPostRequestRepositoryInterface\n    posts_to_publish_repository: PostToPublishRepositoryInterface\n\n    requests_service: SendingRequestsServiceInterface\n\n    async def get_message(self, message_id: UUID) -> Optional[WorkerMessage]:\n        try:\n            message = await self.worker_message_repository.get(message_id)\n            return message\n        except NotFoundException:\n            return None\n\n    async def register_message(self, request: MessageSentRequest) -> None:\n        message = await self.worker_message_repository.get(request.message_id)\n        if not message:\n            raise MessageNotFoundException\n\n        await self.requests_service.register_sent_message(message)\n"
  },
  {
    "path": "watcher/services/exceptions.py",
    "content": "class RepeatedRegistrationException(Exception):\n    ...\n\nclass MessageNotFoundException(Exception):\n    ...\n"
  },
  {
    "path": "watcher/services/watcher.py",
    "content": "import logging\nfrom dataclasses import dataclass\nfrom enum import StrEnum\n\nfrom shared.abstractions.singleton import Singleton\nfrom shared.domain.enums import WorkerMessageStatus\nfrom shared.domain.requests import MessageSentRequest, RequestProcessingStartedRequest, PublicationStartedRequest, RequestStatusChangedRequest\n\nfrom abstractions.services.messages import MessageServiceInterface\nfrom abstractions.services.publication import PublicationServiceInterface\nfrom abstractions.services.requests import SendingRequestsServiceInterface\nfrom abstractions.services.watcher import WatcherInterface\nfrom services.exceptions import RepeatedRegistrationException\n\nlogger = logging.getLogger(__name__)\n\n\nclass ChildEntityStatus(StrEnum):\n    PENDING = 'pending'\n    COMPLETED = 'completed'\n    FAILED = 'failed'\n\n\n@dataclass\nclass Watcher(\n    WatcherInterface,\n    Singleton,\n):\n    publication_service: PublicationServiceInterface\n    requests_service: SendingRequestsServiceInterface\n    message_service: MessageServiceInterface\n\n    async def register_message(self, request: MessageSentRequest) -> None:\n        # if (await self.message_service.get_message(request.message_id)).status == WorkerMessageStatus.SENT:\n        #     logger.error(f'Message {request.message_id} already registered')\n        #     raise RepeatedRegistrationException(f\"Message {request.message_id} already registered.\")\n\n        await self.message_service.register_message(request)\n        logger.info(f'Message {request.message_id} registered')\n\n    async def register_request_status_change(self, request: RequestStatusChangedRequest) -> None:\n        # Re-evaluate the publication status when a child request transitions to a terminal status\n        sending_request = await self.requests_service.get_request(request.request_id, self._map_publication_type(request))\n        if sending_request:\n            await self.publication_service.register_finished_request(sending_request)\n\n    def _map_publication_type(self, request: RequestStatusChangedRequest):\n        # Request carries its type already but helper to keep signature explicit\n        return request.type\n"
  },
  {
    "path": "watcher/services/requests.py",
    "content": "import logging\nfrom dataclasses import dataclass\nfrom typing import Optional\n    # todo: stories\nfrom uuid import UUID\n\nfrom shared.abstractions.repositories import SendPostRequestRepositoryInterface\nfrom shared.abstractions.repositories.worker_message import WorkerMessageRepositoryInterface\nfrom shared.domain.dto import UpdateSendPostRequestDTO\nfrom shared.domain.enums import WorkerMessageStatus, SendPostRequestStatus, WorkerMessageType\nfrom shared.domain.models import WorkerMessage, SendingRequest\nfrom shared.domain.requests import PublicationType, RequestProcessingStartedRequest\n\nfrom abstractions.services.publication import PublicationServiceInterface\nfrom abstractions.services.requests import SendingRequestsServiceInterface\n\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass SendingRequestsService(SendingRequestsServiceInterface):\n    post_requests_repository: SendPostRequestRepositoryInterface\n    messages_repository: WorkerMessageRepositoryInterface\n\n    publication_service: PublicationServiceInterface\n\n    async def get_request(self, request_id: UUID, request_type: PublicationType) -> Optional[SendingRequest]:\n        if request_type == PublicationType.POST:\n            return await self.post_requests_repository.get(request_id)\n\n        ...\n\n    async def register_sent_message(self, message: WorkerMessage) -> None:\n        messages = await self.messages_repository.get_messages_from_same_request(message.id)\n        if all(map(lambda x: x.status == WorkerMessageStatus.SENT, messages)):\n            if message.type == WorkerMessageType.POST:\n                update_request_dto = UpdateSendPostRequestDTO(\n                    status=SendPostRequestStatus.SENT,\n                    sent_at=datetime.now(),\n                )\n\n                await self.post_requests_repository.update(\n                    obj_id=message.request_id,\n                    obj=update_request_dto,\n                )\n\n                request = await self.get_request(message.request_id, PublicationType.POST)\n\n                await self.publication_service.register_finished_request(request)\nfrom datetime import datetime\n"
  },
  {
    "path": "user_bot/handlers.py",
    "content": "import logging\nfrom datetime import datetime, timezone\n\nfrom telethon import TelegramClient\nfrom telethon import events\nfrom telethon.tl.functions.stories import SendStoryRequest\nfrom telethon.tl.types import InputPrivacyValueAllowAll\nfrom telethon.tl.types import User as TelegramUser\n\nfrom backend.dependencies.services.gpt import get_gpt_service\nfrom backend.dependencies.services.user import get_user_service\nfrom domain.dto.user import CreateUserDTO\nfrom infrastructure.enums.user_status import UserStatus\nfrom user_bot.settings import settings\n\nbot = TelegramClient(\n    session='ai_assistant_bot',\n    api_id=settings.account.api_id,\n    api_hash=settings.account.api_hash,\n)\n\nbot.start(\n    phone=settings.account.phone,\n)\n\nstory_states = {}\nstory_schedule_states = {}\n\nlogger = logging.getLogger(__name__)\n\n\n\nasync def get_sender(event: events.NewMessage.Event) -> TelegramUser:\n    return await bot.get_entity(event.chat_id)\n\n\n# Команда для немедленной публикации истории\n@bot.on(events.NewMessage(pattern='/post_story'))\nasync def cmd_post_story(event: events.NewMessage.Event):\n    sender = await get_sender(event)\n    if sender.username != 'firs_iln':\n        return\n\n    user_service = get_user_service()\n    user = await user_service.get_user_by_telegram_id(sender.id)\n    if not user:\n        await user_service.create_user(CreateUserDTO(\n            telegram_id=sender.id,\n            nickname=sender.username,\n        ))\n\n        user = await user_service.get_user_by_telegram_id(sender.id)\n\n    if user.status != UserStatus.MANAGER:\n        return await event.respond('🚫 Нет доступа.')\n\n    story_states[event.sender_id] = {}\n    await event.respond('📝 Введите текст истории:')\n\n\n# Команда для отложенной публикации истории\n@bot.on(events.NewMessage(pattern='/schedule_story'))\nasync def cmd_schedule_story(event: events.NewMessage.Event):\n    sender = await get_sender(event)\n    if sender.username != 'firs_iln':\n        return\n\n    user_service = get_user_service()\n    user = await user_service.get_user_by_telegram_id(event.chat_id)\n    if user.status != UserStatus.MANAGER:\n        return await event.respond('🚫 Нет доступа.')\n\n    story_schedule_states[event.sender_id] = {}\n    await event.respond('📝 Введите текст истории:')\n\n\n# Общий обработчик публикаций и регистрации\n@bot.on(events.NewMessage())\nasync def handle_messages(event):\n    sender = await get_sender(event)\n    if sender.username != 'firs_iln':\n        return\n\n    user_id = event.sender_id\n    # Немедленная публикация\n    if user_id in story_states:\n        state = story_states[user_id]\n        if 'text' not in state:\n            state['text'] = event.raw_text\n            return await event.respond('📷 Пришлите изображение или /skip:')\n        if event.raw_text.strip() == '/skip':\n            # await user_bot.send_message('@ampstats', state['text'])\n            await event.respond('✅ Опубликовано без изображения.')\n            del story_states[user_id]\n            return\n        if event.photo or event.document:\n            media = event.photo or event.document\n            if media:\n                # uploaded = await user_bot.upload_file(state['file'])\n                # file_id = uploaded\n\n                await bot(SendStoryRequest(\n                    peer='daria0028',\n                    media=media,\n                    privacy_rules=[InputPrivacyValueAllowAll()],\n                ))\n            # await user_bot.send_file('@ampstats', media, caption=state['text'])\n            await event.respond('✅ Опубликовано с изображением.')\n            del story_states[user_id]\n            return\n        return\n    # Отложенная публикация\n    if user_id in story_schedule_states:\n        state = story_schedule_states[user_id]\n        if 'text' not in state:\n            state['text'] = event.raw_text\n            return await event.respond('📷 Пришлите изображение или /skip:')\n        if 'file' not in state:\n            if event.raw_text.strip() == '/skip':\n                state['file'] = None\n            elif event.photo or event.document:\n                state['file'] = event.photo or event.document\n            else:\n                return await event.respond('❗ Отправьте изображение или /skip.')\n            return await event.respond('⏰ Введите дату и время (YYYY-MM-DD HH:MM, UTC):')\n        # Шаг даты и времени\n        try:\n            dt = datetime.strptime(event.raw_text.strip(), '%Y-%m-%d %H:%M')\n            dt = dt.replace(tzinfo=timezone.utc)\n        except ValueError:\n            return await event.respond('❗ Неверный формат. Повторите (YYYY-MM-DD HH:MM):')\n\n        # story_service = get_story_service()\n        # file_id = None\n        if state['file']:\n            uploaded = await bot.upload_file(state['file'])\n            # file_id = uploaded\n\n            await bot(SendStoryRequest(\n                peer='daria0028',\n                media=uploaded,\n                privacy_rules=[InputPrivacyValueAllowAll()],\n            ))\n        # await story_service.schedule_story(text=state['text'], file_id=file_id, publish_at=dt)\n        await event.respond(f'✅ История запланирована на {dt.isoformat()}')\n        del story_schedule_states[user_id]\n        return\n    return\n    # # Регистрация пользователя в базе\n    # user_service = get_user_service()\n    # await user_service.create_user(event.sender_id)\n\n\n\n@bot.on(events.NewMessage(incoming=True))\nasync def handle_client_reply(event: events.NewMessage.Event):\n    if not event.is_private:\n        return\n    gpt_service = get_gpt_service()\n    user_service = get_user_service()\n\n    sender_id = event.sender_id\n    text = event.raw_text\n\n    # 1) Если это команды менеджера — пропускаем (у вас уже есть логика выше)\n    if text.startswith('/') and sender_id in (story_states or {}) | (story_schedule_states or {}):\n        return\n\n    # 2) Если у нас нет истории по этому user_id — начинаем новый диалог\n    await gpt_service.start_gpt_conversation(sender_id)\n\n    # 3) Посылаем текст клиента в GPT, получаем ответ\n    reply = await gpt_service.get_gpt_response(\n        user_id=sender_id,\n        user_input=text,\n    )\n\n    # 4) Отправляем ответ обратно клиенту\n    await event.respond(reply)\n\n\n# # Inline-кнопки статуса сервисов\n# def build_service_buttons(services):\n#     buttons = []\n#     for svc in services:\n#         label = f\"✅ {svc.name}\" if svc.is_active else f\"❌ {svc.name}\"\n#         buttons.append(Button.inline(label, data=f\"toggle:{svc.name}\"))\n#     return [buttons[i:i + 2] for i in range(0, len(buttons), 2)]\n#\n#\n# # Команда: показать и переключить статус сервисов\n# @user_bot.on(events.NewMessage(pattern='/services_status'))\n# async def cmd_services_status(event):\n#     user_service = get_user_service()\n#     user = await user_service.get_user_by_telegram_id(event.sender.id)\n#     if user.status != UserStatus.MANAGER:\n#         return await event.respond('🚫 Нет доступа.')\n#\n#     analytics_service = get_analytics_service_service()\n#     services = await analytics_service.get_all_services()\n#     text = '🛠 Статус сервисов:'\n#     await event.respond(text, buttons=build_service_buttons(services))\n#\n#\n# # Обработка нажатия inline-кнопки для смены статуса\n# @user_bot.on(events.CallbackQuery)\n# async def callback_toggle(event):\n#     data = event.data.decode()\n#     user_service = get_user_service()\n#     user = await user_service.get_user_by_telegram_id(event.sender.id)\n#\n#     if not data.startswith('toggle:') or user.status != UserStatus.MANAGER:\n#         return\n#\n#     _, name = data.split(':', 1)\n#     analytics_service = get_analytics_service_service()\n#     services = await analytics_service.get_all_services()\n#     svc = next((s for s in services if s.name == name), None)\n#     if not svc:\n#         return await event.answer('Сервис не найден', alert=True)\n#\n#     new_status = not svc.is_active\n#     success = await analytics_service.update_service_active_status(svc.id, new_status)\n#     if success:\n#         updated = await analytics_service.get_all_services()\n#         await event.edit(buttons=build_service_buttons(updated))\n#         await event.answer(f\"Статус {name} \" + (\"включён\" if new_status else \"отключён\"))\n#     else:\n#         await event.answer('Ошибка при обновлении.', alert=True)\n\n#\n# @user_bot.on(events.NewMessage())\n# async def auto_register(event: events.NewMessage.Event):\n#     # \\\"\\\"\\\"\n#     # При любом сообщении создаём или обновляем клиента в БД,\n#     # заполняя telegram_id, nickname, а статус остаётся дефолтным.\n#     # \\\"\\\"\\\"\n#     user_service = get_user_service()\n#\n#     # Получаем полную информацию о пользователе\n#     sender = await event.get_sender()\n#     nickname = sender.username or ((sender.first_name or '') +\n#                                    (' ' + (sender.last_name or '') if sender.last_name else '')).strip()\n#\n#     user = await user_service.get_user_by_telegram_id(event.sender.id)\n#\n#     if user:\n#         return\n#     else:\n#         dto = CreateUserDTO(\n#             telegram_id=event.sender_id,\n#             nickname=nickname,\n#         )\n#\n#     await user_service.create_user(dto)\n"
  },
  {
    "path": "user_bot/__init__.py",
    "content": "from .handlers import bot\n"
  },
  {
    "path": "user_bot/settings.py",
    "content": "import os\nfrom pathlib import Path\nfrom typing import Type, Tuple, Optional\n\nfrom pydantic import SecretStr\nfrom pydantic_settings import (\n    BaseSettings,\n    SettingsConfigDict,\n    PydanticBaseSettingsSource,\n    JsonConfigSettingsSource,\n)\n\nENV = os.getenv(\"ENVIRONMENT\", \"local\")\n\n\nclass DBSettings(BaseSettings):\n    host: str\n    port: int\n    name: str\n    user: str\n    password: SecretStr\n\n    @property\n    def url(self):\n        return (\n            f\"postgresql+asyncpg://{self.user}:{self.password.get_secret_value()}@\"\n            f\"{self.host}:{self.port}/{self.name}\"\n        )\n\n\nclass AccountSettings(BaseSettings):\n    phone: str\n    api_id: int\n    api_hash: str\n    session_string: Optional[str] = None\n\n\nclass AssistantSettings(BaseSettings):\n    openai_api_key: str\n    assistant_id: str\n\n\nclass JwtSettings(BaseSettings):\n    secret_key: SecretStr\n    issuer: str\n    audience: str\n    access_expire: int\n    refresh_expire: int\n\n\nclass BotTokenSettings(BaseSettings):\n    token: str\n    username: str\n\n\nclass MailingSettings(BaseSettings):\n    a_days: str\n    b_days: str\n    c_days: str\n    a_hour: int\n    a_minute: int\n    b_hour: int\n    b_minute: int\n    c_hour: int\n    c_minute: int\n\n\n\nclass Settings(BaseSettings):\n    db: DBSettings\n    jwt: JwtSettings\n    account: AccountSettings\n    assistant: AssistantSettings\n    mailing: MailingSettings\n\n    debug: bool = True\n\n    model_config = SettingsConfigDict(\n        extra=\"ignore\",\n        json_file=Path(__file__).parent / \"settings.json\",\n        json_file_encoding=\"utf-8\",\n    )\n\n    @classmethod\n    def settings_customise_sources(\n            cls,\n            settings_cls: Type[BaseSettings],\n            init_settings: PydanticBaseSettingsSource,\n            env_settings: PydanticBaseSettingsSource,\n            dotenv_settings: PydanticBaseSettingsSource,\n            file_secret_settings: PydanticBaseSettingsSource,\n    ) -> Tuple[PydanticBaseSettingsSource, ...]:\n        return (\n            JsonConfigSettingsSource(settings_cls),  # Fallback to JSON\n        )\n\n\nsettings = Settings()\n"
  },
  {
    "path": "admin/__init__.py",
    "content": ""
  },
  {
    "path": "admin/frontend/index.html",
    "content": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Vite + React + TS</title>\n  </head>\n  <body class=\"bg-brandlight\">\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.tsx\"></script>\n  </body>\n</html>\n"
  },
  {
    "path": "admin/frontend/Dockerfile",
    "content": "FROM node:18-alpine AS builder\n\nWORKDIR /app\n\nCOPY package.json .\nCOPY package-lock.json .\n\nRUN npm ci\n\nCOPY . .\n\nRUN npx vite build --mode production\n\nFROM nginx:stable-alpine\n\nRUN rm -rf /usr/share/nginx/html/\\*\n# Set the TZ environment variable\nENV TZ=Europe/Moscow\n\n# Install tzdata, configure the timezone, then remove tzdata if you don't need it at runtime\nRUN apk add --no-cache tzdata \\\n && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n && echo $TZ > /etc/timezone \\\n && apk del tzdata\n\nCOPY --from=builder /app/dist /usr/share/nginx/html\n\nEXPOSE 80\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n"
  },
  {
    "path": "admin/frontend/tsconfig.tsbuildinfo",
    "content": "{\"root\":[\"./src/app.tsx\",\"./src/main.tsx\",\"./src/telegram.d.ts\",\"./src/vite-env.d.ts\",\"./src/components/backbuttonmanager.ts\",\"./src/components/fileuploader.tsx\",\"./src/contexts/auth.tsx\",\"./src/hooks/backbutton.ts\",\"./src/pages/accountscontrolpage.tsx\",\"./src/pages/assistantcontrolpage.tsx\",\"./src/pages/homepage.tsx\",\"./src/pages/postdetailspage.tsx\",\"./src/pages/postscontrolpage.tsx\",\"./src/pages/storiescontrolpage.tsx\",\"./src/pages/storydetailspage.tsx\",\"./src/services/api.tsx\",\"./src/services/apiclient.ts\",\"./src/types/meresponse.ts\"],\"errors\":true,\"version\":\"5.8.3\"}"
  },
  {
    "path": "admin/frontend/README.md",
    "content": "# React + TypeScript + Vite\n\nThis template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.\n\nCurrently, two official plugins are available:\n\n- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh\n- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh\n\n## Expanding the ESLint configuration\n\nIf you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:\n\n```js\nexport default tseslint.config({\n  extends: [\n    // Remove ...tseslint.configs.recommended and replace with this\n    ...tseslint.configs.recommendedTypeChecked,\n    // Alternatively, use this for stricter rules\n    ...tseslint.configs.strictTypeChecked,\n    // Optionally, add this for stylistic rules\n    ...tseslint.configs.stylisticTypeChecked,\n  ],\n  languageOptions: {\n    // other options...\n    parserOptions: {\n      project: ['./tsconfig.node.json', './tsconfig.app.json'],\n      tsconfigRootDir: import.meta.dirname,\n    },\n  },\n})\n```\n\nYou can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:\n\n```js\n// eslint.config.js\nimport reactX from 'eslint-plugin-react-x'\nimport reactDom from 'eslint-plugin-react-dom'\n\nexport default tseslint.config({\n  plugins: {\n    // Add the react-x and react-dom plugins\n    'react-x': reactX,\n    'react-dom': reactDom,\n  },\n  rules: {\n    // other rules...\n    // Enable its recommended typescript rules\n    ...reactX.configs['recommended-typescript'].rules,\n    ...reactDom.configs.recommended.rules,\n  },\n})\n```\n"
  },
  {
    "path": "admin/frontend/tailwind.config.cjs",
    "content": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./index.html\",\n    \"./src/**/*.{js,ts,jsx,tsx,mdx}\"\n  ],\n  theme: {\n    // Никаких ручных colors — все «brand»-цвета мы задаём в CSS через @theme\n    extend: {}\n  },\n  plugins: []\n}\n"
  },
  {
    "path": "admin/frontend/.gitignore",
    "content": "node_modules"
  },
  {
    "path": "admin/frontend/.env",
    "content": "VITE_API_BASE=https://3db7d867d2db.ngrok-free.app/api"
  },
  {
    "path": "admin/frontend/eslint.config.js",
    "content": "import js from '@eslint/js'\nimport globals from 'globals'\nimport reactHooks from 'eslint-plugin-react-hooks'\nimport reactRefresh from 'eslint-plugin-react-refresh'\nimport tseslint from 'typescript-eslint'\n\nexport default tseslint.config(\n  { ignores: ['dist'] },\n  {\n    extends: [js.configs.recommended, ...tseslint.configs.recommended],\n    files: ['**/*.{ts,tsx}'],\n    languageOptions: {\n      ecmaVersion: 2024,\n      globals: globals.browser,\n    },\n    plugins: {\n      'react-hooks': reactHooks,\n      'react-refresh': reactRefresh,\n    },\n    rules: {\n      ...reactHooks.configs.recommended.rules,\n      'react-refresh/only-export-components': [\n        'warn',\n        { allowConstantExport: true },\n      ],\n    },\n  },\n)\n"
  },
  {
    "path": "admin/frontend/nginx.conf",
    "content": "events {\n    worker_connections 1024;\n}\n\nhttp {\n    # ← ОБЯЗАТЕЛЬНО подключаем MIME-типы\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    server {\n        listen 80;\n        server_name _;\n\n        root /usr/share/nginx/html;\n        index index.html;\n\n        location / {\n            try_files $uri /index.html;\n        }\n    }\n}\n"
  },
  {
    "path": "admin/frontend/vite.config.ts",
    "content": "import {defineConfig} from 'vite'\nimport react from '@vitejs/plugin-react'\nimport tailwindcss from \"@tailwindcss/vite\";\n\n// https://vite.dev/config/\nexport default defineConfig({\n    base: '/',\n    plugins: [\n      react(),\n    tailwindcss(),\n  ],\n    server: {\n        host: '0.0.0.0',\n        port: 3000,\n        allowedHosts: ['71821dd11d0b.ngrok-free.app'],\n    },\n})\n"
  },
  {
    "path": "admin/frontend/public/vite.svg",
    "content": "<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" aria-hidden=\"true\" role=\"img\" class=\"iconify iconify--logos\" width=\"31.88\" height=\"32\" preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 256 257\"><defs><linearGradient id=\"IconifyId1813088fe1fbc01fb466\" x1=\"-.828%\" x2=\"57.636%\" y1=\"7.652%\" y2=\"78.411%\"><stop offset=\"0%\" stop-color=\"#41D1FF\"></stop><stop offset=\"100%\" stop-color=\"#BD34FE\"></stop></linearGradient><linearGradient id=\"IconifyId1813088fe1fbc01fb467\" x1=\"43.376%\" x2=\"50.316%\" y1=\"2.242%\" y2=\"89.03%\"><stop offset=\"0%\" stop-color=\"#FFEA83\"></stop><stop offset=\"8.333%\" stop-color=\"#FFDD35\"></stop><stop offset=\"100%\" stop-color=\"#FFA800\"></stop></linearGradient></defs><path fill=\"url(#IconifyId1813088fe1fbc01fb466)\" d=\"M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z\"></path><path fill=\"url(#IconifyId1813088fe1fbc01fb467)\" d=\"M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z\"></path></svg>"
  },
  {
    "path": "admin/frontend/src/App.tsx",
    "content": "import {BrowserRouter, Route, Routes} from 'react-router-dom'\nimport HomePage from './pages/HomePage.tsx'\nimport StoriesControl from './pages/StoriesControlPage.tsx'\nimport PostsControl from './pages/PostsControlPage.tsx'\nimport PostDetailsPage from \"./pages/PostDetailsPage\";\nimport StoryDetailsPage from \"./pages/StoryDetailsPage\";\nimport AccountsControlPage from \"./pages/AccountsControlPage\";\n// import AssistantControl from './pages/AssistantControlPage.tsx'\nimport eruda from 'eruda';\nimport {AuthProvider} from './contexts/auth.tsx';\nimport BackButtonManager from \"./components/BackButtonManager\";\nimport {useEffect, useState} from \"react\";\nimport {type Emoji, listEmojis} from \"./services/api\";\nimport {expandViewport, init, mountViewport} from '@telegram-apps/sdk';\nimport PostTemplatesPage from \"./pages/PostTemplatesPage\";\nimport ChatTypesControlPage from \"./pages/ChatTypesControlPage\";\n\n\nexport default function App() {\n    eruda.init();\n    const [emojis, setEmojis] = useState<Emoji[]>([])\n\n    useEffect(() => {\n        listEmojis()\n            .then(setEmojis);\n\n        init();\n        console.log(\"telegram initialized\")\n\n        if (mountViewport.isAvailable()) {\n            mountViewport()\n                .then(() => {\n                    if (expandViewport.isAvailable()) {\n                        expandViewport();\n                    }\n                })\n                .catch(console.error);\n        }\n    }, [])\n\n    return (\n        <AuthProvider>\n            <BrowserRouter>\n                <BackButtonManager/>\n                <Routes>\n                    <Route path=\"/\" element={<HomePage/>}/>\n                    <Route path=\"/stories\" element={<StoriesControl/>}/>\n                    <Route path=\"/story-details\" element={<StoryDetailsPage/>}/>\n                    <Route path=\"/posts\" element={<PostsControl emojis={emojis}/>}/>\n                    <Route path=\"/post-details/:postToPublishId\" element={<PostDetailsPage emojis={emojis}/>}/>\n                    <Route path=\"/accounts\" element={<AccountsControlPage/>}/>\n                    <Route path=\"/posts/templates\" element={<PostTemplatesPage />} />\n                    <Route path=\"/chats\" element={<ChatTypesControlPage />} />\n                    {/*<Route path=\"/assistant\" element={<AssistantControl />} />*/}\n                </Routes>\n            </BrowserRouter>\n        </AuthProvider>\n    )\n}\n"
  },
  {
    "path": "admin/frontend/src/main.tsx",
    "content": "import {StrictMode} from 'react'\nimport {createRoot} from 'react-dom/client'\nimport './index.css'\nimport App from './App.tsx'\nimport {AuthGate} from './contexts/AuthGate.tsx'\nimport {AuthProvider} from \"./contexts/auth\";\n\ncreateRoot(document.getElementById('root')!).render(\n    <StrictMode>\n         <AuthProvider>\n      <AuthGate>\n          <App />\n      </AuthGate>\n    </AuthProvider>\n    </StrictMode>,\n)\n"
  },
  {
    "path": "admin/frontend/src/App.css",
    "content": "/*#root {*/\n/*  max-width: 1280px;*/\n/*  margin: 0 auto;*/\n/*  padding: 2rem;*/\n/*  text-align: center;*/\n/*}*/\n\n/*.logo {*/\n/*  height: 6em;*/\n/*  padding: 1.5em;*/\n/*  will-change: filter;*/\n/*  transition: filter 300ms;*/\n/*}*/\n/*.logo:hover {*/\n/*  filter: drop-shadow(0 0 2em #646cffaa);*/\n/*}*/\n/*.logo.react:hover {*/\n/*  filter: drop-shadow(0 0 2em #61dafbaa);*/\n/*}*/\n\n/*@keyframes logo-spin {*/\n/*  from {*/\n/*    transform: rotate(0deg);*/\n/*  }*/\n/*  to {*/\n/*    transform: rotate(360deg);*/\n/*  }*/\n/*}*/\n\n/*@media (prefers-reduced-motion: no-preference) {*/\n/*  a:nth-of-type(2) .logo {*/\n/*    animation: logo-spin infinite 20s linear;*/\n/*  }*/\n/*}*/\n\n/*.card {*/\n/*  padding: 2em;*/\n/*}*/\n\n/*.read-the-docs {*/\n/*  color: #888;*/\n/*}*/\n"
  },
  {
    "path": "admin/frontend/src/index.css",
    "content": "/* 1) Сначала «родные» стили DatePicker */\n@import 'react-datepicker/dist/react-datepicker.css';\n\n/* 2) Затем – Tailwind v4 (preflight + utilities) */\n@import \"tailwindcss\";\n\n/* 3) Ваши CSS-переменные (brand-цвета) */\n@theme {\n  --color-brand:        #4B3935;\n  --color-brand-pink:   #ffecdd;\n  --color-brandlight:   #CBDFEA;\n  --color-brand2:       #53161D;\n  --color-brandlight2:  #FFFBF0;\n  --color-white:        #f9fcff;\n  --color-white2:       #e3e4da;\n}\n\n@layer components {\n  /* 1) Контур попапа и граница между календарём и временем */\n  .datepicker-popper {\n    border: 1px solid var(--color-brand2) !important;\n  }\n  .datepicker-popper .react-datepicker__time-container {\n    border-left: 1px solid var(--color-brand2) !important;\n  }\n\n  /* 2) Шапка месяца */\n  .datepicker-popper .react-datepicker__header {\n    background: var(--color-gray-100) !important;      /* бледно-серый фон */\n    border-bottom: 1px solid var(--color-brand2) !important;\n  }\n  .datepicker-popper .react-datepicker__current-month {\n    color: var(--color-brand2) !important;             /* бордовый текст */\n  }\n  /* стрелочки навигации */\n  .datepicker-popper .react-datepicker__navigation-icon::before {\n    border-color: var(--color-brand2) !important;\n  }\n\n  /* 3) Подписи дней недели */\n  .datepicker-popper .react-datepicker__day-name {\n    color: var(--color-brand2) !important;\n    border-bottom: 1px solid var(--color-brand2) !important;\n  }\n\n  /* 4) Ячейки дат */\n  .datepicker-popper .react-datepicker__day {\n    color: var(--color-brand2) !important;             /* бордовый текст */\n    border: 1px solid var(--color-brand2) !important;  /* тонкая бордовая рамка */\n    background: transparent !important;\n  }\n  .datepicker-popper .react-datepicker__day:hover {\n    background-color: rgba(83,22,29,0.15) !important;\n  }\n  .datepicker-popper .react-datepicker__day--today {\n    border-width: 2px !important;\n  }\n\n  /* 5) Выбранная дата */\n  .datepicker-popper .react-datepicker__day--selected,\n  .datepicker-popper .react-datepicker__day--keyboard-selected {\n    background-color: var(--color-brand2) !important;\n    color: var(--color-white) !important;\n  }\n\n  /* 6) Колонка времени */\n  .datepicker-popper .react-datepicker__time {\n    background: var(--color-gray-100) !important;\n  }\n  .datepicker-popper .react-datepicker__time-list {\n    border-top: 1px solid var(--color-brand2) !important;\n  }\n  .datepicker-popper .react-datepicker__time-list-item {\n    color: var(--color-brand2) !important;\n    border-bottom: 1px solid var(--color-brand2) !important;\n  }\n  .datepicker-popper .react-datepicker__time-list-item--selected {\n    background-color: var(--color-brand2) !important;\n    color: var(--color-white) !important;\n  }\n\n  /* 7) Убираем штатный треугольник */\n  .datepicker-popper .react-datepicker__triangle,\n  .datepicker-popper .react-datepicker__triangle::before {\n    display: none !important;\n  }\n    .datepicker-popper .react-datepicker__current-month {\n    color: var(--color-brand2) !important;\n  }\n\n  /* 2) Заголовок колонки времени («Time») */\n  .datepicker-popper .react-datepicker__header--time,\n  .datepicker-popper .react-datepicker__time-container .react-datepicker__header {\n    /* бледно-серый фон, чтобы не контрастировал с рамкой */\n    background-color: var(--color-gray-100) !important;\n    /* бордовая нижняя линия */\n    border-bottom: 1px solid var(--color-brand2) !important;\n    /* бордовый текст */\n    color: var(--color-brand2) !important;\n  }\n\n  /* 3) Стрелочки и границы тоже бордовые */\n  .datepicker-popper .react-datepicker__navigation-icon::before {\n    border-color: var(--color-brand2) !important;\n  }\n  .datepicker-popper .react-datepicker__time-container {\n    border-left: 1px solid var(--color-brand2) !important;\n  }\n\n  .rich-editor {\n  white-space: pre-wrap;   /* сохраняем \\n как переносы */\n  word-break: break-word;  /* переносим длинные слова */\n}\n\n  .rich-editor a {\n  color: #2563eb;             /* синий */\n  text-decoration: underline; /* подчёркивание */\n  cursor: text;               /* не «рука», а текстовый курсор */\n}\n\n/* опционально небольшой индикатор */\n.rich-editor a::after {\n  content: \"↗\";\n  font-size: 0.8em;\n  opacity: 0.5;\n  margin-left: 2px;\n}\n\n\n}\n"
  },
  {
    "path": "admin/frontend/src/telegram.d.ts",
    "content": "import {TelegramGameProxy} from \"@telegram-apps/sdk\";\nimport {EmojiEntity} from \"./components/RichEditor\";\n\ndeclare global {\n    interface Window {\n        Telegram: {\n            WebApp: {\n                initData?: string;\n                initDataUnsafe?: {\n                    query_id?: string;\n                    user?: {\n                        id: number;\n                        first_name?: string;\n                        last_name?: string;\n                        username?: string;\n                        photo_url?: string;\n                        language_code?: string;\n                    };\n                    auth_date?: number;\n                    hash?: string;\n                };\n                expand: () => void;\n                close: () => void;\n                onEvent: (event_type: str, event_handler: (data: {\n                    text: string\n                    entities: EmojiEntity[]\n                }) => void) => () => never;\n            };\n        };\n        TelegramGameProxy: TelegramGameProxy,\n    }\n}\n\nexport {};\n"
  },
  {
    "path": "admin/frontend/src/vite-env.d.ts",
    "content": "/// <reference types=\"vite/client\" />\n"
  },
  {
    "path": "admin/frontend/src/types/MeResponse.ts",
    "content": "import type {UserRole} from \"./UserRole\";\n\nexport interface MeResponse {\n    id: string;\n    telegram_id?: number;\n    telegram_username?: string;\n    role: UserRole;\n    is_banned: boolean;\n    created_at: string;\n    updated_at: string;\n}\n"
  },
  {
    "path": "admin/frontend/src/types/UserRole.ts",
    "content": "// чистый список ролей, ДОСТУПНЫЙ в рантайме для <select>, кнопок и т.п.\nexport const USER_ROLES = ['manager', 'admin', 'publications_manager', 'banned'] as const;\n\n// тип, соответствующий любому элементу нашего массива\nexport type UserRole = typeof USER_ROLES[number];\n"
  },
  {
    "path": "admin/frontend/src/contexts/auth.tsx",
    "content": "// src/contexts/auth.tsx\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport { apiClient } from '../services/apiClient';\nimport { getMe } from '../services/api';\nimport { initData } from '@telegram-apps/sdk';\nimport type { UserRole } from '../types/UserRole';\n\ninterface AuthContextType {\n  userId: string | null;\n  role: UserRole | null;\n  isBanned: boolean;\n  loading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [userId, setUserId] = useState<string | null>(null);\n  const [role, setRole] = useState<UserRole | null>(null);\n  const [isBanned, setIsBanned] = useState<boolean>(false);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const authenticateUser = async () => {\n      initData.restore();\n      const data = initData.raw();\n      if (!data) {\n        setLoading(false);\n        return;\n      }\n      try {\n        const { data: auth } = await apiClient.post('/auth/telegram', { initData: data });\n        localStorage.setItem('authToken', auth.access_token);\n        localStorage.setItem('refreshToken', auth.refresh_token);\n        apiClient.defaults.headers.common.Authorization = `Bearer ${auth.access_token}`;\n\n        const me = await getMe();\n        setUserId(me.id);\n        setRole(me.role);\n        // Обратите внимание: поле из API должно точно совпадать.\n        // Часто оно называется is_banned, но в JS удобнее — isBanned.\n        setIsBanned(!!me.is_banned);\n      } catch (err) {\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    authenticateUser();\n  }, []);\n  console.log('AuthContext:', { userId, role, isBanned, loading });\n\n  return (\n    <AuthContext.Provider value={{ userId, role, isBanned, loading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const ctx = useContext(AuthContext);\n  if (!ctx) throw new Error('useAuth must be used within AuthProvider');\n  return ctx;\n};\n"
  },
  {
    "path": "admin/frontend/src/contexts/AuthGate.tsx",
    "content": "import React from 'react';\nimport { useAuth } from './auth';\n\nexport const AuthGate: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { loading } = useAuth();\n\n  if (loading) return <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n        <div className=\"h-10 w-10 rounded-full border-4 border-gray-300 border-t-gray-600 always-spin\" />\n      </div>;    // пока токен получаем — просто крутим лоадер\n  return <>{children}</>;\n};\n"
  },
  {
    "path": "admin/frontend/src/utils/normalizeHtml.ts",
    "content": "export function normalizeLineBreaksToDivBr(html: string): string {\n  try {\n    const wrapper = document.createElement('div');\n    wrapper.innerHTML = html;\n\n    const BLOCK_TAGS = new Set([\n      'DIV','P','SECTION','ARTICLE','UL','OL','LI','H1','H2','H3','H4','H5','H6','TABLE','THEAD','TBODY','TFOOT','TR','TD','TH','BLOCKQUOTE','PRE'\n    ]);\n\n    const isBlock = (el: Element | null) => !!el && BLOCK_TAGS.has(el.tagName);\n\n    const isVisuallyEmpty = (el: HTMLElement) => {\n      try {\n        // считаем пустыми: только пробелы/&nbsp;/брейки/пустые инлайны\n        const clone = el.cloneNode(true) as HTMLElement;\n        // убираем все инлайны-обёртки без текста\n        clone.querySelectorAll('b,i,span,strong,em,a,small,u,s,mark,code').forEach(n => {\n          if (n.textContent?.trim() === '' && n.querySelectorAll('img, svg, video, audio').length === 0) {\n            n.remove();\n          }\n        });\n        const txt = clone.innerHTML\n          .replace(/\\u00A0/g, ' ')\n          .replace(/<br\\s*\\/?>/gi, '\\n')\n          .replace(/[\\s\\n]+/g, '');\n        return txt.length === 0;\n      } catch (error) {\n        console.warn('Error in isVisuallyEmpty:', error);\n        return false;\n      }\n    };\n\n    // 1) P → DIV (и пустые P → <div><br></div>)\n    const paragraphs = Array.from(wrapper.querySelectorAll('p'));\n    paragraphs.forEach((p) => {\n      try {\n        const hasOnlyBr =\n          p.childNodes.length === 1 &&\n          p.firstChild?.nodeName.toLowerCase() === 'br';\n\n        if (hasOnlyBr || isVisuallyEmpty(p as HTMLElement)) {\n          const div = document.createElement('div');\n          div.appendChild(document.createElement('br'));\n          p.replaceWith(div);\n          return;\n        }\n\n        const div = document.createElement('div');\n        while (p.firstChild) div.appendChild(p.firstChild);\n        p.replaceWith(div);\n      } catch (error) {\n        console.warn('Error processing paragraph:', error);\n      }\n    });\n\n    // 2) Каждый <br> → отдельный <div><br></div>, вставляя у ближайшего блочного предка\n    const allBr = Array.from(wrapper.querySelectorAll('br'));\n    allBr.forEach((br) => {\n      try {\n        // уже корректный случай: <div><br></div>\n        const parent = br.parentElement;\n        if (\n          parent &&\n          parent.tagName === 'DIV' &&\n          parent.childNodes.length === 1 &&\n          parent.firstChild === br\n        ) {\n          return;\n        }\n\n        // найдём ближайшего блочного предка и позицию вставки\n        let blockAncestor: HTMLElement | null = parent as HTMLElement | null;\n        let anchor: Node = br; // куда относительно этого узла будем вставлять\n        while (blockAncestor && !isBlock(blockAncestor)) {\n          anchor = blockAncestor; // поднимаем «якорь»\n          blockAncestor = blockAncestor.parentElement as HTMLElement | null;\n        }\n        if (!blockAncestor) {\n          // на всякий случай — если вдруг нет блочного предка, вставим в корень\n          blockAncestor = wrapper;\n          anchor = br;\n        }\n\n        // соберём подряд идущие <br> (пачку)\n        const brsInARow: HTMLBRElement[] = [br];\n        let next = br.nextSibling;\n        while (next && next.nodeName.toLowerCase() === 'br') {\n          brsInARow.push(next as HTMLBRElement);\n          next = next.nextSibling;\n        }\n\n        // на позицию ANCHOR передвинем пачку как набор блоков\n        brsInARow.forEach((oneBr) => {\n          try {\n            const div = document.createElement('div');\n            div.appendChild(document.createElement('br'));\n            blockAncestor!.insertBefore(div, anchor);\n            oneBr.remove();\n          } catch (error) {\n            console.warn('Error processing br element:', error);\n          }\n        });\n\n        // если исходный parent стал пустым инлайном — очистим\n        if (parent && !isBlock(parent) && isVisuallyEmpty(parent)) {\n          try {\n            parent.remove();\n          } catch (error) {\n            console.warn('Error removing empty parent:', error);\n          }\n        }\n      } catch (error) {\n        console.warn('Error processing br:', error);\n      }\n    });\n\n    // 3) Удалить пустые контейнеры, кроме ровно <div><br></div>\n    const allElements = Array.from(wrapper.querySelectorAll('*'));\n    allElements.forEach((el) => {\n      try {\n        if (!(el instanceof HTMLElement)) return;\n\n        if (el.tagName === 'DIV') {\n          const okDiv =\n            el.childNodes.length === 1 &&\n            el.firstChild?.nodeName.toLowerCase() === 'br';\n          if (okDiv) return;\n        }\n        // пустые инлайны/блоки — убрать\n        if (isVisuallyEmpty(el)) {\n          el.remove();\n        }\n      } catch (error) {\n        console.warn('Error processing element:', error);\n      }\n    });\n\n    // 4) Нормализовать &nbsp; в текстовых узлах\n    const allElementsForText = Array.from(wrapper.querySelectorAll('*'));\n    allElementsForText.forEach((el) => {\n      try {\n        el.childNodes.forEach((n) => {\n          if (n.nodeType === Node.TEXT_NODE) {\n            n.nodeValue = (n.nodeValue || '').replace(/\\u00A0/g, ' ');\n          }\n        });\n      } catch (error) {\n        console.warn('Error processing text nodes:', error);\n      }\n    });\n\n    return wrapper.innerHTML;\n  } catch (error) {\n    console.error('Error in normalizeLineBreaksToDivBr:', error);\n    // Возвращаем исходный HTML в случае ошибки\n    return html;\n  }\n}\n"
  },
  {
    "path": "admin/frontend/src/components/EmojiPicker.tsx",
    "content": "import React from 'react'\nimport type {Emoji} from '../services/api'\nimport {nanoid} from 'nanoid'\n\ninterface EmojiPickerProps {\n    /** Список эмодзи из БД */\n    emojis: Emoji[]\n    /** Вызывается при выборе одного эмодзи */\n    onSelect: (emoji: Emoji) => void\n}\n\n/**\n * EmojiPicker — все эмодзи простым src,\n * с новым key={nanoid()} на каждый рендер.\n */\nexport const EmojiPicker: React.FC<EmojiPickerProps> = (\n    {\n        emojis,\n        onSelect,\n    }) => {\n    return (\n        <div\n            className=\"\n        bg-white border shadow-lg p-2\n        grid grid-cols-6 gap-2\n        top-full left-0 z-10\n      \"\n        >\n            {emojis.map((emoji) => {\n                const isVideo = emoji.format === 'video' || emoji.img_url.toLowerCase().endsWith('.webm');\n\n                return (\n                    <button\n                        key={nanoid()}                     // ← новый ключ при каждом рендере\n                        type=\"button\"\n                        onClick={() => onSelect(emoji)}\n                        className=\"p-1 hover:bg-gray-100 rounded\"\n                    >\n                        {isVideo ? (\n                            <video\n                                src={emoji.img_url}\n                                loop\n                                muted\n                                playsInline\n                                className=\"w-8 h-8\"\n                                onError={e => (e.currentTarget.style.display = 'none')}\n                            />\n                        ) : (\n                            <img\n                                src={emoji.img_url}\n                                className=\"w-8 h-8\"\n                                onError={e => (e.currentTarget.style.display = 'none')}\n                            />\n                        )}\n\n\n                    </button>\n                )\n            })}\n        </div>\n    )\n}\n"
  },
  {
    "path": "admin/frontend/src/components/RichEditor.tsx",
    "content": "import { forwardRef, useEffect, useImperativeHandle, useRef, useState} from 'react';\nimport type {Emoji, MessageEntityDTO} from '../services/api';\n\n/* ───────── константы ───────── */\nconst RHINO = '🦏';          // плейсхолдер\nconst RHINO_LEN = 2;         // 1 юникод-символ = 2 UTF-16 code units\n// очередь ID для восстановления эмодзи\nconst idsRef = {current: [] as string[]};\n\n/* ───────── наружу отдаём только insertEmoji ───────── */\nexport type RichEditorHandle = {\n    insertEmoji: (emoji: Emoji) => void;\n};\n\nexport interface RichEditorProps {\n    emojis: Emoji[];\n    initialContent?: string;\n    onChange: (payload: {\n        html: string;\n        text: string;\n        entities: MessageEntityDTO[];\n    }) => void;\n}\n\nexport const RichEditor = forwardRef<RichEditorHandle, RichEditorProps>(\n    ({emojis, initialContent = '', onChange}, ref) => {\n\n        const editorRef = useRef<HTMLDivElement>(null);\n        const [isUrlModalOpen, setIsUrlModalOpen] = useState(false);\n        const [pendingUrl, setPendingUrl] = useState('');\n        const savedRangeRef = useRef<Range | null>(null);\n\n        // 1) HTML -> plain text без эмбедов/кастом-эмодзи (Unicode-эмодзи остаются)\n        function htmlToPlainStrict(html: string): string {\n            const tmp = document.createElement('div');\n            tmp.innerHTML = html;\n\n            // 1) выбрасываем потенциальные кастом-эмодзи/эмбеды\n            tmp.querySelectorAll(`\n    img,\n    video,\n    tg-emoji,\n    picture, source, canvas, iframe, object, embed, svg\n  `).forEach(n => n.remove());\n\n            // 2) берём видимый текст\n            return (tmp as HTMLElement).innerText.replace(/\\u00A0/g, ' ');\n        }\n\n        // 2) Нормализация текста: сохраняем абзацы, вычищаем «квадраты»\n        function normalizePastedText(raw: string): string {\n            return raw\n                .replace(/\\u00A0/g, ' ')\n                .replace(/\\r\\n?/g, '\\n')\n                .replace(/[ \\t]+\\n/g, '\\n')\n                // eslint-disable-next-line no-misleading-character-class\n                .replace(/[\\uFFFC\\uFFFD\\uFE0E\\uFE0F]/g, '') // Object/Replacement + variation selectors\n                .replace(/[\\uE000-\\uF8FF]/g, '')\n                .replace(/^\\n+|\\n+$/g, '')\n                .replace(/\\n{5,}/g, '\\n\\n\\n\\n')\n                .replace(/<([a-z][\\w-]*)\\b[^>]*>🦏<\\/\\1>/gi, ' ');\n        }\n\n        // 3) Вставка только текста (никаких execCommand; создаём Text + <br>)\n        const insertPlainTextAtSelection = (text: string) => {\n            const sel = window.getSelection();\n            if (!sel || sel.rangeCount === 0) return;\n\n            const range = sel.getRangeAt(0);\n            range.deleteContents();\n\n            const frag = document.createDocumentFragment();\n            const lines = text.split('\\n'); // уже нормализовано\n            lines.forEach((line, i) => {\n                frag.appendChild(document.createTextNode(line));\n                if (i < lines.length - 1) frag.appendChild(document.createElement('br'));\n            });\n\n            range.insertNode(frag);                               // MDN: Range.insertNode\n            sel.removeAllRanges();\n            const end = document.createRange();\n            end.selectNodeContents(editorRef.current as HTMLDivElement);\n            end.collapse(false);\n            sel.addRange(end);\n            editorRef.current?.dispatchEvent(new Event('input'));\n        };\n\n        useEffect(() => {\n            const el = editorRef.current;\n            if (!el) return;\n\n            const handlePlainInsert = (text?: string, html?: string) => {\n                // ВСЕГДА предпочитаем HTML, потому что умеем вырезать кастом-эмодзи из него\n                const raw = html && html.length ? htmlToPlainStrict(html) : (text || '');\n                const clean = normalizePastedText(raw);\n                if (clean) insertPlainTextAtSelection(clean);\n            };\n\n            const onDragOver = (e: DragEvent) => {\n                e.preventDefault();\n            };\n\n            // beforeinput (раньше нативной вставки, работает и для contenteditable)\n            const onBeforeInput = (e: InputEvent & { dataTransfer?: DataTransfer | null }) => {\n                const t = e.inputType; // MDN: InputEvent.inputType\n                if (t === 'insertFromPaste' || t === 'insertFromPasteAsQuotation' || t === 'insertFromDrop') {\n                    if (e.cancelable) e.preventDefault();\n                    e.stopPropagation();\n                    const dt = e.dataTransfer ?? null; // MDN: InputEvent.dataTransfer\n                    const text = dt?.getData('text/plain') ?? '';\n                    const html = dt?.getData('text/html') ?? '';\n                    handlePlainInsert(text, html);\n                }\n            };\n\n            // Классический paste (ClipboardEvent.clipboardData)\n            const onPaste = (e: ClipboardEvent) => {\n                const cd = e.clipboardData;\n                if (cd && (cd.files?.length ?? 0) > 0) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    return; // не вставляем файлы/картинки\n                }\n                e.preventDefault();\n                e.stopPropagation();\n                const text = cd?.getData('text/plain') || '';\n                const html = cd?.getData('text/html') || '';\n                handlePlainInsert(text, html);\n            };\n\n            const onDrop = (e: DragEvent) => {\n                // если тянут файл/картинку — блокируем\n                if (e.dataTransfer && [...(e.dataTransfer.items || [])].some(i => i.kind === 'file')) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    return;\n                }\n                e.preventDefault();\n                e.stopPropagation();\n                // ставим каретку и вставляем только текст:\n                const anyDoc = document;\n                const rng: Range | null =\n                    (anyDoc.caretRangeFromPoint && anyDoc.caretRangeFromPoint(e.clientX, e.clientY)) || null;\n                if (rng) {\n                    const sel = window.getSelection();\n                    sel?.removeAllRanges();\n                    sel?.addRange(rng);\n                }\n                const dt = e.dataTransfer;\n                const text = dt?.getData('text/plain') || '';\n                const html = dt?.getData('text/html') || '';\n                handlePlainInsert(text, html);\n            };\n\n            // Документ-уровневый запасной перехват (если кто-то мешает на элементе)\n            const onDocPasteCapture = (e: ClipboardEvent) => {\n                const active = document.activeElement;\n                if (!active || !el.contains(active)) return;\n                e.preventDefault();\n                e.stopPropagation();\n                const cd = e.clipboardData;\n                const text = cd?.getData('text/plain') || '';\n                const html = cd?.getData('text/html') || '';\n                handlePlainInsert(text, html);\n            };\n\n            el.addEventListener('dragover', onDragOver, {capture: true});\n            el.addEventListener('beforeinput', onBeforeInput, {capture: true}); // MDN/W3C: beforeinput\n            el.addEventListener('paste', onPaste, {capture: true});             // MDN: ClipboardEvent.clipboardData\n            el.addEventListener('drop', onDrop, {capture: true});\n\n            document.addEventListener('paste', onDocPasteCapture, {capture: true});\n\n            return () => {\n                el.removeEventListener('dragover', onDragOver, {capture: true});\n                el.removeEventListener('beforeinput', onBeforeInput, {capture: true});\n                el.removeEventListener('paste', onPaste, {capture: true});\n                el.removeEventListener('drop', onDrop, {capture: true});\n                document.removeEventListener('paste', onDocPasteCapture, {capture: true});\n            };\n        }, []);\n\n        const saveCurrentRange = () => {\n            const sel = window.getSelection();\n            if (!sel || sel.rangeCount === 0) return;\n            if (!editorRef.current?.contains(sel.anchorNode)) return;\n            savedRangeRef.current = sel.getRangeAt(0).cloneRange();\n        };\n\n        const restoreRange = () => {\n            const r = savedRangeRef.current;\n            if (!r) return false;\n            const sel = window.getSelection();\n            if (!sel) return false;\n            sel.removeAllRanges();\n            sel.addRange(r);\n            return true;\n        };\n\n        const openUrlModal = () => {\n            saveCurrentRange();         // <- сохраняем выделение\n            setPendingUrl('');\n            setIsUrlModalOpen(true);\n        };\n\n        const handleInsertUrl = () => {\n            if (!pendingUrl.trim()) {\n                setIsUrlModalOpen(false);\n                return;\n            }\n            if (!restoreRange()) {\n                setIsUrlModalOpen(false);\n                return;\n            }  // <- возвращаем выделение в редактор\n            let href = pendingUrl.trim();\n            if (!/^https?:\\/\\//i.test(href)) href = 'https://' + href;  // легкая нормализация\n            wrapSelection('a', {href, target: '_blank', rel: 'noopener noreferrer'});\n            setIsUrlModalOpen(false);\n        };\n\n        const closeUrlModal = () => setIsUrlModalOpen(false);\n\n        // очередь ID для восстановления эмодзи\n        function wrapSelection(tagName: string, attrs: Record<string, string> = {}) {\n            const sel = window.getSelection();\n            if (!sel || sel.rangeCount === 0) return;\n\n            const range = sel.getRangeAt(0);\n            const editor = editorRef.current;\n            if (!editor) return;\n\n            // Если работаем с ссылкой — сначала проверим, внутри ли мы уже <a>\n            if (tagName.toLowerCase() === 'a') {\n                const node = range.commonAncestorContainer;\n                const el = (node.nodeType === Node.ELEMENT_NODE\n                    ? (node as Element)\n                    : (node.parentElement as Element | null));\n                const existingA = el?.closest('a');\n\n                if (existingA && editor.contains(existingA)) {\n                    // просто обновляем href/атрибуты у существующей ссылки\n                    for (const [k, v] of Object.entries(attrs)) existingA.setAttribute(k, v);\n                    editor.dispatchEvent(new Event('input'));\n                    return;\n                }\n            }\n\n            if (range.collapsed) return;\n\n            editor.focus();\n\n            // создаём новый wrapper и переносим выделение внутрь\n            const wrapper = document.createElement(tagName);\n            for (const [k, v] of Object.entries(attrs)) wrapper.setAttribute(k, v);\n            const fragment = range.extractContents();\n\n            // На всякий случай убираем вложенные <a> внутри фрагмента (если были)\n            if (tagName.toLowerCase() === 'a') {\n                fragment.querySelectorAll?.('a')?.forEach(a => {\n                    const parent = a.parentNode!;\n                    while (a.firstChild) parent.insertBefore(a.firstChild, a);\n                    parent.removeChild(a);\n                });\n            }\n\n            wrapper.appendChild(fragment);\n            range.insertNode(wrapper);\n\n            // ставим курсор после wrapper\n            const newSel = window.getSelection();\n            if (newSel) {\n                const r2 = document.createRange();\n                r2.setStartAfter(wrapper);\n                r2.collapse(true);\n                newSel.removeAllRanges();\n                newSel.addRange(r2);\n            }\n\n            editor.dispatchEvent(new Event('input'));\n        }\n\n        // возвращает URL эмодзи по его custom_emoji_id\n        const getUrlById = (id: string): string => {\n            const found = emojis.find(e => e.custom_emoji_id === id);\n            return found ? found.img_url : '';\n        };\n\n        /* ставим начальный HTML один раз */\n        useEffect(() => {\n            if (editorRef.current) editorRef.current.innerHTML = initialContent;\n            // сразу пробрасываем initialContent наружу\n            if (editorRef.current) handleInput();\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, []);\n\n        const serialize = (el: HTMLDivElement, options: { mutateDom?: boolean } = {}) => {\n            const { mutateDom = false } = options;\n            const clone = el.cloneNode(true) as HTMLDivElement;\n\n            // 0) склеиваем соседние текстовые узлы\n            clone.normalize();\n\n            // 0.1) ← ДОБАВЬ: все не-DIV корневые узлы группируем в DIV-блоки\n            (function ensureDivBlocks(root: HTMLElement) {\n                const nodes = Array.from(root.childNodes);\n                const frag = document.createDocumentFragment();\n                let cur: HTMLDivElement | null = null;\n\n                for (const n of nodes) {\n                    if (n.nodeType === Node.ELEMENT_NODE && (n as HTMLElement).tagName === 'DIV') {\n                        cur = null;\n                        frag.appendChild(n);             // готовый блок остаётся как есть\n                    } else {\n                        if (!cur) {                      // начинаем новый искусственный блок\n                            cur = document.createElement('div');\n                            frag.appendChild(cur);\n                        }\n                        cur.appendChild(n);              // переносим IMG/VIDEO/BR/текст внутрь блока\n                    }\n                }\n                root.innerHTML = '';\n                root.appendChild(frag);\n            })(clone);\n\n            // Перерисовка DOM может сбивать каретку — делаем её опциональной\n            if (mutateDom) {\n                el.innerHTML = clone.innerHTML;\n            }\n\n            idsRef.current.length = 0;\n\n            const html = mutateDom ? el.innerHTML : clone.innerHTML;\n            const entities: MessageEntityDTO[] = [];\n            let text = '';\n            let offset = 0;\n\n            const USING_FORMDATA = true;\n            const NL = USING_FORMDATA ? '\\r\\n' : '\\n';\n            const NL_LEN = NL.length;\n\n            function blankBreaksCount(div: HTMLElement): number {\n                if (div.tagName !== 'DIV' || div.parentElement !== clone) return 0;\n                const hasText = (div.textContent ?? '').replace(/\\u00A0/g, ' ').trim().length > 0;\n                if (hasText) return 0;\n                if (div.querySelector('img[data-custom-emoji-id],video[data-custom-emoji-id]')) return 0;\n                return div.querySelectorAll('br').length; // ← считаем количество <br>\n              }              \n\n            // ← ТВОЙ emitInline, но с одним нюансом: игнорим whitespace-only\n            function emitInline(node: Node) {\n                if (node.nodeType === Node.TEXT_NODE) {\n                    const raw = (node as Text).data.replace(/\\u00A0/g, ' ');\n                    if (/\\S/.test(raw)) {             // ← добавили фильтр: только если есть непробельные символы\n                        text += raw;\n                        offset += raw.length;\n                    }\n                    return;\n                }\n\n                if (node.nodeType === Node.ELEMENT_NODE) {\n                    const eln = node as HTMLElement;\n\n                    if ((eln.tagName === 'IMG' || eln.tagName === 'VIDEO') && eln.hasAttribute('data-custom-emoji-id')) {\n                        const id = eln.getAttribute('data-custom-emoji-id')!;\n                        idsRef.current.push(id);\n                        text += RHINO;\n                        entities.push({\n                            type: 'custom_emoji',\n                            offset,\n                            length: RHINO_LEN,\n                            custom_emoji_id: id,\n                        } as MessageEntityDTO);\n                        offset += RHINO_LEN;\n                        return;\n                    }\n\n                    if (eln.tagName === 'BR') {\n                        text += NL;\n                        offset += NL_LEN;\n                        return;\n                    }\n\n                    let type: MessageEntityDTO['type'] | null = null;\n                    if (eln.tagName === 'B') type = 'bold';\n                    else if (eln.tagName === 'I') type = 'italic';\n                    else if (eln.tagName === 'U') type = 'underline';\n                    else if (eln.tagName === 'S') type = 'strikethrough';\n                    else if (eln.tagName === 'A') type = 'text_link';\n                    else if (eln.tagName === 'BLOCKQUOTE') type = 'blockquote';\n\n                    const start = offset;\n                    eln.childNodes.forEach((child) => emitInline(child));\n                    const len = offset - start;\n\n                    if (type && len > 0) {\n                        const slice = text.slice(start, start + len);\n                        const cleanLen = slice.replace(/\\r?\\n+$/g, '').length;\n                        if (cleanLen > 0) {\n                            const ent: MessageEntityDTO = {type, offset: start, length: cleanLen};\n                            if (type === 'text_link') ent.url = eln.getAttribute('href') || undefined;\n                            entities.push(ent);\n                        }\n                    }\n                }\n            }\n\n            // 2) теперь корень гарантированно состоит из DIV-блоков → твоя логика переносов не меняется\n            const blocks = Array.from(clone.children) as HTMLElement[];\nfor (let i = 0; i < blocks.length; i++) {\n  const div = blocks[i];\n\n  const brCount = blankBreaksCount(div);     // ← счётчик пустых строк внутри блока\n  if (brCount > 0) {\n    // Добавляем столько переносов, сколько <br> внутри DIV.\n    // Если хочешь ограничить, например максимумом 3, сделай:\n    // const n = Math.min(brCount, 3);\n    const n = brCount;\n\n    if (i < blocks.length - 1) {\n      for (let k = 0; k < n; k++) {\n        text += NL;\n        offset += NL_LEN;\n      }\n    }\n    continue;\n  }\n\n  const before = offset;\n  emitInline(div);\n\n  // Перенос между непустыми блоками — только если блок не закончился на <br>\n  if (i < blocks.length - 1 && offset > before && !text.endsWith(NL)) {\n    text += NL;\n    offset += NL_LEN;\n  }\n}\n\n\n            entities.sort((a, b) => a.offset - b.offset);\n            const cleanEntities = entities.map((e) => {\n                const base: MessageEntityDTO = {type: e.type, offset: e.offset, length: e.length};\n                if (e.type === 'text_link' && e.url) base.url = e.url;\n                if (e.type === 'custom_emoji' && e.custom_emoji_id) base.custom_emoji_id = e.custom_emoji_id;\n                return base;\n            });\n\n            return {html, text, entities: cleanEntities};\n        };\n\n\n        function restoreRhinos(root: HTMLElement) {\n            const walker = document.createTreeWalker(root, NodeFilter.SHOW_TEXT, null);\n            const textNodes: Text[] = [];\n\n            while (walker.nextNode()) {\n                const node = walker.currentNode as Text;\n                if (node.nodeValue?.includes(RHINO)) textNodes.push(node);\n            }\n\n            textNodes.forEach(textNode => {\n                const parts = textNode.nodeValue!.split(RHINO);\n                const frag = document.createDocumentFragment();\n\n                parts.forEach((part, idx) => {\n                    frag.appendChild(document.createTextNode(part));\n                    if (idx < parts.length - 1) {\n                        const emojiId = idsRef.current.shift()!;\n                        if (emojiId) {\n                            const img = document.createElement('img');\n                            img.setAttribute('data-custom-emoji-id', emojiId);\n                            img.src = getUrlById(emojiId);  // ваша функция получения URL по id\n                            img.width = img.height = 24;\n                            img.style.display = 'inline-block';\n                            img.style.verticalAlign = 'middle';\n                            frag.appendChild(img);\n                        }\n                    }\n                });\n\n                textNode.parentNode!.replaceChild(frag, textNode);\n            });\n        }\n\n        /* ---------- единый обработчик input ---------- */\n        const handleInput = () => {\n            const el = editorRef.current;\n            if (!el) return;\n\n            // сериализуем без мутации DOM, чтобы не терять каретку\n            const result = serialize(el, { mutateDom: false });\n\n            // тут же восстанавливаем все 🦏 → <img>\n            restoreRhinos(el);\n\n            // отдаём готовые html/text/entities\n            onChange(result);\n        };\n\n        useEffect(() => {\n            const el = editorRef.current;\n            if (!el) return;\n            el.addEventListener('input', handleInput);\n            return () => el.removeEventListener('input', handleInput);\n        }, []);\n\n        /* ---------- логика вставки эмодзи ---------- */\n        const insertEmoji = (emoji: Emoji) => {\n            const el = editorRef.current;\n            if (!el) return;\n\n            let sel = window.getSelection();\n            const inEditor =\n                sel && sel.rangeCount > 0 && el.contains(sel.getRangeAt(0).startContainer);\n\n            if (!inEditor) {\n                el.focus();\n                const r = document.createRange();\n                r.selectNodeContents(el);\n                r.collapse(false);\n                sel?.removeAllRanges();\n                sel?.addRange(r);\n            }\n\n            sel = window.getSelection();\n            if (!sel || !sel.rangeCount) return;\n\n            const range = sel.getRangeAt(0);\n            range.deleteContents();\n\n            const isVideo =\n                emoji.format === 'video' ||\n                emoji.img_url.toLowerCase().endsWith('.webm');\n\n            const node: HTMLElement = isVideo\n                ? (() => {\n                    const v = document.createElement('video');\n                    v.src = emoji.img_url;\n                    v.loop = true;\n                    v.muted = true;\n                    v.autoplay = true;\n                    v.playsInline = true;\n                    v.width = v.height = 24;\n                    return v;\n                })()\n                : (() => {\n                    const i = document.createElement('img');\n                    i.src = emoji.img_url;\n                    i.alt = emoji.name;\n                    i.width = i.height = 24;\n                    return i;\n                })();\n\n            node.setAttribute('data-custom-emoji-id', emoji.custom_emoji_id);\n            node.style.display = 'inline-block';\n            node.style.verticalAlign = 'middle';\n\n            range.insertNode(node);\n            range.setStartAfter(node);\n            sel.removeAllRanges();\n            sel.addRange(range);\n\n            /* триггерим input, чтобы сериализовать новый контент */\n            el.dispatchEvent(new Event('input'));\n        };\n\n        /* отдаём наружу только insertEmoji */\n        useImperativeHandle(ref, () => ({insertEmoji}), [insertEmoji]);\n\n        return (\n            <div className=\"relative\">\n                {/* ——— Панель кнопок форматирования ——— */}\n                <div className=\"flex items-center mb-2 space-x-1\">\n                    <button\n                        type=\"button\"\n                        onClick={() => wrapSelection('b')}\n                        className=\"px-2 py-1 border rounded\"\n                    ><b>Ж</b></button>\n\n                    <button\n                        type=\"button\"\n                        onClick={() => wrapSelection('i')}\n                        className=\"px-2 py-1 border rounded\"\n                    ><i>К</i></button>\n\n                    <button\n                        type=\"button\"\n                        onClick={() => wrapSelection('u')}\n                        className=\"px-2 py-1 border rounded\"\n                    ><u>П</u></button>\n\n                    <button\n                        type=\"button\"\n                        onClick={() => wrapSelection('s')}\n                        className=\"px-2 py-1 border rounded\"\n                    ><s>З</s></button>\n\n                    <button\n                        type=\"button\"\n                        onMouseDown={(e) => {\n                            e.preventDefault();\n                            openUrlModal();\n                        }}\n                        className=\"px-2 py-1 border rounded\"\n                    >\n                        🔗\n                    </button>\n\n                    {/* ← новая кнопка для цитаты */}\n                    <button\n                        type=\"button\"\n                        onClick={() => wrapSelection('blockquote')}\n                        className=\"px-2 py-1 border rounded\"\n                        title=\"Цитата\"\n                    >\n                        ❝❞\n                    </button>\n                </div>\n\n                <div\n                    ref={editorRef}\n                    contentEditable\n                    suppressContentEditableWarning\n                    className=\"rich-editor border p-2 rounded min-h-[150px] focus:outline-none\"\n                />\n\n                {isUrlModalOpen && (\n                    <div className=\"fixed inset-0 bg-black/30 flex items-center justify-center z-50\">\n                        <div className=\"bg-white rounded-lg shadow-lg p-6 w-full max-w-md relative\">\n                            <button\n                                onClick={closeUrlModal}\n                                className=\"absolute top-2 right-2 text-gray-500 hover:text-gray-700\"\n                            >\n                                ✕\n                            </button>\n                            <h2 className=\"text-xl font-semibold mb-4\">Вставить ссылку</h2>\n                            <input\n                                type=\"url\"\n                                placeholder=\"https://example.com\"\n                                value={pendingUrl}\n                                onChange={e => setPendingUrl(e.target.value)}\n                                className=\"w-full mb-4 p-2 border rounded focus:ring-2 focus:ring-brand\"\n                                autoFocus\n                            />\n                            <button\n                                onClick={handleInsertUrl}\n                                className=\"w-full py-2 bg-brand text-white rounded hover:bg-brand transition\"\n                            >\n                                Вставить\n                            </button>\n                        </div>\n                    </div>\n                )}\n            </div>\n        );\n    },\n);\nRichEditor.displayName = 'RichEditor';\n"
  },
  {
    "path": "admin/frontend/src/components/EmojiSuggestionList.tsx",
    "content": "import React, { useEffect, useRef } from 'react'\n\ninterface EmojiAttrs {\n    id: string\n    label: string\n    src: string\n    custom_emoji_id: string\n    format?: 'static' | 'video'\n}\n\ninterface Props {\n  items: EmojiAttrs[]\n  command: (it: EmojiAttrs) => void\n}\n\nexport const EmojiSuggestionList: React.FC<Props> = ({ items, command }) => {\n  // реф, чтобы на каждый рендер форсить reload видео\n  const vidsRef = useRef<HTMLVideoElement[]>([])\n\n  useEffect(() => {\n    vidsRef.current.forEach(v => {\n      v.load()\n      v.play().catch(() => {})\n    })\n  }, [items])\n\n  return (\n    <div\n      // всё через inline-стили\n      style={{\n        position: 'absolute',\n        display: 'grid',\n        gridTemplateColumns: 'repeat(auto-fill, 32px)',\n        gridAutoRows: '32px',\n        gap: '4px',\n        padding: '4px',\n        maxHeight: '200px',\n        overflowY: 'auto',\n        background: 'white',\n        border: '1px solid rgba(0,0,0,0.1)',\n        borderRadius: '4px',\n        zIndex: 10,\n      }}\n    >\n      {items.map((it, idx) => (\n        <div\n          key={it.id}\n          // фиксированные 32×32\n          style={{\n            width: '32px',\n            height: '32px',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            cursor: 'pointer',\n          }}\n          // onMouseDown, чтобы не потерять фокус редактора\n          onMouseDown={e => {\n            e.preventDefault()\n            command(it)\n          }}\n        >\n          {(it.format === 'video' || it.src.toLowerCase().endsWith('.webm')) ? (\n            <video\n              // <-- bust cache\n              src={`${it.src}?t=${Date.now()}`}\n              width={24}\n              height={24}\n              preload=\"metadata\"\n              autoPlay\n              loop\n              muted\n              playsInline\n              ref={el => {\n                if (el) vidsRef.current[idx] = el\n              }}\n              style={{ display: 'inline-block', verticalAlign: 'middle' }}\n            />\n          ) : (\n            <img\n              src={`${it.src}?t=${Date.now()}`}\n              width={24}\n              height={24}\n              loading=\"eager\"\n              style={{ display: 'inline-block', verticalAlign: 'middle' }}\n              alt={it.label}\n            />\n          )}\n        </div>\n      ))}\n    </div>\n  )\n}\n"
  },
  {
    "path": "admin/frontend/src/components/BackButtonManager.ts",
    "content": "import useBackButtonVisibility from \"../hooks/backButton\";\n\nfunction BackButtonManager() {\n    useBackButtonVisibility();\n    return null;\n}\n\nexport default BackButtonManager;\n"
  },
  {
    "path": "admin/frontend/src/components/FileUploader.tsx",
    "content": "import type {ChangeEvent} from \"react\";\n\ninterface FileUploaderProps {\n    label: string;\n    file: File | null;\n    preview: string | null;\n    onFileChange: (file: File | null) => void;\n}\n\nconst FileUploader: React.FC<FileUploaderProps> = ({\n                                                       label,\n                                                       preview,\n                                                       onFileChange\n                                                   }) => (\n    <div className=\"flex flex-col gap-2 items-start px-4\">\n        <p className=\"uppercase text-xs text-gray-500\">{label}</p>\n        <label className=\"bg-brandlight text-brand border border-brand py-2 px-4 rounded cursor-pointer hover:shadow-lg transition-shadow duration-200 text-sm inline-flex flex-col items-center gap-2\">\n            {preview ? (\n                <>\n                    <img\n                        src={preview}\n                        alt=\"preview\"\n                        className=\"w-32 h-32 object-cover mb-1\"\n                    />\n                    <div className=\"flex items-center text-green-600 text-sm\">\n                        <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            className=\"w-4 h-4 mr-1\"\n                            viewBox=\"0 0 20 20\"\n                            fill=\"currentColor\"\n                        >\n                            <path\n                                fillRule=\"evenodd\"\n                                d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-10.707a1 1 0 10-1.414-1.414L9 9.586 7.707 8.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\"\n                                clipRule=\"evenodd\"\n                            />\n                        </svg>\n                        Файл загружен\n                    </div>\n                </>\n            ) : (\n                <div className=\"flex items-center gap-2\">\n                    <img\n                        src=\"/icons/paperclip.png\"\n                        alt=\"paperclip\"\n                        className=\"h-4 w-4\"\n                    />\n                    <span>Выбрать файл</span>\n                </div>\n            )}\n            <input\n                type=\"file\"\n                accept=\"image/*\"\n                className=\"hidden\"\n                onChange={(e: ChangeEvent<HTMLInputElement>) =>\n                    onFileChange(e.target.files?.[0] || null)\n                }\n            />\n        </label>\n    </div>\n);\n\nexport default FileUploader;\n"
  },
  {
    "path": "admin/frontend/src/hooks/backButton.ts",
    "content": "import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { postEvent } from '@telegram-apps/sdk';\n\nfunction useBackButtonVisibility() {\n     const location = useLocation();\n\n     useEffect(() => {\n         // Set is_visible to false for the home page ('/') and true otherwise.\n         const isVisible = location.pathname !== \"/\";\n         postEvent('web_app_setup_back_button', { is_visible: isVisible });\n     }, [location.pathname]);\n}\n\nexport default useBackButtonVisibility;\n"
  },
  {
    "path": "admin/frontend/src/assets/react.svg",
    "content": "<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" aria-hidden=\"true\" role=\"img\" class=\"iconify iconify--logos\" width=\"35.93\" height=\"32\" preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 256 228\"><path fill=\"#00D8FF\" d=\"M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z\"></path></svg>"
  },
  {
    "path": "admin/frontend/src/pages/StoriesControlPage.tsx",
    "content": "import {useState, useMemo, useEffect} from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { FiChevronDown, FiChevronUp } from 'react-icons/fi';\nimport {on} from '@telegram-apps/sdk';\nimport FileUploader from \"../components/FileUploader.tsx\";\n\nexport default function StoriesControlPage() {\n    const navigate = useNavigate();\n    const [activeTab, setActiveTab] = useState<'schedule' | 'create'>('schedule');\n\n    const [photoFile, setPhotoFile] = useState<File | null>(null);\n    const [photoPreview, setPhotoPreview] = useState<string | null>(null);\n    const [title, setTitle] = useState('');\n    const [text, setText] = useState('');\n    const [scheduleType, setScheduleType] = useState<'once' | 'daily'>('once');\n    const [date, setDate] = useState('');\n    const [time, setTime] = useState('');\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => navigate(-1));\n        return () => removeBackListener();\n    }, [navigate]);\n\n    const initialAccounts = useMemo(\n        () => Array.from({ length: 20 }, (_, i) => `Manager ${i + 1}`),\n        []\n    );\n    const [allAccounts] = useState<string[]>(initialAccounts);\n    const [selectedAccounts, setSelectedAccounts] = useState<string[]>([]);\n    const [accountSearch, setAccountSearch] = useState('');\n    const filteredAccounts = useMemo(\n        () => allAccounts.filter(acc =>\n            acc.toLowerCase().includes(accountSearch.trim().toLowerCase())\n        ),\n        [accountSearch, allAccounts]\n    );\n\n    const [openDays, setOpenDays] = useState<Record<string, boolean>>({});\n    const toggleDay = (day: string) => {\n        setOpenDays(prev => ({ ...prev, [day]: !prev[day] }));\n    };\n\n    const toggleAccount = (acc: string) => {\n        setSelectedAccounts(prev =>\n            prev.includes(acc) ? prev.filter(a => a !== acc) : [...prev, acc]\n        );\n    };\n\n    // Для формы создания\n    const handlePhotoChange = (file: File | null) => {\n        setPhotoFile(file);\n        setPhotoPreview(file ? URL.createObjectURL(file) : null);\n    };\n    const handleSave = () => {\n        const payload = {\n            photoFile,\n            title,\n            text,\n            scheduleType,\n            date: scheduleType === 'once' ? date : null,\n            time,\n            managers: selectedAccounts,\n        };\n        console.log('Saving story:', payload);\n        // Очистка\n        setPhotoFile(null);\n        setPhotoPreview(null);\n        setTitle('');\n        setText('');\n        setDate('');\n        setTime('');\n        setScheduleType('once');\n        setSelectedAccounts([]);\n        setAccountSearch('');\n    };\n\n    // Для расписания (жестко)\n    const days = ['17 мая 2025', '18 мая 2025', '19 мая 2025'];\n    const events: [string, string][] = [\n        ['08:00', 'Утреннее вдохновение'],\n        ['12:00', 'Полдник с цитатой'],\n        ['18:00', 'Вечерняя история'],\n    ];\n    const handleDelete = (day: string, t: string, ttl: string) => {\n        alert(`${day} ${t} — \"${ttl}\" удалено`);\n    };\n\n    return (\n        <div className=\"container mx-auto p-4 bg-brandlight min-h-screen\">\n            {/* Tabs */}\n            <div className=\"flex space-x-8 mb-6\">\n                <button\n                    className={`transition pb-1 ${\n                        activeTab === 'schedule'\n                            ? 'text-2xl font-semibold text-brand border-b-2 border-brand'\n                            : 'text-xl text-gray-600'\n                    }`}\n                    onClick={() => setActiveTab('schedule')}\n                >\n                    Расписание историй\n                </button>\n                <button\n                    className={`transition pb-1 ${\n                        activeTab === 'create'\n                            ? 'text-2xl font-semibold text-brand border-b-2 border-brand'\n                            : 'text-xl text-gray-600'\n                    }`}\n                    onClick={() => setActiveTab('create')}\n                >\n                    Создать историю\n                </button>\n            </div>\n\n            {activeTab === 'create' && (\n                <div className=\"space-y-6 max-w-lg\">\n                    <FileUploader\n                        label=\"Фото истории\"\n                        file={photoFile}\n                        preview={photoPreview}\n                        onFileChange={handlePhotoChange}\n                    />\n\n                    <div>\n                        <label className=\"block mb-2 font-medium\">Название истории</label>\n                        <input\n                            type=\"text\"\n                            value={title}\n                            onChange={e => setTitle(e.target.value)}\n                            className=\"w-full border border-brand rounded p-2 focus:outline-none focus:ring-2 focus:ring-brand\"\n                        />\n                    </div>\n\n                    <div>\n                        <label className=\"block mb-2 font-medium\">Текст под историей</label>\n                        <textarea\n                            value={text}\n                            onChange={e => setText(e.target.value)}\n                            rows={3}\n                            className=\"w-full border border-brand rounded p-2 focus:outline-none focus:ring-2 focus:ring-brand\"\n                        />\n                    </div>\n\n                    <div>\n                        <label className=\"block mb-2 font-medium\">Тип рассылки</label>\n                        <div className=\"flex space-x-4\">\n                            <label className=\"flex items-center space-x-2\">\n                                <input\n                                    type=\"radio\"\n                                    value=\"once\"\n                                    checked={scheduleType === 'once'}\n                                    onChange={() => setScheduleType('once')}\n                                    className=\"form-radio h-4 w-4 text-brand\"\n                                />\n                                <span>В указанный день</span>\n                            </label>\n                            <label className=\"flex items-center space-x-2\">\n                                <input\n                                    type=\"radio\"\n                                    value=\"daily\"\n                                    checked={scheduleType === 'daily'}\n                                    onChange={() => setScheduleType('daily')}\n                                    className=\"form-radio h-4 w-4 text-brand\"\n                                />\n                                <span>Каждый день</span>\n                            </label>\n                        </div>\n                    </div>\n\n                    {scheduleType === 'once' && (\n                        <div className=\"flex space-x-4\">\n                            <div className=\"flex-1\">\n                                <label className=\"block mb-2 font-medium\">Дата</label>\n                                <input\n                                    type=\"date\"\n                                    value={date}\n                                    onChange={e => setDate(e.target.value)}\n                                    className=\"w-full border border-brand rounded p-2 focus:outline-none focus:ring-2 focus:ring-brand\"\n                                />\n                            </div>\n                            <div className=\"flex-1\">\n                                <label className=\"block mb-2 font-medium\">Время</label>\n                                <input\n                                    type=\"time\"\n                                    value={time}\n                                    onChange={e => setTime(e.target.value)}\n                                    className=\"w-full border border-brand rounded p-2 focus:outline-none focus:ring-2 focus:ring-brand\"\n                                />\n                            </div>\n                        </div>\n                    )}\n                    {scheduleType === 'daily' && (\n                        <div>\n                            <label className=\"block mb-2 font-medium\">Время</label>\n                            <input\n                                type=\"time\"\n                                value={time}\n                                onChange={e => setTime(e.target.value)}\n                                className=\"w-full border border-brand rounded p-2 focus:outline-none focus:ring-2 focus:ring-brand\"\n                            />\n                        </div>\n                    )}\n\n                    {/* Выбор аккаунтов менеджеров */}\n                    <div>\n                        <label className=\"block mb-2 font-medium\">Аккаунты менеджеров</label>\n                        <input\n                            type=\"text\"\n                            placeholder=\"Поиск аккаунтов...\"\n                            value={accountSearch}\n                            onChange={e => setAccountSearch(e.target.value)}\n                            className=\"w-full mb-2 border border-brand rounded p-2 focus:outline-none focus:ring-2 focus:ring-brand\"\n                        />\n                        <div className=\"max-h-60 overflow-y-auto space-y-2 border border-brand rounded p-2\">\n                            {filteredAccounts.map(acc => (\n                                <label key={acc} className=\"flex items-center space-x-2\">\n                                    <input\n                                        type=\"checkbox\"\n                                        checked={selectedAccounts.includes(acc)}\n                                        onChange={() => toggleAccount(acc)}\n                                        className=\"form-checkbox h-5 w-5 text-brand focus:ring-brand\"\n                                    />\n                                    <span>{acc}</span>\n                                </label>\n                            ))}\n                            {filteredAccounts.length === 0 && (\n                                <div className=\"text-gray-500 italic\">Аккаунты не найдены</div>\n                            )}\n                        </div>\n                    </div>\n\n                    <button\n                        onClick={handleSave}\n                        className=\"w-full py-3 bg-brand text-white rounded-lg shadow hover:bg-brand2 transition\"\n                    >\n                        Сохранить\n                    </button>\n                </div>\n            )}\n\n            {activeTab === 'schedule' && (\n                <div className=\"space-y-6 text-brand\">\n                    {days.map(day => (\n                        <div key={day} className=\"bg-brand-pink p-4 rounded-lg shadow\">\n                            <div\n                                className=\"flex justify-between items-center cursor-pointer\"\n                                onClick={() => toggleDay(day)}\n                            >\n                                <h2 className=\"text-xl font-semibold\">{day}</h2>\n                                {openDays[day] ? (\n                                    <FiChevronUp className=\"h-5 w-5 text-brand\" />\n                                ) : (\n                                    <FiChevronDown className=\"h-5 w-5 text-brand\" />\n                                )}\n                            </div>\n\n                            {openDays[day] && (\n                                <ul className=\"mt-4 space-y-2\">\n                                    {events.map(([t, ttl]) => (\n                                        <li\n                                            key={t}\n                                            className=\"flex items-center justify-between cursor-pointer hover:bg-gray-100 p-2 rounded\"\n                                            onClick={() => navigate(`/story-details`)}\n                                        >\n                      <span>\n                        <span className=\"font-medium\">{t}</span> — {ttl}\n                      </span>\n                                            <img\n                                                src=\"/icons/trash.png\"\n                                                alt=\"Удалить\"\n                                                className=\"h-5 w-5 cursor-pointer opacity-60 hover:opacity-100 transition\"\n                                                onClick={e => { e.stopPropagation(); handleDelete(day, time, title); }}\n\n                                            />\n                                        </li>\n                                    ))}\n                                </ul>\n                            )}\n                        </div>\n                    ))}\n                </div>\n            )}\n\n        </div>\n    );\n}\n"
  },
  {
    "path": "admin/frontend/src/pages/PostTemplatesPage.tsx",
    "content": "import { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {getTemplates, updatePost} from '../services/api';\nimport type { Post } from '../services/api';\nimport {on} from \"@telegram-apps/sdk\";\n\n// Используем типы из services/api\n\nexport default function PostTemplatesPage() {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const navigate = useNavigate();\n\n  const handleDeleteTemplate = async (post: Post) => {\n    if (!window.confirm(`Удалить шаблон \"${post.name}\"?`)) return;\n    try {\n      await updatePost(\n        post.id,\n        null,\n        false\n      );\n      setPosts(prev => prev.filter(p => p.id !== post.id));\n    } catch (err) {\n      console.error('Ошибка при удалении шаблона:', err);\n      alert('Не удалось удалить шаблон.');\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      try {\n        setLoading(true);\n        const data = await getTemplates();\n        setPosts(data);\n      } catch (err) {\n        console.error('Ошибка при загрузке шаблонов:', err);\n        // уведомление уже показано ретраями внутри getTemplates; оставим мягкое сообщение\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, []);\n\n  const handleUseTemplate = (post: Post) => {\n    navigate('/posts', { state: { template: post } });\n  };\n\n  useEffect(() => {\n    const removeBack = on(\"back_button_pressed\", () => navigate(`/`));\n    return () => removeBack();\n\n}, [navigate]);\n\n  return (\n    <div className=\"container mx-auto p-4 bg-brandlight min-h-screen\">\n\n      <div className=\"flex space-x-8 mb-6\">\n  {([\"schedule\", \"create\", \"templates\"] as const).map(tab => (\n    <button\n      key={tab}\n      onClick={() => {\n        if (tab === \"schedule\")        navigate(\"/posts\");                     // «Расписание»\n        else if (tab === \"create\")     navigate(\"/posts\", { state: { openCreate: true } });\n      }}\n      className={`transition pb-1 ${\n        tab === \"templates\"\n          ? \"text-2xl font-semibold text-brand border-b-2 border-brand\"        // активная\n          : \"text-xl text-gray-600\"\n      }`}\n    >\n      {tab === \"schedule\" ? \"Расписание\" : tab === \"create\" ? \"Создать пост\" : \"Шаблоны\"}\n    </button>\n  ))}\n</div>\n      <h1 className=\"text-2xl font-semibold text-brand mb-6\">Шаблоны постов</h1>\n      {loading && (\n        <div className=\"flex justify-center py-10\">\n          <div className=\"h-10 w-10 border-4 border-brand border-t-transparent rounded-full animate-spin\" aria-label=\"Загрузка шаблонов\"/>\n        </div>\n      )}\n      {!loading && (posts.length === 0 ? (\n        <div className=\"text-gray-500 italic\">Шаблоны не найдены.</div>\n      ) : (\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {posts.map(post => (\n            <div\n              key={post.id}\n              className=\"relative bg-white rounded-2xl shadow p-4 flex flex-col\"\n            >\n              <img\n                src=\"/icons/trash.png\"\n                alt=\"Удалить шаблон\"\n                className=\"absolute top-2 right-2 h-6 w-6 cursor-pointer opacity-60 hover:opacity-100 transition\"\n                onClick={e => { e.stopPropagation(); handleDeleteTemplate(post); }}\n              />\n              {post.image_path && (\n                <img\n                  src={post.image_path}\n                  alt={post.name}\n                  className=\"h-40 w-full object-cover rounded-lg mb-4\"\n                />\n              )}\n              <h2 className=\"text-lg font-semibold text-brand mb-2\">\n                {post.name}\n              </h2>\n              <p className=\"text-gray-700 flex-grow\">\n                {post.text.length > 100\n                  ? post.text.slice(0, 100) + '…'\n                  : post.text}\n              </p>\n              <button\n                onClick={() => handleUseTemplate(post)}\n                className=\"mt-4 py-2 bg-brand text-white rounded-lg shadow hover:bg-brand2 transition\"\n              >\n                Использовать шаблон\n              </button>\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n"
  },
  {
    "path": "admin/frontend/src/pages/AccountsControlPage.tsx",
    "content": "import {useEffect, useState} from 'react';\nimport {on} from '@telegram-apps/sdk';\nimport {useNavigate} from 'react-router-dom';\nimport {getAuthCode, getUsers, sendAuthCode, updateUser, type User as APIUser,} from '../services/api';\nimport {AxiosError} from 'axios';\nimport type {UserRole} from \"../types/UserRole\";\n\nconst roles: UserRole[] = ['admin', 'manager', 'publications_manager'];\n\nconst STATUS_LABELS: Record<UserRole, string> = {\n    admin: 'Админ',\n    manager: 'Менеджер',\n    publications_manager: 'Менеджер по постам',\n    banned: 'Забанен',\n};\n\nexport default function AccountsControlPage() {\n    const [accounts, setAccounts] = useState<APIUser[]>([]);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [step, setStep] = useState<'form' | 'code'>('form');\n    const [phone, setPhone] = useState('');\n    const [cloudPassword, setCloudPassword] = useState('');\n    const [code, setCode] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState('');\n    const [proxyError, setProxyError] = useState(false);\n    const [roleUpdatingId, setRoleUpdatingId] = useState<string | null>(null);\n    const navigate = useNavigate();\n\n    const fetchAccounts = async () => {\n        try {\n            const users = await getUsers(); // APIUser[]\n            setAccounts(users);\n        } catch (e) {\n            console.error('Не удалось получить пользователей', e);\n        }\n    };\n\n    useEffect(() => {\n        fetchAccounts();\n    }, []);\n\n    // Обработчик системной кнопки назад\n    useEffect(() => {\n        const off = on('back_button_pressed', () => navigate(-1));\n        return () => off();\n    }, [navigate]);\n\n    const closeModal = () => {\n        setIsModalOpen(false);\n        setIsLoading(false);\n        setError('');\n        setProxyError(false);\n    };\n\n    const openModal = () => {\n        setIsModalOpen(true);\n        setStep('form');\n        setError('');\n        setPhone('');\n        setCloudPassword('');\n        setCode('');\n        setProxyError(false);\n    };\n\n    // Отправка кода SMS\n    const handleSendCode = async () => {\n        if (!phone) return setError('Введите телефон');\n        setIsLoading(true);\n        setError('');\n        setProxyError(false);\n        try {\n            await getAuthCode(phone);\n            setStep('code');\n        } catch (e: unknown) {\n            if (e instanceof AxiosError && e.response?.status === 503) {\n                closeModal();\n                setProxyError(true);\n            } else {\n                console.error(e);\n                setError('Не удалось отправить код. Попробуйте снова.');\n            }\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    // Подтверждение кода SMS\n    const handleConfirmCode = async () => {\n        if (!code) return setError('Введите код подтверждения');\n        setIsLoading(true);\n        setError('');\n        try {\n            await sendAuthCode(phone, code, cloudPassword);\n            alert('Ваш аккаунт подключен!');\n            closeModal();\n            await fetchAccounts();\n        } catch (e) {\n            console.error(e);\n            setError('Ошибка подтверждения. Проверьте код и пароль.');\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n// Смена роли через updateUser\n    const handleRoleChange = async (userId: string, newRole: UserRole) => {\n        setRoleUpdatingId(userId);\n        try {\n            const updated = await updateUser(userId, {role: newRole});\n            setAccounts(prev =>\n                prev.map(u => (u.id === userId ? updated : u))\n            );\n        } catch (e) {\n            console.error('Ошибка при смене роли', e);\n            alert('Не удалось сохранить роль');\n        } finally {\n            setRoleUpdatingId(null);\n        }\n    };\n\n    // Бан/разбан через updateUser\n    const handleToggleBan = async (userId: string, currentIsBanned: boolean) => {\n        setRoleUpdatingId(userId);\n        try {\n            const updated = await updateUser(userId, {is_banned: !currentIsBanned});\n            setAccounts(prev =>\n                prev.map(u => (u.id === userId ? updated : u))\n            );\n        } catch (e) {\n            console.error('Ошибка при обновлении бана', e);\n            alert('Не удалось обновить статус бана');\n        } finally {\n            setRoleUpdatingId(null);\n        }\n    };\n\n    return (\n        <div className=\"container mx-auto p-6 bg-brandlight min-h-screen\">\n            <h1 className=\"text-2xl text-center font-bold text-brand mb-8\">\n                Управление аккаунтами\n            </h1>\n\n            {proxyError && (\n                <div className=\"max-w-lg mx-auto mb-6 bg-red-100 border border-red-500 px-4 py-3 rounded-lg shadow\">\n                    Нет свободного прокси сервера. Он нужен, чтобы аккаунт не забанили. Необходимо добавить новый прокси\n                    сервер.\n                </div>\n            )}\n\n            <div className=\"flex justify-center mb-8\">\n                <button\n                    onClick={openModal}\n                    className=\"px-6 py-3 border-2 border-brand text-brand bg-white rounded-lg hover:bg-brandlight transition\"\n                >\n                    Подключить аккаунт\n                </button>\n            </div>\n\n            <h2 className=\"text-center mb-2\">─── ⋆⋅☆⋅⋆ ──</h2>\n\n            <div className=\"space-y-3\">\n                {accounts.map((u) => (\n                    <div\n                        key={u.id}\n                        className=\"bg-white rounded-lg shadow p-2 flex items-center\"\n                    >\n                        {/* Ник */}\n                        <div className=\"flex-1 min-w-0\">\n                            <h2 className=\"text-base font-semibold text-brand truncate\">\n                                {u.telegram_username || u.id}\n                            </h2>\n                        </div>\n\n                        {/* Селект сверху + кнопка снизу, прижато вправо */}\n                        <div className=\"flex-shrink-0 ml-auto flex flex-col items-end gap-1\">\n                            <select\n                                value={u.role}\n                                onChange={(e) => handleRoleChange(u.id, e.target.value as UserRole)}\n                                disabled={roleUpdatingId === u.id}\n                                className=\"\n            appearance-none w-32\n            py-1 px-2 text-sm\n            bg-white border border-gray-300\n            rounded focus:outline-none focus:ring-1 focus:ring-brand\n            cursor-pointer\n          \"\n                            >\n                                {roles.map((r) => (\n                                    <option key={r} value={r}>\n                                        {STATUS_LABELS[r]}\n                                    </option>\n                                ))}\n                            </select>\n\n                            <button\n                                onClick={() => handleToggleBan(u.id, u.is_banned)}\n                                disabled={roleUpdatingId === u.id}\n                                className={`\n            w-32 py-1 text-sm rounded font-medium disabled:opacity-50 focus:outline-none\n            ${u.is_banned\n                                    ? 'bg-green-100 text-green-800'\n                                    : 'bg-red-100 text-red-800'}\n          `}\n                            >\n                                {u.is_banned ? 'Разбанить' : 'Забанить'}\n                            </button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n\n            {/* Модалка подключения нового аккаунта */}\n            {isModalOpen && (\n                <div className=\"fixed inset-0 bg-black/30 flex items-center justify-center z-50\">\n                    <div className=\"bg-white rounded-lg shadow-lg p-6 w-full max-w-md relative\">\n                        <button\n                            onClick={closeModal}\n                            className=\"absolute top-2 right-2 text-gray-500 hover:text-gray-700\"\n                        >\n                            ✕\n                        </button>\n\n                        {step === 'form' ? (\n                            <>\n                                <h2 className=\"text-xl font-semibold mb-4\">Новый аккаунт</h2>\n                                <input\n                                    type=\"tel\"\n                                    placeholder=\"Телефон\"\n                                    value={phone}\n                                    onChange={(e) => setPhone(e.target.value)}\n                                    className=\"w-full mb-4 p-2 border rounded focus:ring-2 focus:ring-brand\"\n                                />\n                                <button\n                                    onClick={handleSendCode}\n                                    disabled={isLoading}\n                                    className=\"w-full py-2 bg-brand text-white rounded hover:bg-brand transition disabled:opacity-50\"\n                                >\n                                    {isLoading ? 'Отправка...' : 'Получить код'}\n                                </button>\n                            </>\n                        ) : (\n                            <>\n                                <h2 className=\"text-xl font-semibold mb-4\">Код подтверждения</h2>\n                                <input\n                                    type=\"text\"\n                                    placeholder=\"Код из Telegram\"\n                                    value={code}\n                                    onChange={(e) => setCode(e.target.value)}\n                                    className=\"w-full mb-3 p-2 border rounded focus:ring-2 focus:ring-brand\"\n                                />\n                                <input\n                                    type=\"password\"\n                                    placeholder=\"Облачный пароль (необязательно)\"\n                                    value={cloudPassword}\n                                    onChange={(e) => setCloudPassword(e.target.value)}\n                                    className=\"w-full mb-4 p-2 border rounded focus:ring-2 focus:ring-brand\"\n                                />\n                                <button\n                                    onClick={handleConfirmCode}\n                                    disabled={isLoading}\n                                    className=\"w-full py-2 bg-brand text-white rounded hover:bg-brand transition disabled:opacity-50\"\n                                >\n                                    {isLoading ? 'Подключение...' : 'Подключить'}\n                                </button>\n                            </>\n                        )}\n\n                        {error && <div className=\"text-red-500 mt-3\">{error}</div>}\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n"
  },
  {
    "path": "admin/frontend/src/pages/PostDetailsPage.tsx",
    "content": "import {useNavigate, useParams} from \"react-router-dom\";\nimport {useEffect, useMemo, useRef, useState} from \"react\";\nimport FileUploader from \"../components/FileUploader\";\nimport DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\nimport {RichEditor, type RichEditorHandle} from \"../components/RichEditor\";\nimport type {Emoji, MessageEntityDTO} from \"../services/api\";\nimport {\n    createPostToPublish,\n    getChats,\n    getPostToPublish,\n    type PostToPublish,\n    updatePost,\n    updatePostToPublish,\n    getChatTypes,\n} from \"../services/api\";\nimport {useAuth} from \"../contexts/auth\";\nimport {on} from \"@telegram-apps/sdk\";\nimport {EmojiPicker} from \"../components/EmojiPicker\";\nimport {normalizeLineBreaksToDivBr} from \"../utils/normalizeHtml\";\n\ninterface PostDetailsPageProps {\n    emojis: Emoji[]\n}\n\nexport default function PostDetailsPage({emojis}: PostDetailsPageProps) {\n    // ...\n    const {postToPublishId} = useParams<{ postToPublishId: string }>();\n    const navigate = useNavigate();\n    const {userId, loading: authLoading} = useAuth();\n\n    console.log('PostDetailsPage render', { postToPublishId, userId, authLoading });\n\n    // форма самого поста\n    const [photoFile, setPhotoFile] = useState<File | null>(null);\n    const [photoPreview, setPhotoPreview] = useState<string>(\"/default-photo.png\");\n    const [title, setTitle] = useState<string>(\"\");\n\n    // расписание\n    const [entry, setEntry] = useState<PostToPublish | null>(null);\n    const [scheduleType, setScheduleType] = useState<\"once\" | \"daily\">(\"once\");\n    const [scheduledAt, setScheduledAt] = useState<Date | null>(null);\n    const [timeOnly, setTimeOnly] = useState<Date | null>(null);\n\n    // чаты\n    const [chats, setChats] = useState<{ id: string; name: string; chat_type_id?: string | null }[]>([]);\n    const [selectedChats, setSelectedChats] = useState<string[]>([]);\n    const [chatSearch, setChatSearch] = useState<string>(\"\");\n    const [chatTypes, setChatTypes] = useState<{ id: string; name: string }[]>([]);\n\n    const [editorHtml, setEditorHtml] = useState<string>('');\n    const [editorText, setEditorText] = useState<string>('');\n    const [is_template, setIsTemplate] = useState<boolean>(false);\n    const [editorEntities, setEditorEntities] = useState<MessageEntityDTO[]>([]);\n    const [pickerOpen, setPickerOpen] = useState(false)\n    const richEditorRef = useRef<RichEditorHandle>(null)\n\n    // ↑ твои импорты…\nconst DEBUG = true;\n\nconst dbg = (...args: unknown[]) => {\n  if (DEBUG) console.log('[PostDetails]', ...args);\n};\n\nconst warn = (...args: unknown[]) => {\n  if (DEBUG) console.warn('[PostDetails][WARN]', ...args);\n};\n\nconst errl = (...args: unknown[]) => {\n  if (DEBUG) console.error('[PostDetails][ERROR]', ...args);\n};\n\nconst preview = (s?: string, n = 220) =>\n  (s ?? '').replace(/\\n/g, '⏎').slice(0, n);\n\n    // const [activeTab, setActiveTab] = useState<\"schedule\" | \"create\" | \"templates\">(\n    //     \"schedule\"\n    // );\n    // const location = useLocation();\n    // type LocationState = { template?: Post; openCreate?: true };\n    // const {template, openCreate} = (location.state as LocationState) || {};\n\n    // useEffect(() => {\n    //     if (openCreate) setActiveTab(\"create\");\n    // }, [openCreate]);\n\n    // загрузить все чаты из API\n    useEffect(() => {\n        getChats().then(setChats).catch(() => alert(\"Не удалось загрузить чаты\"));\n        getChatTypes().then(setChatTypes).catch(() => {});\n    }, []);\n\n    const filteredChats = useMemo(\n        () =>\n            chats.filter((c) =>\n                c.name.toLowerCase().includes(chatSearch.trim().toLowerCase())\n            ),\n        [chatSearch, chats]\n    );\n\n    const groupedFilteredChats = useMemo(() => {\n        const byType = new Map<string, { id: string; name: string; chat_type_id?: string | null }[]>();\n        for (const chat of filteredChats) {\n            const typeId = chat.chat_type_id ?? \"__none__\";\n            if (!byType.has(typeId)) byType.set(typeId, []);\n            byType.get(typeId)!.push(chat);\n        }\n        const typeNameById = new Map<string, string>(chatTypes.map(ct => [ct.id, ct.name]));\n        const result = Array.from(byType.entries()).map(([typeId, list]) => ({\n            typeId,\n            typeName: typeId === \"__none__\" ? \"Без группы\" : (typeNameById.get(typeId) ?? \"Другая группа\"),\n            chats: list.sort((a, b) => a.name.localeCompare(b.name)),\n        }));\n        result.sort((a, b) => {\n            if (a.typeId === \"__none__\" && b.typeId !== \"__none__\") return 1;\n            if (a.typeId !== \"__none__\" && b.typeId === \"__none__\") return -1;\n            return a.typeName.localeCompare(b.typeName);\n        });\n        return result;\n    }, [filteredChats, chatTypes]);\n\n    const toggleChat = (id: string) =>\n        setSelectedChats((prev) =>\n            prev.includes(id) ? prev.filter((x) => x !== id) : [...prev, id]\n        );\n\n// Загрузка одной записи PostToPublish (вместе с entry.post и entry.chats)\nuseEffect(() => {\n  if (!postToPublishId) {\n    console.warn('PostDetailsPage: postToPublishId is not defined');\n    return;\n  }\n  (async () => {\n    console.log('PostDetailsPage: starting data load for postToPublishId:', postToPublishId);\n    dbg('route param postToPublishId =', postToPublishId);\n    try {\n      dbg('getPostToPublish: start', { postToPublishId });\n      const e = await getPostToPublish(postToPublishId);\n      console.log('PostDetailsPage: getPostToPublish returned:', e);\n      dbg('getPostToPublish: OK', {\n        id: e?.id,\n        hasPost: !!e?.post,\n        postId: e?.post?.id,\n        chats: e?.chats?.length,\n        scheduled_type: e?.scheduled_type,\n        scheduled_date: e?.scheduled_date,\n        scheduled_time: e?.scheduled_time,\n      });\n\n      setEntry(e);\n      console.log('PostDetailsPage: entry set to:', e);\n\n      // 1) Поля поста\n      setTitle(e.post.name);\n\nconst loadedHtml = e.post.html || e.post.text || \"\";\ndbg('loadedHtml (from API)', { length: loadedHtml.length, preview: preview(loadedHtml) });\n\nsetEditorHtml(loadedHtml); // ← без normalize тут\n\n\n      if (loadedHtml && !loadedHtml) {\n        warn('Normalizer produced EMPTY html on non-empty input at LOAD phase!');\n      }\n\n      setEditorHtml(loadedHtml);\n      setEditorText(e.post.text);\n      setIsTemplate(e.post.is_template);\n      setEditorEntities(e.post.entities || []);\n\n      if (e.post.image_path) setPhotoPreview(e.post.image_path);\n\n      // 2) Тип рассылки и дата/время\n      setScheduleType(e.scheduled_type === \"single\" ? \"once\" : \"daily\");\n      if (e.scheduled_type === \"single\" && e.scheduled_date) {\n        const dt = new Date(`${e.scheduled_date}T${e.scheduled_time}`);\n        dbg('parsed single schedule', { dt: dt.toISOString() });\n        setScheduledAt(dt);\n      } else {\n        const now = new Date();\n        const [h, m] = e.scheduled_time.split(\":\").map(Number);\n        now.setHours(h, m, 0, 0);\n        dbg('parsed daily schedule (time only)', { h, m });\n        setTimeOnly(now);\n      }\n\n      // 3) Чаты\n      const chatIds = e.chats.map(c => c.id);\n      dbg('chats selected', { count: chatIds.length, ids: chatIds });\n      setSelectedChats(chatIds);\n} catch (error: unknown) {\n  if (error instanceof Error) {\n    errl('getPostToPublish FAILED', {\n      postToPublishId,\n      message: error.message,\n      stack: error.stack,\n    });\n  } else {\n    errl('getPostToPublish FAILED (non-Error)', error);\n  }\n  alert(\"Не удалось загрузить данные для редактирования\");\n  navigate(-1);\n}\n  })();\n}, [postToPublishId, navigate]);\n\n\n    useEffect(() => {\n        return on(\"back_button_pressed\", () => navigate(-1));\n    }, [navigate]);\n\n    function formatLocalDate(d: Date): string {\n        const Y = d.getFullYear();\n        const M = String(d.getMonth() + 1).padStart(2, \"0\");\n        const D = String(d.getDate()).padStart(2, \"0\");\n        return `${Y}-${M}-${D}`;        // \"YYYY-MM-DD\"\n    }\n\n    function formatLocalTime(d: Date): string {\n        const h = String(d.getHours()).padStart(2, \"0\");\n        const m = String(d.getMinutes()).padStart(2, \"0\");\n        return `${h}:${m}:00`;          // \"HH:mm:ss\"\n    }\n\nconst handleSave = async () => {\n  const e = entry;\n  const uid = userId;\n  console.log('handleSave called', { hasEntry: !!e, hasUserId: !!uid, entry: e, userId: uid });\n  if (!e || !uid) {\n    errl('handleSave: early return', { hasEntry: !!e, hasUser: !!uid });\n    alert(`Ошибка: ${!e ? 'Данные поста не загружены' : ''} ${!uid ? 'Пользователь не авторизован' : ''}`);\n    return;\n  }\n\n  dbg('handleSave: start', { postToPublishId: e.id, postId: e.post.id });\n\n  // ✳️ нормализуем HTML\n  const normalizedHtml = normalizeLineBreaksToDivBr(editorHtml || \"\");\n  const htmlBaseline = e.post.html ?? e.post.text ?? \"\";\n  const entitiesChanged =\n    JSON.stringify(editorEntities ?? []) !== JSON.stringify(e.post.entities ?? []);\n  const isTemplateChanged = is_template !== e.post.is_template;\n\n  dbg('normalize at SAVE', {\n    inputLen: (editorHtml || '').length,\n    outputLen: normalizedHtml.length,\n    baselineLen: htmlBaseline.length,\n    changedFromInput: normalizedHtml !== (editorHtml || ''),\n    changedFromBaseline: normalizedHtml !== htmlBaseline,\n    inputPreview: preview(editorHtml),\n    outputPreview: preview(normalizedHtml),\n  });\n\n  try {\n    // 1) контент поста — через updatePost\n    const willSendHtml = normalizedHtml !== htmlBaseline ? normalizedHtml : undefined;\n    dbg('updatePost payload flags', {\n      titleChanged: title !== e.post.name,\n      isTemplateChanged,\n      textChanged: editorText !== e.post.text,\n      htmlChanged: !!willSendHtml,\n      entitiesChanged,\n      photoFile: !!photoFile,\n    });\n\n    const upRes = await updatePost(\n      e.post.id,\n      title !== e.post.name ? title : undefined,\n      isTemplateChanged ? is_template : undefined,\n      editorText !== e.post.text ? editorText : undefined,\n      willSendHtml,\n      entitiesChanged ? editorEntities : undefined,\n      photoFile ?? undefined\n    );\n    dbg('updatePost OK', upRes);\n\n    // 2) расписание\n    let scheduled_date: string | null = null;\n    let scheduled_time: string;\n\n    if (scheduleType === \"once\" && scheduledAt) {\n      scheduled_date = formatLocalDate(scheduledAt);\n      scheduled_time = formatLocalTime(scheduledAt);\n    } else if (scheduleType === \"daily\" && timeOnly) {\n      scheduled_time = formatLocalTime(timeOnly);\n    } else {\n      warn('schedule missing', { scheduleType, scheduledAt, timeOnly });\n      alert(\"Выберите дату и время\");\n      return;\n    }\n\n    const payload = {\n      post_id: e.post.id,\n      manager_id: uid,\n      scheduled_type: scheduleType === \"once\" ? \"single\" : \"everyday\",\n      scheduled_date,\n      scheduled_time,\n      chat_ids: selectedChats,\n      status: e.status,\n    } as const;\n\n    dbg('postToPublish payload', payload);\n\n    if (e.id) {\n      const updRes = await updatePostToPublish(e.id, payload);\n      dbg('updatePostToPublish OK', updRes);\n    } else {\n      const crtRes = await createPostToPublish(payload);\n      dbg('createPostToPublish OK', crtRes);\n    }\n\n    alert(\"Изменения сохранены\");\n    navigate(-1);\n} catch (error: unknown) {\n  if (error instanceof Error) {\n    errl('handleSave FAILED', { message: error.message, stack: error.stack });\n  } else {\n    errl('handleSave FAILED (non-Error)', error);\n  }\n  alert('Не удалось сохранить изменения');\n}\n\n};\n\n    if (authLoading) {\n        return <div>Проверка авторизации…</div>;\n    }\n\n    if (!userId) {\n        return <div>Пользователь не авторизован</div>;\n    }\n\n    if (!entry) {\n        return <div>Загрузка данных поста…</div>;\n    }\n    return (\n        <div className=\"container mx-auto p-4 bg-brandlight min-h-screen relative\">\n            <h1 className=\"text-2xl font-semibold mb-6\">\n                Редактирование поста\n            </h1>\n\n            {/* Фото */}\n            <FileUploader\n                label=\"Фото поста\"\n                file={photoFile}\n                preview={photoPreview}\n                onFileChange={setPhotoFile}\n            />\n\n            {/* Название */}\n            <div className=\"mb-4\">\n                <label className=\"block mb-1 font-medium\">Название</label>\n                <input\n                    type=\"text\"\n                    value={title}\n                    onChange={(e) => setTitle(e.target.value)}\n                    className=\"w-full border border-brand rounded p-2\"\n                />\n            </div>\n\n            {/* Текст */}\n            <div className=\"mb-4\">\n                <label className=\"block mb-1 font-medium\">Текст поста</label>\n                <button\n                    type=\"button\"\n                    onClick={() => setPickerOpen((o) => !o)}\n                    className=\"ml-2 px-2 py-1 mb-2 rounded hover:bg-gray-200\"\n                >\n                    😊\n                </button>\n                <RichEditor\n  ref={richEditorRef}\n  emojis={emojis}\n  initialContent={editorHtml}\n  onChange={({ html, text, entities }) => {\n    dbg('editor.onChange', {\n      htmlLen: (html || '').length,\n      htmlPreview: preview(html),\n      textLen: (text || '').length,\n      entities: (entities || []).length,\n    });\n    setEditorHtml(html);\n    setEditorText(text);\n    setEditorEntities(entities);\n  }}\n/>\n\n                {pickerOpen && (\n\n                    <EmojiPicker\n                        emojis={emojis}\n                        onSelect={(emoji) => {\n                            richEditorRef.current?.insertEmoji(emoji)\n                            // setPickerOpen(false)\n                        }}\n                    />\n                )}\n\n            </div>\n\n            {/* Расписание */}\n            <div className=\"mb-4\">\n                <label className=\"block mb-1 font-medium\">\n                    Тип рассылки\n                </label>\n                <div className=\"flex space-x-4\">\n                    <label className=\"flex items-center space-x-2\">\n                        <input\n                            type=\"radio\"\n                            checked={scheduleType === \"once\"}\n                            onChange={() => setScheduleType(\"once\")}\n                            className=\"form-radio\"\n                        />\n                        <span>В указанный день</span>\n                    </label>\n                    <label className=\"flex items-center space-x-2\">\n                        <input\n                            type=\"radio\"\n                            checked={scheduleType === \"daily\"}\n                            onChange={() => setScheduleType(\"daily\")}\n                            className=\"form-radio\"\n                        />\n                        <span>Каждый день</span>\n                    </label>\n                </div>\n            </div>\n\n            {scheduleType === \"once\" ? (\n                <DatePicker\n                    selected={scheduledAt}\n                    onChange={setScheduledAt}\n                    showTimeSelect\n                    dateFormat=\"dd.MM.yyyy HH:mm\"\n                    className=\"w-full border p-2 mb-4\"\n                />\n            ) : (\n                <DatePicker\n                    selected={timeOnly}\n                    onChange={setTimeOnly}\n                    showTimeSelectOnly\n                    dateFormat=\"HH:mm\"\n                    className=\"w-full border p-2 mb-4\"\n                />\n            )}\n\n            {/* Чаты */}\n            <div className=\"mb-6\">\n                <label className=\"block mb-1 font-medium\">\n                    Чаты для отправки\n                </label>\n                <input\n                    type=\"text\"\n                    placeholder=\"Поиск...\"\n                    value={chatSearch}\n                    onChange={(e) => setChatSearch(e.target.value)}\n                    className=\"w-full border p-2 mb-2\"\n                />\n                <div className=\"max-h-40 overflow-y-auto border p-2 rounded space-y-3\">\n                    {groupedFilteredChats.map((group) => (\n                        <div key={group.typeId}>\n                            <div className=\"px-2 py-1 mb-2 text-xs font-semibold text-gray-700 bg-gray-100 rounded\">\n                                {group.typeName}\n                            </div>\n                            <div className=\"space-y-2\">\n                                {group.chats.map((c) => (\n                                    <label\n                                        key={c.id}\n                                        className=\"flex items-center space-x-2 mb-1\"\n                                    >\n                                        <input\n                                            type=\"checkbox\"\n                                            checked={selectedChats.includes(c.id)}\n                                            onChange={() => toggleChat(c.id)}\n                                            className=\"form-checkbox\"\n                                        />\n                                        <span>{c.name}</span>\n                                    </label>\n                                ))}\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            </div>\n\n{/* Сделать шаблоном */}\n<div className=\"mt-2\">\n  <label className=\"flex items-center space-x-2\">\n    <input\n      type=\"checkbox\"\n      checked={is_template}\n      onChange={() => setIsTemplate((prev) => !prev)}\n      className=\"form-checkbox h-5 w-5 text-brand focus:ring-brand\"\n    />\n    <span>Сделать шаблоном</span>\n  </label>\n</div>\n            <div className=\"flex justify-end\">\n                <button\n                    onClick={handleSave}\n                    disabled={!entry || !userId}\n                    className=\"px-5 py-2 bg-brand text-white rounded hover:bg-brand2\"\n                >\n                    Сохранить\n                </button>\n            </div>\n        </div>\n    );\n}\n"
  },
  {
    "path": "admin/frontend/src/pages/StoryDetailsPage.tsx",
    "content": "import { useNavigate } from 'react-router-dom';\nimport {useState, useMemo, useEffect} from 'react';\nimport FileUploader from '../components/FileUploader';\nimport {on} from '@telegram-apps/sdk';\n\nexport default function StoryDetailsPage() {\n    const navigate = useNavigate();\n\n    // Захардкоженные данные истории\n    const [photoUrl] = useState('/default-story.png');\n    const [title, setTitle] = useState('Название захардкоженной истории');\n    const [text, setText] = useState('Текст под историей захардкоженный...');\n    const [scheduleType, setScheduleType] = useState<'once' | 'daily'>('once');\n    const [date, setDate] = useState('2025-05-17');\n    const [time, setTime] = useState('08:00');\n\n    // Управление аккаунтами менеджеров\n    const initialAccounts = useMemo(\n        () => ['ManagerAccount1', 'ManagerAccount2'],\n        []\n    );\n    const [allAccounts] = useState<string[]>(initialAccounts);\n    const [selectedAccounts, setSelectedAccounts] = useState<string[]>(initialAccounts);\n    const [accountSearch, setAccountSearch] = useState('');\n    const filteredAccounts = useMemo(\n        () => allAccounts.filter(acc =>\n            acc.toLowerCase().includes(accountSearch.trim().toLowerCase())\n        ),\n        [accountSearch, allAccounts]\n    );\n    const toggleAccount = (acc: string) => {\n        setSelectedAccounts(prev =>\n            prev.includes(acc) ? prev.filter(a => a !== acc) : [...prev, acc]\n        );\n    };\n\n    useEffect(() => {\n        const removeBackListener = on('back_button_pressed', () => navigate(-1));\n        return () => removeBackListener();\n    }, [navigate]);\n\n    const handleSave = () => {\n        // Логика сохранения изменений истории\n        alert('Изменения истории сохранены');\n    };\n\n    const handleDelete = () => {\n        // Логика удаления истории\n        alert('История удалена');\n        navigate(-1);\n    };\n\n    return (\n        <div className=\"container mx-auto p-4 bg-brandlight min-h-screen relative\">\n            {/* Навигация и удаление */}\n            <button\n                onClick={() => navigate(-1)}\n                className=\"mb-4 text-gray-600 hover:underline\"\n            >\n                ← Назад\n            </button>\n            <button\n                onClick={handleDelete}\n                className=\"absolute top-4 right-4 text-brand font-semibold\"\n            >\n                Удалить\n            </button>\n\n            <div className=\"mb-6\">\n                <FileUploader\n                    label=\"Фото истории\"\n                    file={null}\n                    preview={photoUrl}\n                    onFileChange={() => {}}\n                />\n            </div>\n\n            <div className=\"mb-4\">\n                <label className=\"block mb-2 font-medium\">Название истории</label>\n                <input\n                    type=\"text\"\n                    value={title}\n                    onChange={e => setTitle(e.target.value)}\n                    className=\"w-full border border-brand rounded p-2 focus:outline-none focus:ring-2 focus:ring-brand\"\n                />\n            </div>\n\n            <div className=\"mb-4\">\n                <label className=\"block mb-2 font-medium\">Текст под историей</label>\n                <textarea\n                    value={text}\n                    onChange={e => setText(e.target.value)}\n                    rows={3}\n                    className=\"w-full border border-brand rounded p-2 focus:outline-none focus:ring-2 focus:ring-brand\"\n                />\n            </div>\n\n            <div className=\"mb-4\">\n                <label className=\"block mb-2 font-medium\">Тип рассылки</label>\n                <div className=\"flex space-x-4\">\n                    <label className=\"flex items-center space-x-2\">\n                        <input\n                            type=\"radio\"\n                            value=\"once\"\n                            checked={scheduleType === 'once'}\n                            onChange={() => setScheduleType('once')}\n                            className=\"form-radio h-4 w-4 text-brand\"\n                        />\n                        <span>В указанный день</span>\n                    </label>\n                    <label className=\"flex items-center space-x-2\">\n                        <input\n                            type=\"radio\"\n                            value=\"daily\"\n                            checked={scheduleType === 'daily'}\n                            onChange={() => setScheduleType('daily')}\n                            className=\"form-radio h-4 w-4 text-brand\"\n                        />\n                        <span>Каждый день</span>\n                    </label>\n                </div>\n            </div>\n\n            {scheduleType === 'once' ? (\n                <div className=\"flex space-x-4 mb-6\">\n                    <div className=\"flex-1\">\n                        <label className=\"block mb-2 font-medium\">Дата</label>\n                        <input\n                            type=\"date\"\n                            value={date}\n                            onChange={e => setDate(e.target.value)}\n                            className=\"w-full border border-brand rounded p-2 focus:outline-none focus:ring-2 focus:ring-brand\"\n                        />\n                    </div>\n                    <div className=\"flex-1\">\n                        <label className=\"block mb-2 font-medium\">Время</label>\n                        <input\n                            type=\"time\"\n                            value={time}\n                            onChange={e => setTime(e.target.value)}\n                            className=\"w-full border border-brand rounded p-2 focus:outline-none focus:ring-2 focus:ring-brand\"\n                        />\n                    </div>\n                </div>\n            ) : (\n                <div className=\"mb-6\">\n                    <label className=\"block mb-2 font-medium\">Время</label>\n                    <input\n                        type=\"time\"\n                        value={time}\n                        onChange={e => setTime(e.target.value)}\n                        className=\"w-full border border-brand rounded p-2 focus:outline-none focus:ring-2 focus:ring-brand\"\n                    />\n                </div>\n            )}\n\n            {/* Выбор аккаунтов менеджеров */}\n            <div className=\"mb-4\">\n                <label className=\"block mb-2 font-medium\">Аккаунты для публикации</label>\n                <input\n                    type=\"text\"\n                    placeholder=\"Поиск аккаунтов...\"\n                    value={accountSearch}\n                    onChange={e => setAccountSearch(e.target.value)}\n                    className=\"w-full mb-2 border border-brand rounded p-2 focus:outline-none focus:ring-2 focus:ring-brand\"\n                />\n                <div className=\"max-h-40 overflow-y-auto space-y-2 border border-brand rounded p-2 mb-6\">\n                    {filteredAccounts.map(acc => (\n                        <label key={acc} className=\"flex items-center space-x-2\">\n                            <input\n                                type=\"checkbox\"\n                                checked={selectedAccounts.includes(acc)}\n                                onChange={() => toggleAccount(acc)}\n                                className=\"form-checkbox h-5 w-5 text-brand focus:ring-brand\"\n                            />\n                            <span>{acc}</span>\n                        </label>\n                    ))}\n                    {filteredAccounts.length === 0 && (\n                        <div className=\"text-gray-500 italic\">Аккаунты не найдены</div>\n                    )}\n                </div>\n            </div>\n\n            <div className=\"flex justify-end\">\n                <button\n                    onClick={handleSave}\n                    className=\"px-4 py-2 bg-brand text-white rounded hover:bg-brand2 transition\"\n                >\n                    Сохранить\n                </button>\n            </div>\n        </div>\n    );\n}\n"
  },
  {
    "path": "admin/frontend/src/pages/AssistantControlPage.tsx",
    "content": ""
  },
  {
    "path": "admin/frontend/src/pages/ChatTypesControlPage.tsx",
    "content": "import { useEffect, useState } from \"react\";\nimport {\n  getChatTypes,\n  createChatType,\n  deleteChatType,\n  getChatsByType,\n  createChatByLink, deleteChat,\n  updateChatType, updateChat,\n} from \"../services/api\";\nimport { useAuth } from \"../contexts/auth\";\nimport { FiPlus, FiTrash2, FiChevronDown, FiChevronUp, FiCheck, FiX } from \"react-icons/fi\";\nimport { on } from \"@telegram-apps/sdk\";\nimport { useNavigate } from \"react-router-dom\";\n\ntype ChatType = { id: string; name: string; description: string };\ntype Chat = { id: string; name: string; invite_link?: string };\n\nexport default function ChatTypesControlPage() {\n  const { userId } = useAuth();\n  const navigate = useNavigate();\n\n  const [types, setTypes] = useState<ChatType[]>([]);\n  const [chatsMap, setChatsMap] = useState<Record<string, Chat[]>>({});\n  const [expanded, setExpanded] = useState<Record<string, boolean>>({});\n\n  const [showTypeModal, setShowTypeModal] = useState(false);\n  const [newTypeName, setNewTypeName] = useState(\"\");\n  const [newTypeDescription, setNewTypeDescription] = useState(\"\");\n\n  const [showChatModal, setShowChatModal] = useState(false);\n  const [newChatLink, setNewChatLink] = useState(\"\");\n  const [currentTypeForChat, setCurrentTypeForChat] = useState<string | null>(null);\n  const [highlightChatId, setHighlightChatId] = useState<string | null>(null);\n\n  // inline-редактирование названия группы\n  const [editingTypeId, setEditingTypeId] = useState<string | null>(null);\n  const [editingTypeName, setEditingTypeName] = useState(\"\");\n\n  // подсветка зоны дропа\n  const [dragOverTypeId, setDragOverTypeId] = useState<string | null>(null);\n\n  useEffect(() => {\n    loadTypes();\n  }, []);\n\n  useEffect(() => {\n    return on(\"back_button_pressed\", () => navigate(-1));\n  }, [navigate]);\n\n  async function loadTypes() {\n    const data = await getChatTypes();\n    setTypes(data);\n    data.forEach((t) => loadChats(t.id));\n  }\n\n  async function loadChats(typeId: string) {\n    const data = await getChatsByType(typeId);\n    setChatsMap((prev) => ({ ...prev, [typeId]: data }));\n  }\n\n  async function handleCreateType() {\n    if (!newTypeName.trim()) return;\n    await createChatType({\n      name: newTypeName.trim(),\n      description: newTypeDescription.trim(),\n    });\n    setShowTypeModal(false);\n    setNewTypeName(\"\");\n    setNewTypeDescription(\"\");\n    loadTypes();\n  }\n\n  async function handleDeleteType(id: string) {\n    if (!window.confirm(\"Удалить этот вид чатов?\")) return;\n    await deleteChatType(id);\n    loadTypes();\n  }\n\n  function toggleExpand(typeId: string) {\n    setExpanded((prev) => ({ ...prev, [typeId]: !prev[typeId] }));\n  }\n\n  function openAddChat(typeId: string) {\n    setCurrentTypeForChat(typeId);\n    setNewChatLink(\"\");\n    setShowChatModal(true);\n  }\n\n  // Нормализация инвайта: убираем @, http/https, префикс t.me/, завершающий слэш, lower-case\n  function normalizeInvite(s?: string): string {\n    if (!s) return \"\";\n    let v = s.trim();\n    if (v.startsWith(\"@\")) v = v.slice(1);\n    v = v.replace(/^https?:\\/\\//i, \"\");\n    v = v.replace(/^t\\.me\\//i, \"\");\n    if (v.endsWith(\"/\")) v = v.slice(0, -1);\n    return v.toLowerCase();\n  }\n\n  // Поиск и подсветка существующего чата по нормализованному ключу\n  async function findAndHighlightByInviteKey(targetKey: string): Promise<boolean> {\n    // 1) Пытаемся найти в уже загруженных списках\n    let found: { typeId: string; chat: Chat } | null = null;\n    for (const [typeId, list] of Object.entries(chatsMap)) {\n      const hit = (list || []).find(c => normalizeInvite(c.invite_link) === targetKey);\n      if (hit) { found = { typeId, chat: hit }; break; }\n    }\n\n    const expandAndHighlight = (typeId: string, chatId: string) => {\n      setExpanded(prev => ({ ...prev, [typeId]: true }));\n      setShowChatModal(false);\n      setTimeout(() => {\n        setHighlightChatId(chatId);\n        requestAnimationFrame(() => {\n          const el = document.querySelector(`[data-chat-id=\"${chatId}\"]`);\n          if (el && 'scrollIntoView' in el) (el as any).scrollIntoView({ behavior: 'smooth', block: 'center' });\n        });\n        setTimeout(() => setHighlightChatId(null), 2000);\n      }, 100);\n    };\n\n    if (found) { expandAndHighlight(found.typeId, found.chat.id); return true; }\n\n    // 2) Обновляем данные и пробуем ещё раз\n    const typesData = await getChatTypes();\n    setTypes(typesData);\n    for (const t of typesData) {\n      const data = await getChatsByType(t.id);\n      setChatsMap(prev => ({ ...prev, [t.id]: data }));\n      const hit = data.find(c => normalizeInvite(c.invite_link) === targetKey);\n      if (hit) { expandAndHighlight(t.id, hit.id); return true; }\n    }\n    return false;\n  }\n\n  async function handleAddChat() {\n    if (!newChatLink.trim() || !currentTypeForChat) return;\n    try {\n      const raw = newChatLink.trim();\n      const normalizedForRequest = raw.startsWith(\"@\") ? raw.slice(1) : raw;\n      const chat = await createChatByLink({\n        invite_link: normalizedForRequest,\n        chat_type_id: currentTypeForChat,\n        manager_id: userId!,\n      });\n      setChatsMap((prev) => ({\n        ...prev,\n        [currentTypeForChat]: [...(prev[currentTypeForChat] || []), chat],\n      }));\n      setShowChatModal(false);\n    } catch (err: any) {\n      const status = err?.response?.status ?? err?.status;\n      // 1) Если бэкенд вернул id и chat_type_id — подсветим по ним сразу\n      const byId = err?.response?.data;\n      if (status === 409 && byId?.id && byId?.chat_type_id) {\n        setExpanded(prev => ({ ...prev, [byId.chat_type_id]: true }));\n        setShowChatModal(false);\n        setTimeout(() => {\n          setHighlightChatId(byId.id);\n          requestAnimationFrame(() => {\n            const el = document.querySelector(`[data-chat-id=\"${byId.id}\"]`);\n            if (el && 'scrollIntoView' in el) (el as any).scrollIntoView({ behavior: 'smooth', block: 'center' });\n          });\n          setTimeout(() => setHighlightChatId(null), 2000);\n        }, 100);\n        alert(\"Такой чат уже существует. Вот он в списке.\");\n      } else {\n        // 2) Фолбэк: ищем по нормализованной ссылке\n        const key = normalizeInvite(newChatLink);\n        const highlighted = await findAndHighlightByInviteKey(key);\n        if (highlighted || status === 409) {\n          alert(\"Такой чат уже существует. Вот он в списке.\");\n        } else {\n          alert(\"Не удалось добавить чат.\");\n        }\n        setShowChatModal(false);\n      }\n    }\n  }\n\n  async function handleRemoveChat(chatId: string) {\n    await deleteChat(chatId);\n    loadTypes()\n  }\n\n  // сохранить новое имя группы\n  async function handleSaveTypeName(typeId: string) {\n    const name = editingTypeName.trim();\n    if (!name) {\n      // пустое значение — просто выйти из режима редактирования, не отправляя PATCH\n      setEditingTypeId(null);\n      setEditingTypeName(\"\");\n      return;\n    }\n    await updateChatType(typeId, { name });\n    setEditingTypeId(null);\n    setEditingTypeName(\"\");\n    await loadTypes();\n  }\n\n  // DnD: начало перетаскивания чата\n  function onChatDragStart(e: React.DragEvent, chatId: string, fromTypeId: string) {\n    e.dataTransfer.setData(\"text/plain\", JSON.stringify({ chatId, fromTypeId }));\n    e.dataTransfer.effectAllowed = \"move\";\n  }\n\n  // DnD: сюда можно бросать\n  function onGroupDragOver(e: React.DragEvent, typeId: string) {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = \"move\";\n    setDragOverTypeId(typeId);\n  }\n\n  // DnD: обработка сброса в группу typeId\n  async function onGroupDrop(e: React.DragEvent, toTypeId: string) {\n    e.preventDefault();\n    try {\n      const data = JSON.parse(e.dataTransfer.getData(\"text/plain\")) as { chatId: string; fromTypeId: string };\n      if (!data?.chatId) return;\n      if (data.fromTypeId === toTypeId) return;\n      await updateChat(data.chatId, { chat_type_id: toTypeId });\n      // обновляем обе группы\n      await Promise.all([loadChats(data.fromTypeId), loadChats(toTypeId)]);\n    } catch (err) {\n      // noop\n    }\n    setDragOverTypeId(null);\n  }\n\n  return (\n    <div className=\"p-4 bg-brandlight min-h-screen space-y-6\">\n      {/* Сами группы чатов */}\n      {types.map((type) => (\n        <div\n          key={type.id}\n          className={`bg-brand-pink rounded-2xl p-4 shadow-lg ${dragOverTypeId === type.id ? 'ring-2 ring-brand' : ''}`}\n          onDragOver={(e) => onGroupDragOver(e, type.id)}\n          onDragLeave={() => setDragOverTypeId((prev) => (prev === type.id ? null : prev))}\n          onDrop={(e) => onGroupDrop(e, type.id)}\n        >\n          <div\n            className=\"flex justify-between items-center cursor-pointer\"\n            onClick={() => toggleExpand(type.id)}\n          >\n            <div className=\"flex-1 min-w-0\">\n              {editingTypeId === type.id ? (\n                <div className=\"flex items-start gap-2\" onClick={(e) => e.stopPropagation()}>\n                  <div className=\"flex-1 min-w-0\">\n                    <input\n                      value={editingTypeName}\n                      onChange={(e) => setEditingTypeName(e.target.value)}\n                      className=\"w-full border rounded px-2 py-1\"\n                      autoFocus\n                      onKeyDown={(e) => {\n                        if (e.key === 'Enter') {\n                          e.preventDefault();\n                          handleSaveTypeName(type.id);\n                        } else if (e.key === 'Escape') {\n                          setEditingTypeId(null);\n                          setEditingTypeName(\"\");\n                        }\n                      }}\n                      onBlur={() => handleSaveTypeName(type.id)}\n                      placeholder=\"Название группы\"\n                    />\n                    <div className=\"mt-1 text-xs text-gray-500\">Enter — сохранить, Esc — отменить</div>\n                  </div>\n                  <button\n                    onClick={() => handleSaveTypeName(type.id)}\n                    className=\"p-2 rounded-full hover:bg-white/70 border border-transparent hover:border-brand\"\n                    title=\"Сохранить\"\n                    aria-label=\"Сохранить\"\n                  >\n                    <FiCheck className=\"text-green-600\" />\n                  </button>\n                  <button\n                    onClick={() => { setEditingTypeId(null); setEditingTypeName(\"\"); }}\n                    className=\"p-2 rounded-full hover:bg-white/70 border border-transparent hover:border-brand\"\n                    title=\"Отменить\"\n                    aria-label=\"Отменить\"\n                  >\n                    <FiX className=\"text-red-600\" />\n                  </button>\n                </div>\n              ) : (\n                <div>\n                  <h2\n                    className=\"text-lg font-medium truncate hover:underline cursor-text\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      setEditingTypeId(type.id);\n                      setEditingTypeName(type.name);\n                    }}\n                    title=\"Нажмите, чтобы отредактировать\"\n                  >\n                    {type.name}\n                  </h2>\n                  <p className=\"text-sm text-gray-700 truncate\">{type.description}</p>\n                </div>\n              )}\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  openAddChat(type.id);\n                }}\n                className=\"p-2 bg-brandlight rounded-full shadow\"\n                title=\"Добавить чат\"\n              >\n                <FiPlus className=\"text-xl text-brand-pink\" />\n              </button>\n              <button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleDeleteType(type.id);\n                }}\n                className=\"p-2 bg-brandlight rounded-full shadow\"\n                title=\"Удалить группу\"\n              >\n                <FiTrash2 className=\"text-xl text-red-500\" />\n              </button>\n              {expanded[type.id] ? (\n                <FiChevronUp className=\"text-xl\" />\n              ) : (\n                <FiChevronDown className=\"text-xl\" />\n              )}\n            </div>\n          </div>\n\n          {expanded[type.id] && (\n            <ul className=\"mt-4 space-y-2\">\n              {chatsMap[type.id]?.length ? (\n                chatsMap[type.id].map((chat) => (\n                  <li\n                    key={chat.id}\n                    className={`flex justify-between items-center rounded-xl p-3 shadow ${highlightChatId === chat.id ? 'bg-blue-100 ring-2 ring-blue-300' : 'bg-white'}`}\n                    draggable\n                    onDragStart={(e) => onChatDragStart(e, chat.id, type.id)}\n                    data-chat-id={chat.id}\n                  >\n                    <span className=\"truncate mr-3\">{chat.name}</span>\n                    <div className=\"flex items-center gap-2\">\n                      <select\n                        className=\"border rounded px-2 py-1 text-sm\"\n                        value={type.id}\n                        onChange={async (e) => {\n                          const toTypeId = e.target.value;\n                          if (toTypeId && toTypeId !== type.id) {\n                            await updateChat(chat.id, { chat_type_id: toTypeId });\n                            await Promise.all([loadChats(type.id), loadChats(toTypeId)]);\n                          }\n                        }}\n                      >\n                        {types.map(t => (\n                          <option key={t.id} value={t.id}>{t.name}</option>\n                        ))}\n                      </select>\n                      <FiTrash2\n                        onClick={() => handleRemoveChat(chat.id)}\n                        className=\"text-red-500 cursor-pointer\"\n                      />\n                    </div>\n                  </li>\n                ))\n              ) : (\n                <li className=\"text-gray-600 italic\">Чатов нет — перетащите сюда из другой группы</li>\n              )}\n            </ul>\n          )}\n        </div>\n      ))}\n\n      {/* Кнопка «+» для создания новой группы чатов */}\n      <div className=\"flex justify-center\">\n        <button\n          onClick={() => setShowTypeModal(true)}\n          className=\"p-3 bg-brand-pink text-brandlight rounded-full shadow-lg\"\n          title=\"Добавить группу чатов\"\n        >\n          <FiPlus size={24} />\n        </button>\n      </div>\n\n      {/* Модалка создания новой группы чатов */}\n      {showTypeModal && (\n        <div className=\"fixed inset-0 bg-black/30 flex items-center justify-center z-50\">\n          <div className=\"bg-white p-6 rounded-2xl shadow-lg w-96\">\n            <h3 className=\"text-xl font-semibold mb-4\">Новая группа чатов</h3>\n            <input\n              type=\"text\"\n              placeholder=\"Название\"\n              value={newTypeName}\n              onChange={(e) => setNewTypeName(e.target.value)}\n              className=\"w-full mb-2 p-2 border rounded-lg\"\n            />\n            <textarea\n              placeholder=\"Описание\"\n              value={newTypeDescription}\n              onChange={(e) => setNewTypeDescription(e.target.value)}\n              className=\"w-full mb-4 p-2 border rounded-lg\"\n            />\n            <div className=\"flex justify-end space-x-2\">\n              <button\n                onClick={() => setShowTypeModal(false)}\n                className=\"px-4 py-2 rounded-lg\"\n              >\n                Отмена\n              </button>\n              <button\n                onClick={handleCreateType}\n                className=\"px-4 py-2 bg-brand-pink text-black rounded-lg\"\n              >\n                Создать\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Модалка добавления чата в выбранную группу */}\n      {showChatModal && currentTypeForChat && (\n        <div className=\"fixed inset-0 bg-black/30 flex items-center justify-center z-50\">\n          <div className=\"bg-white p-6 rounded-2xl shadow-lg w-96\">\n            <h3 className=\"text-xl font-semibold mb-4\">Добавить чат</h3>\n            <input\n              type=\"text\"\n              placeholder=\"Ссылка-приглашение\"\n              value={newChatLink}\n              onChange={(e) => setNewChatLink(e.target.value)}\n              className=\"w-full mb-4 p-2 border rounded-lg\"\n            />\n            <div className=\"flex justify-end space-x-2\">\n              <button\n                onClick={() => setShowChatModal(false)}\n                className=\"px-4 py-2 rounded-lg\"\n              >\n                Отмена\n              </button>\n              {(() => {\n                const canAdd = !!newChatLink.trim();\n                const className = canAdd\n                  ? \"px-4 py-2 rounded-lg bg-brand text-white hover:bg-brand2 transition\"\n                  : \"px-4 py-2 rounded-lg bg-gray-300 text-gray-600 cursor-not-allowed\";\n                return (\n                  <button\n                    onClick={handleAddChat}\n                    className={className}\n                    disabled={!canAdd}\n                    title={canAdd ? \"Добавить чат\" : \"Введите ссылку\"}\n                  >\n                    Добавить\n                  </button>\n                );\n              })()}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"
  },
  {
    "path": "admin/frontend/src/pages/PostsControlPage.tsx",
    "content": "import FileUploader from \"../components/FileUploader\";\n\nimport {useCallback, useEffect, useMemo, useRef, useState} from \"react\";\nimport {useLocation, useNavigate} from \"react-router-dom\";\nimport {FiChevronDown, FiChevronUp, FiFilter, FiLayers, FiMessageSquare, FiUser, FiX} from \"react-icons/fi\";\nimport {on} from \"@telegram-apps/sdk\";\nimport {\n    createPost,\n    createPostToPublish,\n    deletePostToPublish,\n    type Emoji,\n    getChats,\n    getChatTypes,\n    getManagers,\n    getPostsToPublish,\n    updatePost,\n} from \"../services/api\";\nimport {useAuth} from \"../contexts/auth\";\nimport DatePicker from \"react-datepicker\";\nimport type {RichEditorHandle} from \"../components/RichEditor\";\nimport {RichEditor} from \"../components/RichEditor\";\nimport type {UserRole} from \"../types/UserRole\";\nimport {EmojiPicker} from \"../components/EmojiPicker\";\n\n/* ───────── Типы ───────── */\ntype EventItem = {\n    id: string;\n    postId: string;\n    title: string;\n    time: string;\n    scheduledType: \"single\" | \"everyday\";\n};\n\nexport interface Post {\n    id: string;\n    name: string;\n    responsible_manager_id: string;\n    text: string;\n    image_path: string | null;\n    html?: string | null;\n    entities?: MessageEntityDTO[];\n    is_template: boolean;\n}\n\ninterface ChatItem {\n    id: string;\n    name: string;\n    chat_type_id?: string | null;\n}\n\nexport interface CreatePostToPublishDTO {\n    post_id: string;\n    scheduled_type: \"everyday\" | \"single\";\n    responsible_manager_id: string;\n    scheduled_date?: string | null;\n    scheduled_time: string;\n    chat_ids?: string[];\n    manager_id: string;\n    status: string;\n}\n\nexport interface MessageEntityDTO {\n    type:\n        | \"custom_emoji\"\n        | \"bold\"\n        | \"italic\"\n        | \"underline\"\n        | \"strikethrough\"\n        | \"text_link\"\n        | \"blockquote\";\n    offset: number;\n    length: number;\n    custom_emoji_id?: string;\n    url?: string;\n}\n\nexport interface User {\n    id: string;\n    telegram_username: string;\n    role: UserRole;\n}\n\ntype ChatTypeItem = { id: string; name: string };\n\ninterface PostsControlPageProps {\n    emojis: Emoji[];\n}\n\nexport default function PostsControlPage({emojis}: PostsControlPageProps) {\n    /* ───────── Tabs ───────── */\n    const [activeTab, setActiveTab] = useState<\"schedule\" | \"create\" | \"templates\">(\n        \"schedule\"\n    );\n\n    /* ───────── Form ───────── */\n    const [photoFile, setPhotoFile] = useState<File | null>(null);\n    const [photoPreview, setPhotoPreview] = useState<string | null>(null);\n    const [title, setTitle] = useState(\"\");\n    const [titleError, setTitleError] = useState(\"\");\n    const [textError, setTextError] = useState(\"\");\n    const [scheduleType, setScheduleType] = useState<\"once\" | \"daily\">(\"once\");\n    const [isTemplate, setIsTemplate] = useState(false);\n    const [updateTemplate, setUpdateTemplate] = useState(false);\n\n    /* ───────── Chats ───────── */\n    const [chats, setChats] = useState<ChatItem[]>([]);\n    const [selectedChats, setSelectedChats] = useState<string[]>([]);\n    const [chatSearch, setChatSearch] = useState(\"\");\n\n    /* ───────── Filters ───────── */\n    const [managerFilter, setManagerFilter] = useState<string>(\"\");\n    const [chatTypeFilter, setChatTypeFilter] = useState<string>(\"\");\n    const [chatFilter, setChatFilter] = useState<string>(\"\");\n\n    const [chatTypes, setChatTypes] = useState<ChatTypeItem[]>([]);\n\n    /* ───────── Schedule list ───────── */\n    const [schedule, setSchedule] = useState<Record<string, EventItem[]>>({});\n    const [openDays, setOpenDays] = useState<Record<string, boolean>>({});\n    const [scheduledAt, setScheduledAt] = useState<Date | null>(null);\n    const [timeOnly, setTimeOnly] = useState<Date | null>(null);\n    const [isLoading, setIsLoading] = useState(false);\n\n    /* ───────── Rich-editor ───────── */\n    const [editorHtml, setEditorHtml] = useState(\"\");\n    const [editorText, setEditorText] = useState(\"\");\n    const [editorEntities, setEditorEntities] = useState<MessageEntityDTO[]>([]);\n    const [responsibleManagerId, setResponsibleManagerId] = useState(\"\");\n    const [viewMode, setViewMode] = useState<\"scheduled\" | \"sent\">(\"scheduled\");\n\n    const navigate = useNavigate();\n    const {userId, role} = useAuth();\n\n    const [managers, setManagers] = useState<User[]>([]);\n\n\n// рядом с остальными useState\n    const [filtersOpen, setFiltersOpen] = useState(false);\n\n// удобные подписи для чипов\n    const managerName = useMemo(\n        () => managers.find(m => m.id === managerFilter)?.telegram_username ?? \"\",\n        [managers, managerFilter]\n    );\n    const chatTypeName = useMemo(\n        () => chatTypes.find(ct => ct.id === chatTypeFilter)?.name ?? \"\",\n        [chatTypes, chatTypeFilter]\n    );\n    const chatName = useMemo(\n        () => chats.find(c => c.id === chatFilter)?.name ?? \"\",\n        [chats, chatFilter]\n    );\n\n// сколько фильтров включено — для бейджа\n    const activeFiltersCount = (managerFilter ? 1 : 0) + (chatTypeFilter ? 1 : 0) + (chatFilter ? 1 : 0);\n\n\n    /* ───────── Initial fetch ───────── */\n    useEffect(() => {\n        getManagers().then(setManagers).catch(console.error);\n        getChatTypes().then(setChatTypes).catch(console.error);\n    }, []);\n\n\n    const richEditorRef = useRef<RichEditorHandle>(null)\n    const titleInputRef = useRef<HTMLInputElement>(null)\n    const [pickerOpen, setPickerOpen] = useState(false)\n\n    /* ───────── Template pre-fill ───────── */\n    const location = useLocation();\n    type LocationState = { template?: Post; openCreate?: true };\n    const {template, openCreate} = (location.state as LocationState) || {};\n\n    useEffect(() => {\n        if (openCreate) setActiveTab(\"create\");\n    }, [openCreate]);\n\n    useEffect(() => {\n        if (template) {\n            setTitle(template.name);\n            setEditorText(template.text);\n            setEditorHtml(template.html || \"\");\n            setEditorEntities(template.entities || []);\n            if (template.image_path) setPhotoPreview(template.image_path);\n            setIsTemplate(template.is_template);\n            setActiveTab(\"create\");\n        }\n    }, [template]);\n\n\n    /* ───────── Helpers ───────── */\n    function formatLocalDate(d: Date): string {\n        const Y = d.getFullYear();\n        const M = String(d.getMonth() + 1).padStart(2, \"0\");\n        const D = String(d.getDate()).padStart(2, \"0\");\n        return `${Y}-${M}-${D}`;        // YYYY-MM-DD (локальная дата)\n    }\n\n    function formatLocalTimeWithSeconds(d: Date): string {\n        const h = String(d.getHours()).padStart(2, \"0\");\n        const m = String(d.getMinutes()).padStart(2, \"0\");\n        return `${h}:${m}:00`;          // HH:mm:ss\n    }\n    const filteredChats = useMemo(\n        () =>\n            chats.filter((c) =>\n                c.name.toLowerCase().includes(chatSearch.trim().toLowerCase())\n            ),\n        [chatSearch, chats]\n    );\n\n    const groupedFilteredChats = useMemo(() => {\n        const byType = new Map<string, ChatItem[]>();\n        for (const chat of filteredChats) {\n            const typeId = chat.chat_type_id ?? \"__none__\";\n            if (!byType.has(typeId)) byType.set(typeId, []);\n            byType.get(typeId)!.push(chat);\n        }\n        const typeNameById = new Map<string, string>(chatTypes.map(ct => [ct.id, ct.name]));\n        const result = Array.from(byType.entries()).map(([typeId, list]) => ({\n            typeId,\n            typeName: typeId === \"__none__\" ? \"Без группы\" : (typeNameById.get(typeId) ?? \"Другая группа\"),\n            chats: list.sort((a, b) => a.name.localeCompare(b.name)),\n        }));\n        // сортируем группы: сначала именованные по алфавиту, затем \"Без группы\"\n        result.sort((a, b) => {\n            if (a.typeId === \"__none__\" && b.typeId !== \"__none__\") return 1;\n            if (a.typeId !== \"__none__\" && b.typeId === \"__none__\") return -1;\n            return a.typeName.localeCompare(b.typeName);\n        });\n        return result;\n    }, [filteredChats, chatTypes]);\n\n    const handleChatToggle = (chatId: string) => {\n        setSelectedChats((prev) =>\n            prev.includes(chatId) ? prev.filter((c) => c !== chatId) : [...prev, chatId]\n        );\n    };\n\n    /* ───────── Schedule fetch ───────── */\n    const fetchSchedule = useCallback(async () => {\n        try {\n            setIsLoading(true);\n            const raw = await getPostsToPublish();\n\n            // 1) общий фильтр по менеджеру/чат-типу/чату\n            const pre = raw\n                .filter(p => {\n                    if (managerFilter && p.responsible_manager_id !== managerFilter) return false;\n                    if (chatTypeFilter && !p.chats.some(c => c.chat_type_id === chatTypeFilter)) return false;\n                    if (chatFilter && !p.chats.some(c => c.id === chatFilter)) return false;\n                    return true;\n                });\n\n            // 2) собираем заголовки из уже вложенного p.post (избегаем N+1)\n            const titles = new Map<string, string>();\n            for (const p of pre) {\n                if (!titles.has(p.post_id) && p.post?.name) {\n                    titles.set(p.post_id, p.post.name);\n                }\n            }\n\n            const map: Record<string, EventItem[]> = {};\n\n            for (const p of pre) {\n                const base: EventItem = {\n                    id: p.id,\n                    postId: p.post_id,\n                    title: titles.get(p.post_id)!,\n                    time: p.scheduled_time.slice(0, 5),\n                    scheduledType: p.scheduled_type\n                };\n                const now = new Date();\n\n\n                if (p.scheduled_type === \"single\") {\n                    if (!p.scheduled_date) continue;\n                    const dt = new Date(`${p.scheduled_date}T${p.scheduled_time}`);\n                    if (dt < now) continue;            // <-- отрезаем прошлые\n                    const isoLocal = dt.toLocaleDateString(\"sv-SE\");\n                    map[isoLocal] = (map[isoLocal] || []).concat(base);\n                } else {\n                    for (let i = 0; i < 7; i++) {\n                        const baseDay = new Date();\n                        baseDay.setHours(0, 0, 0, 0);\n                        baseDay.setDate(baseDay.getDate() + i);\n                        const isoLocal = baseDay.toLocaleDateString(\"sv-SE\");\n                        const dt = new Date(`${isoLocal}T${p.scheduled_time}`);\n                        if (dt < now) continue;          // <-- отрезаем прошлые\n                        map[isoLocal] = (map[isoLocal] || []).concat(base);\n                    }\n                }\n\n            }\n\n            // 5) сортировка по времени\n            Object.values(map).forEach(arr =>\n                arr.sort((a, b) => a.time.localeCompare(b.time))\n            );\n\n            setSchedule(map);\n            const todayIsoSent = new Date().toLocaleDateString(\"sv-SE\");\n            setOpenDays(Object.fromEntries(Object.keys(map).map(d => [d, d === todayIsoSent])));\n        } catch (err) {\n            console.error(err);\n            alert(\"Не удалось загрузить запланированные посты\");\n        } finally {\n            setIsLoading(false);\n        }\n    }, [managerFilter, chatTypeFilter, chatFilter]);\n\n    const fetchSent = useCallback(async () => {\n        try {\n            setIsLoading(true);\n            const raw = await getPostsToPublish();\n\n            // 1) общий фильтр по менеджеру/чат-типу/чату\n            const pre = raw.filter(p => {\n                if (managerFilter && p.responsible_manager_id !== managerFilter) return false;\n                if (chatTypeFilter && !p.chats.some(c => c.chat_type_id === chatTypeFilter)) return false;\n                if (chatFilter && !p.chats.some(c => c.id === chatFilter)) return false;\n                return true;\n            });\n\n            // 2) собираем заголовки из вложенного p.post (без дополнительных запросов)\n            const titles = new Map<string, string>();\n            for (const p of pre) {\n                if (!titles.has(p.post_id) && p.post?.name) {\n                    titles.set(p.post_id, p.post.name);\n                }\n            }\n\n            const map: Record<string, EventItem[]> = {};\n            const now = new Date();\n\n\n            // 3) одиночные до текущего момента (прошедшие)\n            pre\n                .filter(p => p.scheduled_type === \"single\" && p.scheduled_date)\n                .forEach(p => {\n                    const dt = new Date(`${p.scheduled_date!}T${p.scheduled_time}`);\n                    if (dt >= now) return;           // <-- остаются только прошлые\n                    const iso = dt.toLocaleDateString(\"sv-SE\");\n                    map[iso] = (map[iso] || []).concat({\n                        id: p.id,\n                        postId: p.post_id,\n                        title: titles.get(p.post_id)!,\n                        time: p.scheduled_time.slice(0, 5),\n                        scheduledType: \"single\"\n                    });\n                });\n\n            // 4) ежедневные: сегодняшний день и предыдущие 6 (всего 7), но не раньше created_at записи\n            pre\n                .filter(p => p.scheduled_type === \"everyday\")\n                .forEach(p => {\n                    // дата создания записи — ограничиваем историю не старше неё\n                    const created = new Date(p.created_at);\n                    created.setHours(0, 0, 0, 0);\n                    // включаем сегодняшний день (i = 0), если время уже прошло\n                    for (let i = 0; i < 7; i++) {\n                        const baseDay = new Date();\n                        baseDay.setHours(0, 0, 0, 0);\n                        baseDay.setDate(baseDay.getDate() - i);\n                        if (baseDay < created) break;   // не показываем дни ранее создания записи\n                        const iso = baseDay.toLocaleDateString(\"sv-SE\");\n                        const dt = new Date(`${iso}T${p.scheduled_time}`);\n                        if (dt >= now) continue;       // <-- оставляем только прошлые\n                        map[iso] = (map[iso] || []).concat({\n                            id: p.id,\n                            postId: p.post_id,\n                            title: titles.get(p.post_id)!,\n                            time: p.scheduled_time.slice(0, 5),\n                            scheduledType: \"everyday\"\n                        });\n                    }\n                });\n\n            // 5) удаляем любые будущие даты (для вкладки «Отправленные» должны быть только прошедшие)\n            const todayIsoFilter = new Date().toLocaleDateString(\"sv-SE\");\n            Object.keys(map).forEach((iso) => {\n                if (iso > todayIsoFilter) delete map[iso];\n            });\n\n            // 6) сортировка\n            Object.values(map).forEach(arr =>\n                arr.sort((a, b) => a.time.localeCompare(b.time))\n            );\n\n            setSchedule(map);\n            const todayIsoOpen = new Date().toLocaleDateString(\"sv-SE\");\n            setOpenDays(Object.fromEntries(Object.keys(map).map(d => [d, d === todayIsoOpen])));\n        } catch (err) {\n            console.error(err);\n            alert(\"Не удалось загрузить отправленные посты\");\n        } finally {\n            setIsLoading(false);\n        }\n    }, [managerFilter, chatTypeFilter, chatFilter]);\n\n\n    useEffect(() => {\n        if (viewMode === \"scheduled\") {\n            fetchSchedule();\n        } else {\n            fetchSent();\n        }\n    }, [viewMode, fetchSchedule, fetchSent]);\n\n\n    /* ───────── Chats fetch ───────── */\n    const fetchChats = useCallback(async () => {\n        try {\n            const data = await getChats();\n            setChats(data);\n        } catch (err) {\n            console.error(\"Не удалось загрузить список чатов\", err);\n        }\n    }, []);\n\n    /* ───────── run fetches ───────── */\n    useEffect(() => {\n        fetchChats();\n    }, []);\n\n\n    /* ───────── Back button ───────── */\n    useEffect(() => {\n        const remove = on(\"back_button_pressed\", () => navigate(`/`));\n        return () => remove();\n    }, [navigate]);\n\n    /* ───────── Save Post ───────── */\n    const handleSave = async () => {\n        // Сбрасываем предыдущие ошибки\n        setTitleError(\"\");\n        setTextError(\"\");\n\n        // Валидация\n        let hasErrors = false;\n        if (!title.trim()) {\n            setTitleError(\"Введите название поста\");\n            hasErrors = true;\n        }\n        if (!editorText.trim()) {\n            setTextError(\"Введите текст поста\");\n            hasErrors = true;\n        }\n        if (scheduleType === \"once\" && !scheduledAt) {\n            alert(\"Выберите дату и время\");\n            return;\n        }\n        if (scheduleType === \"daily\" && !timeOnly) {\n            alert(\"Выберите время для ежедневной рассылки\");\n            return;\n        }\n        if (!userId) {\n            alert(\"Не удалось определить менеджера\");\n            return;\n        }\n        if (!responsibleManagerId) {\n            alert(\"Выберите ответственного менеджера\");\n            return;\n        }\n\n        if (hasErrors) {\n            // Фокусируемся на первом поле с ошибкой\n            if (!title.trim() && titleInputRef.current) {\n                titleInputRef.current.focus();\n            }\n            return;\n        }\n\n        try {\n            let postId: string;\n\n            if (template) {\n                // По желанию — обновляем сам шаблон\n                if (updateTemplate) {\n                    const entitiesChanged =\n                        JSON.stringify(editorEntities ?? []) !== JSON.stringify(template.entities ?? []);\n                    const htmlBaseline = template.html ?? template.text;\n                    await updatePost(\n                        template.id,\n                        title !== template.name ? title : undefined,\n                        isTemplate !== template.is_template ? isTemplate : undefined,\n                        editorText !== template.text ? editorText : undefined,\n                        editorHtml !== htmlBaseline ? editorHtml : undefined,\n                        entitiesChanged ? editorEntities : undefined,\n                        photoFile ?? undefined\n                    );\n                }\n\n                // Создаём копию под отправку (заморозка контента)\n                // Если новый файл не выбран, передадим image_path шаблона для сохранения фото\n                postId = await createPost(\n                    title,\n                    editorText,\n                    false, // клон для отправки не является шаблоном\n                    editorHtml,\n                    editorEntities,\n                    photoFile ?? undefined,\n                    (!photoFile && template.image_path) ? template.image_path : undefined,\n                );\n            } else {\n                // создаём обычный пост (как было)\n                postId = await createPost(\n                    title,\n                    editorText,\n                    isTemplate,\n                    editorHtml,\n                    editorEntities,\n                    photoFile ?? undefined,\n                    undefined,\n                );\n            }\n            let scheduled_date: string | null = null;\n            let scheduled_time: string;\n\n            if (scheduleType === \"once\") {\n                scheduled_date = formatLocalDate(scheduledAt!);\n                scheduled_time = formatLocalTimeWithSeconds(scheduledAt!);\n            } else {\n                scheduled_time = formatLocalTimeWithSeconds(timeOnly!);\n            }\n\n            const dto: CreatePostToPublishDTO = {\n                post_id: postId,\n                scheduled_type: scheduleType === \"once\" ? \"single\" : \"everyday\",\n                responsible_manager_id: responsibleManagerId,\n                scheduled_date,\n                scheduled_time,\n                chat_ids: selectedChats,\n                manager_id: userId,\n                status: \"pending\"\n            };\n\n            await createPostToPublish(dto);\n            await fetchSchedule();\n\n            /* reset */\n            setPhotoFile(null);\n            setPhotoPreview(null);\n            setTitle(\"\");\n            setTitleError(\"\");\n            setTextError(\"\");\n            setEditorText(\"\");\n            setEditorHtml(\"\");\n            setEditorEntities([]);\n            setScheduledAt(null);\n            setTimeOnly(null);\n            setScheduleType(\"once\");\n            setSelectedChats([]);\n            setIsTemplate(false);\n            setChatSearch(\"\");\n            setActiveTab(\"schedule\");\n        } catch (err) {\n            console.error(\"Ошибка при сохранении поста:\", err);\n            alert(\"Не удалось создать пост.\");\n        }\n    };\n\n\n    /* ───────── Delete Schedule Item ───────── */\n    const handleDelete = async (day: string, ev: EventItem) => {\n        if (!window.confirm(`Удалить пост «${ev.title}» из расписания?`)) return;\n        try {\n            await deletePostToPublish(ev.id);\n            setSchedule((prev) => {\n                const next = {...prev};\n                next[day] = next[day].filter((i) => i.id !== ev.id);\n                if (next[day].length === 0) delete next[day];\n                return next;\n            });\n        } catch {\n            alert(\"Ошибка при удалении.\");\n        }\n    };\n\n    const toggleDay = (d: string) =>\n        setOpenDays((o) => ({...o, [d]: !o[d]}));\n\n    /* ───────── UI ───────── */\n    return (\n        <div className=\"container mx-auto p-4 bg-brandlight min-h-screen\">\n\n\n            {/* ───────── Tabs ───────── */}\n            <div className=\"flex space-x-8 mb-6\">\n                {([\"schedule\", \"create\", \"templates\"] as const).map((tab) => (\n                    <button\n                        key={tab}\n                        onClick={() => {\n                            if (tab === \"templates\") navigate(\"/posts/templates\");\n                            else setActiveTab(tab);\n                        }}\n                        className={`transition pb-1 ${\n                            activeTab === tab\n                                ? \"text-xl font-semibold text-brand border-b-2 border-brand\"\n                                : \"text-xl text-gray-600\"\n                        }`}\n                    >\n                        {tab === \"schedule\" ? \"Расписание\" : tab === \"create\" ? \"Создать пост\" : \"Шаблоны\"}\n                    </button>\n                ))}\n            </div>\n\n            {/* ───────── Create tab ───────── */}\n            {activeTab === \"create\" && (\n                <div className=\"space-y-6 max-w-lg\">\n                    {/* Фото */}\n                    <FileUploader\n                        label=\"Фото поста\"\n                        file={photoFile}\n                        preview={photoPreview}\n                        onFileChange={(f) => {\n                            setPhotoFile(f)\n                            setPhotoPreview(f ? URL.createObjectURL(f) : null)\n                        }}\n                    />\n\n                    {/* Название */}\n                    <div>\n                        <label className=\"block mb-2 font-medium\">Название поста</label>\n                        <input\n                            ref={titleInputRef}\n                            type=\"text\"\n                            value={title}\n                            onChange={(e) => {\n                                setTitle(e.target.value);\n                                if (titleError) setTitleError(\"\"); // Сбрасываем ошибку при вводе\n                            }}\n                            className={`w-full border rounded p-2 focus:outline-none focus:ring-2 ${\n                                titleError\n                                    ? \"border-red-500 focus:ring-red-500\"\n                                    : \"border-brand focus:ring-brand\"\n                            }`}\n                        />\n                        {titleError && (\n                            <p className=\"mt-1 text-sm text-red-600\">{titleError}</p>\n                        )}\n                    </div>\n\n                    {/* Текст */}\n                    <div>\n                        <div className=\"relative\">\n                            <div className=\"flex items-center mb-2\">\n                                <label className=\"block mb-2 font-medium\">Текст поста</label>\n                                <button\n                                    type=\"button\"\n                                    onClick={() => setPickerOpen((o) => !o)}\n                                    className=\"ml-2 px-2 py-1 mb-2 rounded hover:bg-gray-200\"\n                                >\n                                    😊\n                                </button>\n                            </div>\n                        </div>\n                        <RichEditor\n                            ref={richEditorRef}\n                            emojis={emojis}\n                            initialContent={editorHtml}\n                            onChange={({html, text, entities}) => {\n                                setEditorHtml(html)\n                                setEditorText(text)\n                                setEditorEntities(entities)\n                                if (textError) setTextError(\"\"); // Сбрасываем ошибку при вводе\n                            }}\n                        />\n                        {textError && (\n                            <p className=\"mt-1 text-sm text-red-600\">{textError}</p>\n                        )}\n                        {pickerOpen && (\n\n                            <EmojiPicker\n                                emojis={emojis}\n                                onSelect={(emoji) => {\n                                    richEditorRef.current?.insertEmoji(emoji)\n                                    // setPickerOpen(false)\n                                }}\n                            />\n                        )}\n                    </div>\n\n                    {/* Ответственный менеджер */}\n                    <div>\n                        <label className=\"block mb-2 font-medium\">Ответственный менеджер</label>\n                        <select\n                            value={responsibleManagerId}\n                            onChange={(e) => setResponsibleManagerId(e.target.value)}\n                            className=\"w-full border border-brand rounded p-2 focus:outline-none focus:ring-2 focus:ring-brand\"\n                        >\n                            <option value=\"\" disabled>\n                                — выберите менеджера —\n                            </option>\n                            {managers.map((m) => (\n                                <option key={m.id} value={m.id}>\n                                    {m.telegram_username}\n                                </option>\n                            ))}\n                        </select>\n                    </div>\n\n                    {/* Тип рассылки */}\n                    <div>\n                        <label className=\"block mb-2 font-medium\">Тип рассылки</label>\n                        <div className=\"flex space-x-4\">\n                            <label className=\"flex items-center space-x-2\">\n                                <input\n                                    type=\"radio\"\n                                    name=\"scheduleType\"\n                                    value=\"once\"\n                                    checked={scheduleType === \"once\"}\n                                    onChange={() => setScheduleType(\"once\")}\n                                    className=\"form-radio h-4 w-4 text-brand\"\n                                />\n                                <span>В указанный день</span>\n                            </label>\n                            <label className=\"flex items-center space-x-2\">\n                                <input\n                                    type=\"radio\"\n                                    name=\"scheduleType\"\n                                    value=\"daily\"\n                                    checked={scheduleType === \"daily\"}\n                                    onChange={() => setScheduleType(\"daily\")}\n                                    className=\"form-radio h-4 w-4 text-brand\"\n                                />\n                                <span>Каждый день</span>\n                            </label>\n                        </div>\n                    </div>\n\n                    {/* Дата / Время */}\n                    {scheduleType === \"once\" ? (\n                        <div>\n                            <label className=\"block mb-2 font-medium\">Дата и время</label>\n                            <DatePicker\n                                selected={scheduledAt}\n                                onChange={setScheduledAt}\n                                showTimeSelect\n                                timeFormat=\"HH:mm\"\n                                timeIntervals={15}\n                                dateFormat=\"dd.MM.yyyy HH:mm\"\n                                placeholderText=\"Кликните для выбора\"\n                                popperPlacement=\"bottom-end\"\n                                popperClassName=\"datepicker-popper\"\n                                calendarClassName=\"datepicker-calendar\"\n                                className=\"w-full border border-brand rounded p-2 focus:outline-none focus:ring-2 focus:ring-brand\"\n                            />\n                        </div>\n                    ) : (\n                        <div>\n                            <label className=\"block mb-2 font-medium\">Время</label>\n                            <DatePicker\n                                selected={timeOnly}\n                                onChange={setTimeOnly}\n                                showTimeSelect\n                                showTimeSelectOnly\n                                timeIntervals={15}\n                                dateFormat=\"HH:mm\"\n                                placeholderText=\"Выберите время\"\n                                popperPlacement=\"bottom-end\"\n                                popperClassName=\"datepicker-popper\"\n                                calendarClassName=\"datepicker-calendar\"\n                                className=\"w-full border border-brand rounded p-2 focus:outline-none focus:ring-2 focus:ring-brand\"\n                            />\n                        </div>\n                    )}\n\n                    {/* Чаты */}\n                    <div>\n                        <label className=\"block mb-2 font-medium\">Чаты для отправки</label>\n                        <input\n                            type=\"text\"\n                            placeholder=\"Поиск чатов...\"\n                            value={chatSearch}\n                            onChange={(e) => setChatSearch(e.target.value)}\n                            className=\"w-full mb-2 border border-brand rounded p-2 focus:outline-none focus:ring-2 focus:ring-brand\"\n                        />\n                        <div className=\"max-h-60 overflow-y-auto space-y-3 border border-brand rounded p-2\">\n                            {groupedFilteredChats.map(group => (\n                                <div key={group.typeId}>\n                                    <div className=\"px-2 py-1 mb-2 text-xs font-semibold text-gray-700 bg-gray-100 rounded\">\n                                        {group.typeName}\n                                    </div>\n                                    <div className=\"space-y-2\">\n                                        {group.chats.map(({id, name}) => (\n                                            <label key={id} className=\"flex items-center space-x-2\">\n                                                <input\n                                                    type=\"checkbox\"\n                                                    checked={selectedChats.includes(id)}\n                                                    onChange={() => handleChatToggle(id)}\n                                                    className=\"form-checkbox h-5 w-5 text-brand focus:ring-brand\"\n                                                />\n                                                <span>{name}</span>\n                                            </label>\n                                        ))}\n                                    </div>\n                                </div>\n                            ))}\n                            {filteredChats.length === 0 && (\n                                <div className=\"text-gray-500 italic\">Чаты не найдены</div>\n                            )}\n                        </div>\n\n                    </div>\n                    {/* Сделать шаблоном (если не из шаблона) */}\n                    {!template?.is_template && (\n                        <div>\n                            <label className=\"flex items-center space-x-2 mt-2\">\n                                <input\n                                    type=\"checkbox\"\n                                    checked={isTemplate}\n                                    onChange={() => setIsTemplate(!isTemplate)}\n                                    className=\"form-checkbox h-5 w-5 text-brand focus:ring-brand\"\n                                />\n                                <span>Сделать шаблоном</span>\n                            </label>\n                        </div>\n                    )}\n\n                    {/* Если создаём из шаблона — опция обновить исходный шаблон */}\n                    {template && (\n                        <div>\n                            <label className=\"flex items-center space-x-2 mt-2\">\n                                <input\n                                    type=\"checkbox\"\n                                    checked={updateTemplate}\n                                    onChange={() => setUpdateTemplate(!updateTemplate)}\n                                    className=\"form-checkbox h-5 w-5 text-brand focus:ring-brand\"\n                                />\n                                <span>Обновить исходный шаблон текущим содержимым</span>\n                            </label>\n                        </div>\n                    )}\n\n                    {/* Сохранить */}\n                    <button\n                        onClick={handleSave}\n                        className=\"w-full py-3 bg-brand text-white rounded-lg shadow hover:bg-brand2 transition\"\n                    >\n                        Сохранить\n                    </button>\n                </div>\n            )}\n\n            {/* ───────── Schedule tab ───────── */}\n            {activeTab === \"schedule\" && (\n\n                <div className=\"space-y-4 text-brand\">\n                    {/* ───── Compact Filters Bar ───── */}\n                    <div\n  className=\"sticky top-0 z-[60] -mx-4 -mt-4 px-4 py-3 mb-3 bg-white rounded-xl shadow-md\"\n                    >\n                        <div className=\"flex items-center gap-3 flex-wrap\">\n                            {/* режим просмотра */}\n                            <select\n                                value={viewMode}\n                                onChange={e => setViewMode(e.target.value as \"scheduled\" | \"sent\")}\n                                className=\"h-9 text-sm border border-brand rounded-lg px-2 bg-white\"\n                            >\n                                <option value=\"scheduled\">— Запланированные —</option>\n                                <option value=\"sent\">— Отправленные —</option>\n                            </select>\n\n                            {/* Кнопка «Фильтры» с бейджем */}\n                            <button\n                                type=\"button\"\n                                onClick={() => setFiltersOpen(o => !o)}\n                                className=\"h-9 inline-flex items-center gap-2 rounded-lg border border-brand px-3 text-sm bg-white hover:bg-brand/10\"\n                            >\n                                <FiFilter className=\"w-4 h-4\"/>\n                                Фильтры\n                                {activeFiltersCount > 0 && (\n                                    <span\n                                        className=\"ml-1 inline-flex items-center justify-center text-xs rounded-full min-w-[20px] h-5 px-2 bg-brand text-white\">\n          {activeFiltersCount}\n        </span>\n                                )}\n                            </button>\n\n                            {/* Активные фильтры — чипы со сбросом по одному */}\n                            <div className=\"flex items-center gap-2 flex-wrap\">\n                                {managerFilter && (\n                                    <button\n                                        className=\"group inline-flex items-center gap-1 h-8 px-2 rounded-full border border-brand bg-white text-xs\"\n                                        onClick={() => setManagerFilter(\"\")}\n                                        title=\"Сбросить фильтр менеджера\"\n                                    >\n                                        <FiUser className=\"w-3.5 h-3.5 opacity-70\"/>\n                                        <span className=\"max-w-[140px] truncate\">@{managerName}</span>\n                                        <FiX className=\"w-3.5 h-3.5 opacity-60 group-hover:opacity-100\"/>\n                                    </button>\n                                )}\n                                {chatTypeFilter && (\n                                    <button\n                                        className=\"group inline-flex items-center gap-1 h-8 px-2 rounded-full border border-brand bg-white text-xs\"\n                                        onClick={() => setChatTypeFilter(\"\")}\n                                        title=\"Сбросить группу чатов\"\n                                    >\n                                        <FiLayers className=\"w-3.5 h-3.5 opacity-70\"/>\n                                        <span className=\"max-w-[140px] truncate\">{chatTypeName}</span>\n                                        <FiX className=\"w-3.5 h-3.5 opacity-60 group-hover:opacity-100\"/>\n                                    </button>\n                                )}\n                                {chatFilter && (\n                                    <button\n                                        className=\"group inline-flex items-center gap-1 h-8 px-2 rounded-full border border-brand bg-white text-xs\"\n                                        onClick={() => setChatFilter(\"\")}\n                                        title=\"Сбросить чат\"\n                                    >\n                                        <FiMessageSquare className=\"w-3.5 h-3.5 opacity-70\"/>\n                                        <span className=\"max-w-[160px] truncate\">{chatName}</span>\n                                        <FiX className=\"w-3.5 h-3.5 opacity-60 group-hover:opacity-100\"/>\n                                    </button>\n                                )}\n                                {(managerFilter || chatTypeFilter || chatFilter) && (\n                                    <button\n                                        onClick={() => {\n                                            setManagerFilter(\"\");\n                                            setChatTypeFilter(\"\");\n                                            setChatFilter(\"\");\n                                        }}\n                                        className=\"h-8 px-3 rounded-full bg-brand text-white text-xs\"\n                                    >\n                                        Сбросить всё\n                                    </button>\n                                )}\n                            </div>\n                        </div>\n\n                        {/* Секция выбора (на мобиле сворачиваемая, на md+ всегда видна) */}\n                        <div\n  className={`${filtersOpen ? \"mt-3\" : \"hidden\"} grid grid-cols-1 gap-2 md:grid md:grid-cols-3 bg-white p-2 rounded-xl border border-gray-200`}\n                        >\n                            {/* manager */}\n                            {role !== \"manager\" && (\n                                <div className=\"col-span-1\">\n                                    <label className=\"sr-only\">Менеджер</label>\n                                    <select\n                                        value={managerFilter}\n                                        onChange={(e) => setManagerFilter(e.target.value)}\n                                        className=\"h-9 w-full text-sm border border-brand rounded-lg px-2 bg-white\"\n                                    >\n                                        <option value=\"\">— все менеджеры —</option>\n                                        {managers.map((m) => (\n                                            <option key={m.id} value={m.id}>\n                                                {m.telegram_username}\n                                            </option>\n                                        ))}\n                                    </select>\n                                </div>\n                            )}\n\n                            {/* chat-type */}\n                            <div className=\"col-span-1\">\n                                <label className=\"sr-only\">Группа чатов</label>\n                                <select\n                                    value={chatTypeFilter}\n                                    onChange={(e) => setChatTypeFilter(e.target.value)}\n                                    className=\"h-9 w-full text-sm border border-brand rounded-lg px-2 bg-white\"\n                                >\n                                    <option value=\"\">— все группы чатов —</option>\n                                    {chatTypes.map((ct) => (\n                                        <option key={ct.id} value={ct.id}>\n                                            {ct.name}\n                                        </option>\n                                    ))}\n                                </select>\n                            </div>\n\n                            {/* chat */}\n                            <div className=\"col-span-1\">\n                                <label className=\"sr-only\">Чат</label>\n                                <select\n                                    value={chatFilter}\n                                    onChange={(e) => setChatFilter(e.target.value)}\n                                    className=\"h-9 w-full text-sm border border-brand rounded-lg px-2 bg-white\"\n                                >\n                                    <option value=\"\">— все чаты —</option>\n                                    {chats.map((c) => (\n                                        <option key={c.id} value={c.id}>\n                                            {c.name}\n                                        </option>\n                                    ))}\n                                </select>\n                            </div>\n                        </div>\n                    </div>\n\n\n                    {isLoading && (\n                        <div className=\"flex justify-center py-10\">\n                            <div className=\"h-10 w-10 border-4 border-brand border-t-transparent rounded-full animate-spin\" aria-label=\"Загрузка расписания\"/>\n                        </div>\n                    )}\n\n                    {!isLoading && Object.keys(schedule)\n                        .sort()\n                        .map((iso) => {\n                            const label = new Date(iso).toLocaleDateString(\"ru-RU\", {\n                                day: \"2-digit\",\n                                month: \"long\",\n                                year: \"numeric\"\n                            });\n                            return (\n                                <div key={iso} className=\"bg-brand-pink p-4 rounded-lg shadow\">\n                                    <div\n                                        className=\"flex justify-between items-center cursor-pointer\"\n                                        onClick={() => toggleDay(iso)}\n                                    >\n                                        <h2 className=\"text-xl font-semibold\">{label}</h2>\n                                        {openDays[iso] ? <FiChevronUp/> : <FiChevronDown/>}\n                                    </div>\n\n                                    {openDays[iso] && (\n                                        <ul className=\"mt-4 space-y-2\">\n                                            {schedule[iso].map((ev) => (\n                                                <li\n                                                    key={ev.id}\n                                                    className=\"flex items-center justify-between p-2 hover:bg-gray-100 rounded cursor-pointer\"\n                                                    onClick={() => navigate(`/post-details/${ev.id}`)}\n                                                >\n                          <span>\n                            <span className=\"font-medium\">{ev.time}</span> — {ev.title}\n                          </span>\n                                                    <img\n                                                        src=\"/icons/trash.png\"\n                                                        alt=\"Удалить\"\n                                                        className=\"h-5 w-5 opacity-60 hover:opacity-100\"\n                                                        onClick={(e) => {\n                                                            e.stopPropagation();\n                                                            handleDelete(iso, ev);\n                                                        }}\n                                                    />\n                                                </li>\n                                            ))}\n                                        </ul>\n                                    )}\n                                </div>\n                            );\n                        })}\n                </div>\n            )}\n        </div>\n    );\n}\n"
  },
  {
    "path": "admin/frontend/src/pages/HomePage.tsx",
    "content": "// src/pages/HomePage.tsx\nimport { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/auth';\n\nexport default function HomePage() {\n  const navigate = useNavigate();\n  const { role, loading, isBanned } = useAuth();\n\n  // Как только загрузился контекст и это обычный менеджер, сразу кидаем в /posts\n  useEffect(() => {\n    if (!loading && role === 'manager') {\n      navigate('/posts');\n    }\n  }, [loading, role, navigate]);\n\n  if (loading || isBanned) {\n    return (\n      <div className=\"container mx-auto flex items-center justify-center h-screen\">\n        Загрузка…\n      </div>\n    );\n  }\n\n\n  return (\n    <div className=\"container mx-auto flex flex-col items-center px-4 justify-center h-screen gap-8 bg-brandlight\">\n      <h1 className=\"text-3xl text-brand font-bold\">Админ Панель ♡</h1>\n      <div className=\"flex flex-col gap-4 w-full max-w-md\">\n        {role === 'admin' && (\n          <>\n            <button\n              onClick={() => navigate('/accounts')}\n              className=\"w-full py-6 text-xl bg-brandlight text-brand border border-brand rounded-lg shadow hover:bg-brand hover:text-brandlight transition\"\n            >\n              Управление пользователями\n            </button>\n            <button\n              onClick={() => navigate('/chats')}\n              className=\"w-full py-6 text-xl bg-brandlight text-brand border border-brand rounded-lg shadow hover:bg-brand hover:text-brandlight transition\"\n            >\n              Управление группами\n            </button>\n            <button\n              onClick={() => navigate('/posts')}\n              className=\"w-full py-6 text-xl bg-brandlight text-brand border border-brand rounded-lg shadow hover:bg-brand hover:text-brandlight transition\"\n            >\n              Расписание постов\n            </button>\n          </>\n        )}\n\n        {role === 'publications_manager' && (\n          <>\n            <button\n              onClick={() => navigate('/chats')}\n              className=\"w-full py-6 text-xl bg-brandlight text-brand border border-brand rounded-lg shadow hover:bg-brand hover:text-brandlight transition\"\n            >\n              Управление группами\n            </button>\n            <button\n              onClick={() => navigate('/posts')}\n              className=\"w-full py-6 text-xl bg-brandlight text-brand border border-brand rounded-lg shadow hover:bg-brand hover:text-brandlight transition\"\n            >\n              Расписание постов\n            </button>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n"
  },
  {
    "path": "admin/frontend/src/services/apiClient.ts",
    "content": "import axios, { AxiosError } from \"axios\";\nimport type { AxiosInstance } from \"axios\";\nimport createAuthRefreshInterceptor from \"axios-auth-refresh\";\n\nconst BASE_URL = import.meta.env.VITE_API_BASE || \"\";\n\nexport const apiClient: AxiosInstance = axios.create({\n    baseURL: BASE_URL,\n    headers: {\n        \"Content-Type\": \"application/json\",\n        \"ngrok-skip-browser-warning\": true\n    },\n});\n\ninterface RefreshedTokens {\n    access_token: string;\n    refresh_token: string;\n}\n\nfunction getAccessToken(): string | null {\n    return localStorage.getItem(\"authToken\");\n}\n\nfunction getRefreshToken(): string | null {\n    return localStorage.getItem(\"refreshToken\");\n}\n\nconst refreshAuthLogic = async (failedRequest: AxiosError) => {\n    try {\n        const refreshToken = getRefreshToken();\n        if (!refreshToken) throw new Error(\"No refresh token found\");\n\n        const response = await apiClient.post<RefreshedTokens>(\"/auth/refresh\", {}, {\n            headers: {\n                \"X-Refresh-Token\": refreshToken,\n            },\n        });\n\n        localStorage.setItem(\"authToken\", response.data.access_token);\n        localStorage.setItem(\"refreshToken\", response.data.refresh_token);\n\n        failedRequest.response!.config.headers[\"Authorization\"] = `Bearer ${response.data.access_token}`;\n        return Promise.resolve();\n    } catch (error) {\n        console.error(\"Failed to refresh token\", error);\n        localStorage.removeItem(\"authToken\");\n        localStorage.removeItem(\"refreshToken\");\n        return Promise.reject(error);\n    }\n};\n\ncreateAuthRefreshInterceptor(apiClient, refreshAuthLogic, {\n    pauseInstanceWhileRefreshing: true,\n});\n\napiClient.interceptors.request.use(\n    (config) => {\n        const token = getAccessToken();\n        if (token) {\n            config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n    },\n    (error) => Promise.reject(error)\n);\n\n// ─────────────────────────────────────────────────────────────────────────────\n// Простые ретраи для GET с экспоненциальной паузой\n// ─────────────────────────────────────────────────────────────────────────────\n\nfunction sleep(ms: number) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\ntype RetryOptions = {\n    retries?: number;\n    baseDelayMs?: number;\n    factor?: number;\n    jitterMs?: number;\n    retryOnStatus?: number[];\n};\n\nasync function getWithRetry<T>(\n    url: string,\n    config?: Parameters<AxiosInstance[\"get\"]>[1],\n    opts: RetryOptions = {}\n): Promise<T> {\n    const {\n        retries = 3,\n        baseDelayMs = 300,\n        factor = 2,\n        jitterMs = 120,\n        retryOnStatus = [408, 429, 500, 502, 503, 504],\n    } = opts;\n\n    let attempt = 0;\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        try {\n            const res = await apiClient.get<T>(url, config);\n            return res.data;\n        } catch (e) {\n            attempt += 1;\n            // если исчерпали попытки — пробрасываем ошибку\n            if (attempt > retries) throw e;\n\n            // определяем, стоит ли ретраить\n            if (axios.isAxiosError(e)) {\n                const status = e.response?.status;\n                const networkLike = !e.response; // таймаут/сеть/прерывание\n                const shouldRetry = networkLike || (status ? retryOnStatus.includes(status) : false);\n                if (!shouldRetry) throw e;\n            }\n\n            // backoff с небольшим джиттером\n            const delay = baseDelayMs * Math.pow(factor, attempt - 1) + Math.random() * jitterMs;\n            await sleep(delay);\n        }\n    }\n}\n\nexport { getWithRetry };\n"
  },
  {
    "path": "admin/frontend/src/services/api.tsx",
    "content": "import {apiClient, getWithRetry} from \"./apiClient\";\nimport type {MeResponse} from \"../types/MeResponse\";\nimport type {UserRole} from \"../types/UserRole\";\n\nexport interface Emoji {\n    id: string;\n    name: string;\n    img_url: string;\n    custom_emoji_id: string;\n    format: \"static\" | \"video\" | \"lottie\"\n}\n\nexport interface User {\n    id: string;\n    telegram_username: string;\n    role: UserRole\n    is_banned: boolean;\n}\n\nexport interface ChatItem {\n    id: string;\n    name: string;\n    responsible_manager_id: string;\n    chat_type_id: string;\n}\n\nexport interface Post {\n    id: string;\n    name: string;\n    text: string;\n    responsible_manager_id: string;\n    image_path: string | null;\n    html?: string | null;\n    entities?: MessageEntityDTO[];\n    is_template: boolean;\n}\n\nexport interface PostToPublish {\n    id: string;\n    post_id: string;\n    responsible_manager_id: string;\n    creator_id: string;\n    scheduled_type: \"everyday\" | \"single\";\n    scheduled_date: string | null;\n    scheduled_time: string;\n    status: string;\n    chats: { id: string; chat_id: string; name: string, chat_type_id: string, responsible_manager_id: string }[];  // если сервер отдаёт объекты\n    post: Post;\n    created_at: string;\n    updated_at: string;\n}\n\nexport interface CreatePostToPublishDTO {\n    post_id: string;\n    // бэкенд ожидает ScheduledType (\"everyday\" | \"single\")\n    scheduled_type: \"everyday\" | \"single\";\n    // формат YYYY-MM-DD, для daily — null/не указывать\n    scheduled_date?: string | null;\n    // формат HH:mm:ss\n    scheduled_time: string;\n    // бэкенд ожидает chat_ids: UUID[]\n    chat_ids?: string[];\n    // бэкенд также использует status/responsible_manager_id/creator_id внутри сервиса\n    responsible_manager_id?: string;\n    status?: string;\n}\n\nexport interface UpdateUserDTO {\n    role?: UserRole;\n    is_banned?: boolean;\n}\n\n// export interface Chat {\n//     id: string;\n//     name: string;\n//     chat_id: string;\n//     invite_link: string;\n// }\n\n/** Сущность для обновления записи «пост в расписании» */\nexport interface UpdatePostToPublishDTO {\n    /** ID сущности «пост в расписании», берётся из записи, а не из тела запроса */\n    post_id: string;\n    manager_id?: string;\n    scheduled_type?: \"single\" | \"everyday\";\n    /** формат YYYY-MM-DD */\n    scheduled_date?: string | null;\n    /** формат HH:mm:ss */\n    scheduled_time?: string;\n    chat_ids?: string[];\n    status?: string;\n}\n\n/** Сущность для обновления самого поста */\nexport interface UpdatePostDTO {\n    /** ID поста, берётся из записи и используется только для URL */\n    post_id: string;\n    name?: string;\n    text?: string;\n    is_template?: boolean;\n    /** путь к изображению, если нужно заменить или убрать */\n    image_path?: string | null;\n    /** HTML версия текста (если используете rich editor) */\n    html?: string | null;\n    /** массив MessageEntityDTO, если есть эмодзи/разметка */\n    entities?: MessageEntityDTO[];\n}\n\n/** Тип для сущности в тексте (копируйте из вашего MessageEntityDTO) */\nexport interface MessageEntityDTO {\n    type:\n        | \"custom_emoji\"\n        | \"bold\"\n        | \"italic\"\n        | \"underline\"\n        | \"strikethrough\"\n        | \"text_link\"\n        | \"blockquote\";\n    offset: number;\n    length: number;\n    custom_emoji_id?: string;\n    url?: string;\n}\n\n\nexport interface Chat {\n    id: string;\n    name: string;\n    chat_id: number;\n    invite_link?: string;\n    chat_type_id?: string | null;\n}\n\nexport interface CreateChatDTO {\n    invite_link: string;\n    chat_type_id: string;\n    responsible_manager_id: string;\n}\n\nexport interface UpdateChatDTO {\n    chat_type_id?: string | null;\n    invite_link?: string;\n}\n\nexport interface ChatType {\n    id: string;\n    name: string;\n    description: string;\n}\n\nexport interface CreateChatTypeDTO {\n    name: string;\n    description: string;\n}\n\nexport interface UpdateChatTypeDTO {\n    name?: string;\n    description?: string;\n}\n\nexport async function getChatTypes(): Promise<ChatType[]> {\n    return (await apiClient.get<ChatType[]>(`/chat_type`)).data;\n}\n\nexport async function createChatType(\n    payload: CreateChatTypeDTO\n): Promise<void> {\n    await apiClient.post(`/chat_type`, payload);\n}\n\nexport async function updateChatType(\n    id: string,\n    payload: UpdateChatTypeDTO\n): Promise<void> {\n    await apiClient.patch(`/chat_type/${id}`, payload);\n}\n\nexport async function deleteChatType(\n    id: string\n): Promise<void> {\n    await apiClient.delete(`/chat_type/${id}`);\n}\n\n\nexport async function getChatsByType(\n    typeId: string\n): Promise<Chat[]> {\n    return (\n        await apiClient.get<Chat[]>(`/chat/type/${typeId}`)\n    ).data;\n}\n\nexport async function createChat(\n    payload: CreateChatDTO\n): Promise<Chat> {\n    const {data} = await apiClient.post<Chat>(`/chat`, payload);\n    return data;\n}\n\nexport async function updateChat(\n    id: string,\n    payload: UpdateChatDTO\n): Promise<void> {\n    await apiClient.patch(`/chat/${id}`, payload);\n}\n\n/** 1) Создать сущность Post (multipart/form-data) */\nexport async function createPost(\n    name: string,\n    text: string,\n    is_template: boolean,\n    html: string,\n    entities: MessageEntityDTO[],\n    imageFile?: File,\n    imagePath?: string,\n): Promise<string> {\n    const form = new FormData();\n    form.append(\"name\", name);\n    form.append(\"text\", text);\n    form.append(\"is_template\", String(is_template));   // \"true\" | \"false\"\n    form.append(\"html\", html);\n    form.append(\"entities\", JSON.stringify(entities));\n    if (imageFile) form.append(\"image\", imageFile);\n    if (!imageFile && imagePath) form.append(\"image_path\", imagePath);\n\n    console.log('API_OUT', JSON.stringify(text), entities);\n    console.group('%ccreatePost FormData', 'color: purple; font-weight: bold;');\n    for (const [key, value] of Array.from(form.entries())) {\n        console.log(key, value);\n    }\n    console.groupEnd();\n\n    // Вернёт UUID созданного поста\n    const response = await apiClient.post<string>(\"post\", form, {\n        headers: {\"Content-Type\": \"multipart/form-data\"},\n    });\n    return response.data;\n}\n\n\nexport async function updatePost(\n    postId: string,\n    title?: string | null,\n    is_template?: boolean,\n    editorText?: string | null,\n    editorHtml?: string | null,\n    editorEntities?: MessageEntityDTO[] | null,\n    photoFile?: File | null\n) {\n    console.log('API updatePost called with:', { postId, title, is_template, editorText, editorHtml, hasEntities: !!editorEntities, hasPhoto: !!photoFile });\n    const form = new FormData()\n    if (title) form.append(\"name\", title);\n    if (editorText) form.append(\"text\", editorText);\n    if (is_template !== undefined) form.append(\"is_template\", String(is_template));\n    if (editorHtml) form.append(\"html\", editorHtml);\n    if (editorEntities) form.append('entities', JSON.stringify(editorEntities));\n    if (photoFile) form.append('image', photoFile);\n    console.log('API updatePost sending request to:', `/post/${postId}`);\n    const result = await apiClient.patch(`/post/${postId}`, form, {\n        headers: {\"Content-Type\": \"multipart/form-data\"},\n    });\n    console.log('API updatePost response:', result);\n    return result;\n}\n\nexport async function deleteChat(\n    id: string\n): Promise<void> {\n    await apiClient.delete(`/chat/${id}`);\n}\n\n/** 2) Создать запись поста для публикации */\nexport async function createPostToPublish(dto: CreatePostToPublishDTO): Promise<string> {\n    // Вернёт UUID записи в post-to-publish\n    const response = await apiClient.post<string>(\"post-to-publish\", dto);\n    return response.data;\n}\n\nexport async function updatePostToPublish(id: string, payload: UpdatePostToPublishDTO): Promise<void> {\n    console.log('API updatePostToPublish called with:', { id, payload });\n    const result = await apiClient.patch(`/post-to-publish/${id}`, payload);\n    console.log('API updatePostToPublish response:', result);\n}\n\nexport async function deletePostToPublish(postToPublishId: string) {\n    await apiClient.delete(\"/post-to-publish\", {\n        params: {post_to_publish_id: postToPublishId},\n    });\n}\n\nexport async function getMe(): Promise<MeResponse> {\n    return (await apiClient.get<MeResponse>(`users/me`)).data;\n}\n\nexport async function getUsers(): Promise<User[]> {\n    return (await apiClient.get(`users/all`)).data;\n}\n\nexport async function updateUser(\n    id: string,\n    payload: UpdateUserDTO\n): Promise<User> {\n    const {data} = await apiClient.patch<User>(`/users/${id}`, payload);\n    return data;\n}\n\nexport async function getManagers(): Promise<User[]> {\n    return (await apiClient.get(`users/managers`)).data;\n}\n\nexport async function deleteUser(userId: string) {\n    // формируем URL с query-параметром user_id\n    return (await apiClient.delete(`/users`, {\n        params: {user_id: userId}\n    })).data;\n}\n\nexport async function getPostsToPublish(): Promise<PostToPublish[]> {\n    // с ретраями для проблемной сети/телеги/интернета\n    return await getWithRetry<PostToPublish[]>(\"/post-to-publish/all\");\n}\n\nexport async function getPost(postId: string): Promise<Post> {\n    return await getWithRetry<Post>(\"post\", {params: {post_id: postId}});\n}\n\nexport async function getPosts(): Promise<Post[]> {\n    return await getWithRetry<Post[]>(\"post/all\");\n}\n\nexport async function getTemplates(): Promise<Post[]> {\n    return await getWithRetry<Post[]>(\"post/templates\");\n}\n\nexport async function getChats(): Promise<ChatItem[]> {\n    return await getWithRetry<ChatItem[]>(\"chat\");\n}\n\nexport type CreateChatByLinkDTO = {\n    invite_link: string;\n    manager_id: string;\n    chat_type_id?: string;\n}\n\nexport async function createChatByLink(dto: CreateChatByLinkDTO): Promise<ChatItem> {\n    const response = await apiClient.post<ChatItem>(\n        \"chat\",\n        dto,\n    );\n    return response.data;\n}\n\nexport async function getAuthCode(phone: string): Promise<void> {\n    await apiClient.get(\"/users/code\", {\n        params: {\n            phone,\n        }\n    });\n}\n\nexport async function sendAuthCode(phone: string, code: string, password?: string): Promise<void> {\n    await apiClient.post(\"/users/code\",\n        {\n            phone,\n            code,\n            password,\n        }\n    );\n}\n\nexport async function listEmojis(): Promise<Emoji[]> {\n    const res = (await apiClient.get<Emoji[]>('emoji')).data\n    console.log(\"emojis!!\", res);\n    return res;\n}\n\n\n/** Получить одну запись «PostToPublish» по её ID */\nexport async function getPostToPublish(\n    postToPublishId: string\n): Promise<PostToPublish> {\n    // backend: @router.get('') async def get_post_to_publish(post_to_publish_id: UUID)\n    // обычно это GET /post-to-publish?post_to_publish_id=...\n    return (\n        await apiClient.get<PostToPublish>(\"/post-to-publish\", {\n            params: {post_to_publish_id: postToPublishId},\n        })\n    ).data;\n}\n\n"
  },
  {
    "path": "admin/backend/requirements.txt",
    "content": "aiofiles==24.1.0\nalembic==1.16.1\nalembic-postgresql-enum==1.7.0\nannotated-types==0.7.0\nanyio==4.9.0\nAPScheduler==3.11.0\nasyncpg==0.30.0\ncertifi==2025.4.26\nclick==8.2.1\nfastapi==0.115.12\ngreenlet==3.2.2\nh11==0.16.0\nhttpcore==1.0.9\nhttpx==0.28.1\nidna==3.10\nMako==1.3.10\nMarkupSafe==3.0.2\npyaes==1.6.1\npyasn1==0.6.1\npydantic==2.11.5\npydantic-settings==2.9.1\npydantic_core==2.33.2\nPyJWT==2.10.1\npython-dotenv==1.1.0\npython-multipart==0.0.20\npython-socks==2.7.1\nrsa==4.9.1\nsniffio==1.3.1\nSQLAlchemy==2.0.41\nstarlette==0.46.2\nTelethon==1.40.0\ntyping-inspection==0.4.1\ntyping_extensions==4.13.2\ntzlocal==5.3.1\nuvicorn==0.34.2\n"
  },
  {
    "path": "admin/backend/Dockerfile",
    "content": "# worker-manager/Dockerfile\nARG PYTHON_VERSION=3.12.3\nFROM python:${PYTHON_VERSION}-slim AS builder\nENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1\n\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y gcc libpq-dev \\\n && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\n\n# 1) copy & install service deps + shared\nCOPY admin/backend/requirements.txt .\nCOPY shared/           ./shared\n\nRUN pip install --upgrade pip \\\n && pip install --prefix=/install -r requirements.txt \\\n && pip install --prefix=/install ./shared\n\n# ─── runtime ────────────────────────────────────────────────────\nFROM python:${PYTHON_VERSION}-slim AS runtime\nENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1\n# Set the TZ environment variable\nENV TZ=Europe/Moscow\n\n# Install tzdata, configure the timezone, and clean up\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends tzdata \\\n && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n && echo $TZ > /etc/timezone \\\n && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\n\n# bring in installed packages\nCOPY --from=builder /install /usr/local\n\n# copy your service code\nCOPY admin/backend/ .\n\nENTRYPOINT [\"uvicorn\", \"main:app\", \"--port\", \"8080\", \"--host\", \"0.0.0.0\"]\n"
  },
  {
    "path": "admin/backend/requests.txt",
    "content": "POST https://ai.avocado.ceo/api/post-to-publish 200\n\nRequest Data\n\n{\"post_id\":\"3243793b-dca3-4e58-900b-f404f39cdc3e\",\"scheduled_type\":\"single\",\"responsible_manager_id\":\"a9d9b221-8ccd-45fa-acd3-a5513161d79f\",\"scheduled_date\":\"2025-08-06\",\"scheduled_time\":\"02:15\",\"chat_ids\":[\"be6ffc15-665e-4c8d-8353-692b1754259c\"],\"manager_id\":\"3c70753e-829b-4418-b6b7-b25434e48b01\",\"status\":\"pending\"}\n\nRequest Headers\n\nAccept: application/json, text/plain, */*\nContent-Type: application/json\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIzYzcwNzUzZS04MjliLTQ0MTgtYjZiNy1iMjU0MzRlNDhiMDEiLCJleHAiOjE3NTQ1MjUzNjMsImlzcyI6ImFzc2lzdGFudC1hZG1pbi1iYWNrIiwiYXVkIjoiYXNzaXN0YW50LWFkbWluLWZyb250In0.QxUMJ2pwytKt84E-tH6KW40DuB_bi23PERXNEKlSaU4\nngrok-skip-browser-warning: true\n\nResponse Headers\n\naccess-control-allow-credentials: true\nconnection: keep-alive\ncontent-length: 38\ncontent-type: application/json\ndate: Tue, 05 Aug 2025 23\nserver: nginx/1.27.5\n\n\"4602f37f-dcb6-4b83-809b-c4fb7b24d83a\"\n\n\n\nPOST https://ai.avocado.ceo/api/post-to-publish 200\n\nRequest Data\n\n{\"post_id\":\"3243793b-dca3-4e58-900b-f404f39cdc3e\",\"scheduled_type\":\"single\",\"responsible_manager_id\":\"a9d9b221-8ccd-45fa-acd3-a5513161d79f\",\"scheduled_date\":\"2025-08-06\",\"scheduled_time\":\"02:15\",\"chat_ids\":[\"be6ffc15-665e-4c8d-8353-692b1754259c\"],\"manager_id\":\"3c70753e-829b-4418-b6b7-b25434e48b01\",\"status\":\"pending\"}\n\nRequest Headers\n\nAccept: application/json, text/plain, */*\nContent-Type: application/json\nAuthorization:\nngrok-skip-browser-warning: true\n\nResponse Headers\n\naccess-control-allow-credentials: true\nconnection: keep-alive\ncontent-length: 38\ncontent-type: application/json\ndate: Tue, 05 Aug 2025 23\nserver: nginx/1.27.5\n\n\"abf2d1fa-c249-4f39-b821-2530c8d7e63b\"\n"
  },
  {
    "path": "admin/backend/__init__.py",
    "content": ""
  },
  {
    "path": "admin/backend/main.py",
    "content": "import logging\nfrom contextlib import asynccontextmanager\nfrom typing import AsyncGenerator\n\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\n# from fastapi.openapi.utils import get_openapi\nfrom shared.infrastructure.main_db import init_db\nfrom settings import settings\nfrom middlewares.auth_middleware import check_for_auth\n# from middlewares import check_for_auth\nfrom routes import (\n    api_router,\n)\n\nlogger = logging.getLogger(__name__)\nlogging.basicConfig(\n    level=logging.INFO,\n    # level=logging.DEBUG if settings.environment.is_debug else logging.INFO,\n    format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n)\n\n\n@asynccontextmanager\nasync def lifespan(_) -> AsyncGenerator[None, None]:\n    init_db(settings.db.url)\n\n    yield\n\n\napp = FastAPI(lifespan=lifespan)\n\napp.middleware('http')(check_for_auth)\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=settings.jwt.allowed_origins,\n    allow_credentials=True,\n    allow_methods=[\"GET\", \"POST\", \"OPTIONS\", \"PATCH\", \"DELETE\"],\n    allow_headers=[\"*\"],\n)\n\napp.include_router(api_router)\n\n# def custom_openapi():\n#     if app.openapi_schema:\n#         return app.openapi_schema\n#     openapi_schema = get_openapi(\n#         title=\"Assistant Admin Panel API\",\n#         version=\"0.1.0\",\n#         description=\"meow\",\n#         routes=app.routes,\n#     )\n#     openapi_schema[\"components\"][\"securitySchemes\"] = {\n#         \"bearerAuth\": {\n#             \"type\": \"http\",\n#             \"scheme\": \"bearer\",\n#             \"bearerFormat\": \"JWT\",\n#         }\n#     }\n#     openapi_schema[\"security\"] = [{\"bearerAuth\": []}]\n#     app.openapi_schema = openapi_schema\n#     return app.openapi_schema\n#\n#\n# app.openapi = custom_openapi\n"
  },
  {
    "path": "admin/backend/requirements.in",
    "content": "uvicorn\npython-multipart\npyjwt"
  },
  {
    "path": "admin/backend/settings/service_account.py",
    "content": "from typing import Optional\n\nfrom pydantic import SecretStr, Field\nfrom shared.settings import AbstractSettings\n\n\nclass ServiceAccountSettings(AbstractSettings):\n    api_id: int\n    api_hash: str\n    session_string: SecretStr\n    proxy: Optional[str] = None\n    service_bot_token: SecretStr = Field(..., alias=\"SERVICE_BOT_TOKEN\")\n    use_bot_for_service: bool = False\n"
  },
  {
    "path": "admin/backend/settings/__init__.py",
    "content": "from pathlib import Path\n\nfrom pydantic import Field\nfrom pydantic_settings import SettingsConfigDict\n\nfrom shared.settings import AbstractSettings, JwtSettings, EnvironmentSettings, BotSettings\nfrom shared.infrastructure.main_db import MainDBSettings\n\nfrom .service_account import ServiceAccountSettings\n\n\nclass Settings(AbstractSettings):\n    db: MainDBSettings = Field(default_factory=MainDBSettings)\n    jwt: JwtSettings\n    environment: EnvironmentSettings\n    bot: BotSettings = Field(default_factory=BotSettings)\n    service_account: ServiceAccountSettings\n\n    model_config = SettingsConfigDict(\n        extra=\"ignore\",\n        json_file=Path(__file__).parent.parent / \"settings.json\",\n        json_file_encoding=\"utf-8\",\n    )\n\nsettings = Settings()\n"
  },
  {
    "path": "admin/backend/forms/update_post_form.py",
    "content": "from typing import Optional\n\nfrom fastapi import UploadFile\nfrom pydantic import BaseModel\n\n\nclass UpdatePostForm(BaseModel):\n    name: Optional[str] = None\n    text: Optional[str] = None\n    is_template: Optional[bool] = None\n    html: Optional[str] = None\n    entities: Optional[str] = None\n    image: Optional[UploadFile] = None\n"
  },
  {
    "path": "admin/backend/forms/auth_code_form.py",
    "content": "from domain.schemas.auth import Credentials\n\n\ndef auth_code_form(\n        credentials: Credentials\n) -> Credentials:\n    return credentials\n"
  },
  {
    "path": "admin/backend/middlewares/__init__.py",
    "content": "from .auth_middleware import check_for_auth\n"
  },
  {
    "path": "admin/backend/middlewares/auth_middleware.py",
    "content": "import logging\n\nfrom fastapi import Request\nfrom fastapi.responses import JSONResponse\nfrom shared.infrastructure.sqlalchemy import NotFoundException\n\nfrom dependencies.services.auth import get_auth_service\nfrom services.auth.exceptions import InvalidTokenException, ExpiredTokenException\nfrom services.exceptions import PermissionException, BannedUserException\n\n\nasync def check_for_auth(\n        request: Request,\n        call_next,\n):\n    url_path = request.url.path.replace(\"/api\", \"\")\n    if (\n            url_path.startswith(\"/auth\") or\n            url_path.startswith(\"/docs\") or\n            url_path.startswith(\"/openapi\") or\n            url_path.startswith(\"/upload\") or\n            request.method == 'OPTIONS'\n    ):\n        response = await call_next(request)\n        return response\n\n    if 'Authorization' not in request.headers:\n        return JSONResponse(\n            status_code=401,\n            content={\n                'detail': 'Token is empty',\n            }\n        )\n\n    access_token = request.headers['Authorization'].replace('Bearer ', '')\n\n    auth_service = get_auth_service()\n    try:\n        # user_id = UUID('')\n        user_id = await auth_service.get_user_id_from_jwt(access_token)\n    except Exception as e:\n        logging.getLogger(__name__).error(f\"fuuuck {access_token}\", exc_info=True)\n        code, detail = 401, 'Unknown authorization exception'\n        match e:\n            case InvalidTokenException():\n                detail = 'Token is invalid'\n            case ExpiredTokenException():\n                detail = 'Token is expired'\n            case NotFoundException():\n                detail = 'User ID found in token does not exist'\n            case BannedUserException():\n                detail = \"You're banned\"\n                code = 403\n\n        return JSONResponse(\n            status_code=code,\n            content={\n                'detail': detail,\n            }\n        )\n\n    request.scope['x_user_id'] = user_id\n    try:\n        response = await call_next(request)\n        return response\n    except PermissionException as e:\n        return JSONResponse(\n            status_code=403,\n            content={\n                'detail': \"You're lacking permissions to do this.\",\n            }\n        )\n"
  },
  {
    "path": "admin/backend/dependencies/__init__.py",
    "content": ""
  },
  {
    "path": "admin/backend/dependencies/services/post.py",
    "content": "from shared.dependencies.repositories import get_post_repository\n\nfrom abstractions.services.post import PostServiceInterface\nfrom dependencies.services.update_post import get_update_post_service\nfrom dependencies.services.upload import get_upload_service\nfrom services.post import PostService\n\n\ndef get_post_service() -> PostServiceInterface:\n    return PostService(\n        post_repository=get_post_repository(),\n        upload_service=get_upload_service(),\n        update_post_service=get_update_post_service()\n    )\n\n"
  },
  {
    "path": "admin/backend/dependencies/services/story.py",
    "content": "from shared.dependencies.repositories import get_story_repository\n\nfrom abstractions.services.story import StoryServiceInterface\nfrom services.story import StoryService\n\n\ndef get_story_service() -> StoryServiceInterface:\n    return StoryService(\n        story_repository=get_story_repository()\n    )\n\n"
  },
  {
    "path": "admin/backend/dependencies/services/user.py",
    "content": "from shared.dependencies.repositories import get_user_repository, get_proxy_repository\n\nfrom abstractions.services.user import UserServiceInterface\nfrom dependencies.services.telegram import get_telegram_service\nfrom services.user import UserService\n\n\ndef get_user_service() -> UserServiceInterface:\n    return UserService(\n        user_repository=get_user_repository(),\n        telegram_service=get_telegram_service(),\n        proxy_repository=get_proxy_repository(),\n    )"
  },
  {
    "path": "admin/backend/dependencies/services/story_to_publish.py",
    "content": "from shared.dependencies.repositories.story_to_publish import get_story_to_publish_repository\n\nfrom abstractions.services.story_to_publish import StoryToPublishServiceInterface\nfrom services.story_to_publish import StoryToPublishService\n\n\ndef get_story_to_publish_service() -> StoryToPublishServiceInterface:\n    return StoryToPublishService(\n        story_to_publish_repository=get_story_to_publish_repository()\n    )\n\n"
  },
  {
    "path": "admin/backend/dependencies/services/upload.py",
    "content": "from shared.abstractions.services import UploadServiceInterface\nfrom shared.dependencies.services import get_upload_service as get_base_upload_service\nfrom settings import settings\n\n\ndef get_upload_service() -> UploadServiceInterface:\n    return get_base_upload_service(\n        public_backend_base_url=settings.environment.api_host,\n    )\n"
  },
  {
    "path": "admin/backend/dependencies/services/telegram.py",
    "content": "from abstractions.services.telegram import TelegramServiceInterface\nfrom services.telegram import TelegramService\nfrom settings import settings\n\n\ndef get_telegram_service() -> TelegramServiceInterface:\n    return TelegramService(\n        api_id=settings.service_account.api_id,\n        api_hash=settings.service_account.api_hash,\n        service_session_string=settings.service_account.session_string.get_secret_value(),\n        proxy=settings.service_account.proxy,\n        service_bot_token=settings.service_account.service_bot_token.get_secret_value(),\n        use_bot_for_service=settings.service_account.use_bot_for_service,\n    )\n"
  },
  {
    "path": "admin/backend/dependencies/services/post_to_publish.py",
    "content": "from shared.dependencies.repositories.post_to_publish import get_post_to_publish_repository\n\nfrom abstractions.services.post_to_publish import PostToPublishServiceInterface\nfrom dependencies.services.upload import get_upload_service\nfrom dependencies.services.user import get_user_service\nfrom services.post_to_publish import PostToPublishService\n\n\ndef get_post_to_publish_service() -> PostToPublishServiceInterface:\n    return PostToPublishService(\n        post_to_publish_repository=get_post_to_publish_repository(),\n        upload_service=get_upload_service(),\n        user_service=get_user_service()\n    )\n\n"
  },
  {
    "path": "admin/backend/dependencies/services/__init__.py",
    "content": ""
  },
  {
    "path": "admin/backend/dependencies/services/chat_type.py",
    "content": "from shared.dependencies.repositories.chat_type import get_chat_type_repository\n\nfrom abstractions.services.chat_type import ChatTypeServiceInterface\nfrom services.chat_type import ChatTypeService\n\n\ndef get_chat_type_service() -> ChatTypeServiceInterface:\n    return ChatTypeService(\n        chats_type_repository=get_chat_type_repository()\n    )\n"
  },
  {
    "path": "admin/backend/dependencies/services/chat.py",
    "content": "from shared.dependencies.repositories import get_chat_repository\n\nfrom abstractions.services.chat import ChatServiceInterface\nfrom dependencies.services.telegram import get_telegram_service\nfrom services.chat import ChatService\n\n\ndef get_chat_service() -> ChatServiceInterface:\n    return ChatService(\n        chats_repository=get_chat_repository(),\n        telegram_service=get_telegram_service(),\n    )\n"
  },
  {
    "path": "admin/backend/dependencies/services/update_post.py",
    "content": "from shared.dependencies.repositories.update_post import get_update_post_repository\n\nfrom abstractions.services.update_post import UpdatePostServiceInterface\nfrom services.update_post import UpdatePostService\n\n\ndef get_update_post_service() -> UpdatePostServiceInterface:\n    return UpdatePostService(\n        update_post_repository=get_update_post_repository()\n    )\n"
  },
  {
    "path": "admin/backend/dependencies/services/auth/service.py",
    "content": "from abstractions.services.auth.service import AuthServiceInterface\nfrom dependencies.services.auth.token import get_token_service\nfrom dependencies.services.user import get_user_service\nfrom services.auth.service import AuthService\nfrom settings import settings\n\n\ndef get_auth_service() -> AuthServiceInterface:\n    return AuthService(\n        bot_token=settings.bot.token.get_secret_value(),\n        token_service=get_token_service(),\n        user_service=get_user_service()\n    )\n"
  },
  {
    "path": "admin/backend/dependencies/services/auth/token.py",
    "content": "from abstractions.services.auth.tokens import TokenServiceInterface\nfrom services.auth.tokens import TokenService\nfrom settings import settings\n\n\ndef get_token_service() -> TokenServiceInterface:\n    return TokenService(\n        jwt_settings=settings.jwt\n    )\n"
  },
  {
    "path": "admin/backend/dependencies/services/auth/__init__.py",
    "content": "from .service import get_auth_service\n"
  },
  {
    "path": "admin/backend/abstractions/__init__.py",
    "content": ""
  },
  {
    "path": "admin/backend/abstractions/services/post.py",
    "content": "from abc import ABC, abstractmethod\nfrom typing import List\nfrom uuid import UUID\n\nfrom shared.domain.dto import CreatePostDTO, UpdatePostDTO\nfrom shared.domain.models import post, Post\n\n\nclass PostServiceInterface(ABC):\n\n    @abstractmethod\n    async def get_all_posts(self) -> List[post]:\n        ...\n\n    @abstractmethod\n    async def get_templates(self) -> List[post]:\n        ...\n\n    @abstractmethod\n    async def create_post(self, post: CreatePostDTO, author_id: UUID) -> UUID:\n        ...\n\n    @abstractmethod\n    async def get_post(self, post_id: UUID) -> post:\n        ...\n\n    @abstractmethod\n    async def update_post(self, post_id: UUID, post: UpdatePostDTO, author_id: UUID) -> Post:\n        ...\n\n    @abstractmethod\n    async def delete_post(self, post_id: UUID) -> None:\n        ...\n"
  },
  {
    "path": "admin/backend/abstractions/services/story.py",
    "content": "from abc import ABC, abstractmethod\nfrom typing import List\nfrom uuid import UUID\n\nfrom shared.domain.dto.story import CreateStoryDTO, UpdateStoryDTO\nfrom shared.domain.models.story import Story\n\n\nclass StoryServiceInterface(ABC):\n\n    @abstractmethod\n    async def get_all_stories(self) -> List[Story]:\n        ...\n\n    @abstractmethod\n    async def create_story(self, story: CreateStoryDTO) -> UUID:\n        ...\n\n    @abstractmethod\n    async def get_story(self, story_id: UUID) -> Story:\n        ...\n\n    @abstractmethod\n    async def update_story(self, story_id: UUID, story: UpdateStoryDTO) -> None:\n        ...\n\n    @abstractmethod\n    async def delete_story(self, story_id: UUID) -> None:\n        ...\n\n"
  },
  {
    "path": "admin/backend/abstractions/services/user.py",
    "content": "from abc import ABC, abstractmethod\nfrom typing import List, Optional\nfrom uuid import UUID\n\nfrom shared.domain.dto import CreateUserDTO, UpdateUserDTO\nfrom shared.domain.models import User\n\n\nclass UserServiceInterface(ABC):\n    @abstractmethod\n    async def get_all_users(self) -> List[User]:\n        (...\n\n    @abstractmethod)\n    async def get_managers(self) -> List[User]:\n        ...\n\n    @abstractmethod\n    async def create_user(self, user: CreateUserDTO) -> UUID:\n        ...\n\n    @abstractmethod\n    async def get_user(self, user_id: UUID) -> User:\n        ...\n\n    @abstractmethod\n    async def get_user_by_telegram_id(self, telegram_id: int) -> User:\n        ...\n\n    @abstractmethod\n    async def update_user(self, user_id: UUID, user: UpdateUserDTO) -> User:\n        ...\n\n    @abstractmethod\n    async def delete_user(self, user_id: UUID) -> None:\n        ...\n\n    @abstractmethod\n    async def ensure_user(self, dto: CreateUserDTO) -> User:\n        ...\n\n    @abstractmethod\n    async def send_auth_code(self, user_id: UUID, phone: str) -> None:\n        ...\n\n    @abstractmethod\n    async def get_session_string_for_user(\n            self,\n            phone: str,\n            code: str,\n            user_id: UUID,\n            password: Optional[str] = None,\n    ) -> None:\n        ...\n"
  },
  {
    "path": "admin/backend/abstractions/services/story_to_publish.py",
    "content": "from abc import ABC, abstractmethod\nfrom typing import List\nfrom uuid import UUID\n\nfrom shared.domain.dto.story_to_publish import CreateStoryToPublishDTO, UpdateStoryToPublishDTO\nfrom shared.domain.models.story import Story\n\n\nclass StoryToPublishServiceInterface(ABC):\n\n    @abstractmethod\n    async def get_all_stories_to_publish(self) -> List[Story]:\n        ...\n\n    @abstractmethod\n    async def create_story_to_publish(self, story_to_publish: CreateStoryToPublishDTO) -> UUID:\n        ...\n\n    @abstractmethod\n    async def get_story_to_publish(self, story_to_publish_id: UUID) -> Story:\n        ...\n\n    @abstractmethod\n    async def update_story_to_publish(self, story_to_publish_id: UUID, story_to_publish: UpdateStoryToPublishDTO) -> None:\n        ...\n\n    @abstractmethod\n    async def delete_story_to_publish(self, story_to_publish_id: UUID) -> None:\n        ...\n\n"
  },
  {
    "path": "admin/backend/abstractions/services/telegram.py",
    "content": "from abc import ABC, abstractmethod\nfrom typing import Optional\n\nfrom domain.models.chat import TelegramChatInfo\n\n\nclass TelegramServiceInterface(ABC):\n    @abstractmethod\n    async def get_chat_info(self, invite_link: str) -> TelegramChatInfo:\n        ...\n\n    @abstractmethod\n    async def send_auth_code(self, phone: str, proxy: Optional[str] = None) -> None:\n        ...\n\n    @abstractmethod\n    async def get_session_string(\n            self,\n            phone: str,\n            code: str,\n            proxy: Optional[str] = None,\n            password: Optional[str] = None,\n    ) -> str:\n        ...\n"
  },
  {
    "path": "admin/backend/abstractions/services/post_to_publish.py",
    "content": "from abc import ABC, abstractmethod\nfrom typing import List\nfrom uuid import UUID\n\nfrom shared.domain.dto.post_to_publish import CreatePostToPublishDTO, UpdatePostToPublishDTO\nfrom shared.domain.models.post_to_publish import PostToPublish\n\n\nclass PostToPublishServiceInterface(ABC):\n\n    @abstractmethod\n    async def get_posts_to_publish(self, user_id: UUID) -> List[PostToPublish]:\n        ...\n\n    @abstractmethod\n    async def create_post_to_publish(self, post_to_publish: CreatePostToPublishDTO) -> UUID:\n        ...\n\n    @abstractmethod\n    async def get_post_to_publish(self, post_to_publish_id: UUID) -> PostToPublish:\n        ...\n\n    @abstractmethod\n    async def update_post_to_publish(self, post_to_publish_id: UUID, post_to_publish: UpdatePostToPublishDTO) -> None:\n        ...\n\n    @abstractmethod\n    async def delete_post_to_publish(self, post_to_publish_id: UUID) -> None:\n        ..."
  },
  {
    "path": "admin/backend/abstractions/services/__init__.py",
    "content": ""
  },
  {
    "path": "admin/backend/abstractions/services/chat_type.py",
    "content": "from abc import ABC, abstractmethod\nfrom uuid import UUID\n\nfrom shared.domain.dto.chat_type import CreateChatTypeDTO, UpdateChatTypeDTO\nfrom shared.domain.models.chat_type import ChatType\n\n\nclass ChatTypeServiceInterface(ABC):\n\n    @abstractmethod\n    async def create_chat_type(self, chat_type: CreateChatTypeDTO) -> UUID:\n        ...\n\n    @abstractmethod\n    async def get_chats_types(self) -> list[ChatType]:\n        ...\n\n    @abstractmethod\n    async def get_chat_type(self, chat_type_id: UUID) -> ChatType:\n        ...\n\n    @abstractmethod\n    async def delete_chat_type(self, chat_type_id: UUID) -> None:\n        ...\n\n    @abstractmethod\n    async def update_chat_type(self, chat_type_id: UUID, chat_type: UpdateChatTypeDTO) -> ChatType:\n        ...\n\n\n\n\n"
  },
  {
    "path": "admin/backend/abstractions/services/chat.py",
    "content": "from abc import ABC, abstractmethod\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom shared.domain.dto import UpdateChatDTO\nfrom shared.domain.models import Chat\n\n\nclass ChatServiceInterface(ABC):\n\n    @abstractmethod\n    async def get_chats(self) -> list[Chat]:\n        ...\n\n    @abstractmethod\n    async def update_chat(self, chat_id: UUID, chat: UpdateChatDTO) -> Chat:\n        ...\n\n    @abstractmethod\n    async def delete_chat(self, chat_id: UUID) -> None:\n        ...\n\n    @abstractmethod\n    async def get_chats_by_type(self, type_id: UUID) -> list[Chat]:\n        ...\n\n    @abstractmethod\n    async def create_chat_by_link(\n            self,\n            invite_link: str,\n            manager_id: UUID,\n            type_id: Optional[UUID] = None,\n    ) -> Chat:\n        ...\n"
  },
  {
    "path": "admin/backend/abstractions/services/exceptions.py",
    "content": "class WrongCredentialsException(Exception):\n    ...\n\n\nclass InvalidTokensException(Exception):\n    ..."
  },
  {
    "path": "admin/backend/abstractions/services/analytics.py",
    "content": "from abc import ABC\nfrom typing import List, Optional\nfrom uuid import UUID\n\nfrom shared.domain.models.analytics_service import Service\n\n\nclass AnalyticsServiceServiceInterface(ABC):\n\n    async def get_all_services(self) -> List[Service]:\n        ...\n\n    async def get_available_services(self) -> Optional[List[Service]]:\n        ...\n\n    async def update_service_active_status(self, svc_id: UUID, new_status: bool) -> None:\n        ...\n"
  },
  {
    "path": "admin/backend/abstractions/services/update_post.py",
    "content": "from abc import ABC, abstractmethod\n\nfrom shared.domain.dto.update_post import CreateUpdatePostDTO, UpdateUpdatePostDTO\nfrom shared.domain.models.update_post import UpdatePost\n\n\nclass UpdatePostServiceInterface(ABC):\n\n    @abstractmethod\n    async def create_update_post(self, post: CreateUpdatePostDTO) -> UpdatePost:\n        ...\n"
  },
  {
    "path": "admin/backend/abstractions/services/gpt.py",
    "content": "from abc import ABC\nfrom uuid import UUID\n\n\nclass GPTServiceInterface(ABC):\n    openai_api_key: str\n\n    async def start_gpt_conversation(self, user_id: int):\n        ...\n\n    async def get_gpt_response(self, user_id: UUID, user_input: str):\n        ...\n\n    async def end_conversation(self, user_id: int):\n        ...\n\n    async def ask(self, instructions: str, input: str) -> str:\n        ...\n"
  },
  {
    "path": "admin/backend/abstractions/services/auth/service.py",
    "content": "from abc import ABC, abstractmethod\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom domain.responses.auth import AuthTokens\n\n\nclass AuthServiceInterface(ABC):\n    @abstractmethod\n    async def get_user_id_from_jwt(self, token: str) -> UUID:\n        ...\n\n    @abstractmethod\n    async def create_token(self, init_data: str) -> AuthTokens:\n        ...\n\n    @abstractmethod\n    async def refresh_token(self, refresh_token: str) -> AuthTokens:\n        ...\n"
  },
  {
    "path": "admin/backend/abstractions/services/auth/__init__.py",
    "content": ""
  },
  {
    "path": "admin/backend/abstractions/services/auth/tokens.py",
    "content": "import logging\nfrom abc import ABC, abstractmethod\n\nfrom domain.responses.auth import AuthTokens\n\nlogger = logging.getLogger(__name__)\n\n\nclass TokenServiceInterface(ABC):\n    @abstractmethod\n    def get_token_payload(self, token: str) -> dict:\n        ...\n\n    @abstractmethod\n    def create_auth_token(self, user_id: str) -> AuthTokens:\n        ...\n"
  },
  {
    "path": "admin/backend/domain/__init__.py",
    "content": ""
  },
  {
    "path": "admin/backend/domain/dto/auth.py",
    "content": "from pydantic import BaseModel, SecretStr, field_serializer, Field\n\n\nclass Credentials(BaseModel):\n    username: str\n    password: str\n\n\nclass AuthTokens(BaseModel):\n    access_token: SecretStr = Field(..., serialization_alias='accessToken')\n    refresh_token: SecretStr = Field(..., serialization_alias='refreshToken')\n\n    @field_serializer('access_token', 'refresh_token')\n    def dump_secret(self, v):\n        return v.get_secret_value()\n"
  },
  {
    "path": "admin/backend/domain/dto/__init__.py",
    "content": ""
  },
  {
    "path": "admin/backend/domain/dto/сhat.py",
    "content": "from pydantic import BaseModel\n\n\nclass CreateChatRequest(BaseModel):\n    invite_link: str"
  },
  {
    "path": "admin/backend/domain/dto/base.py",
    "content": "from datetime import datetime\nfrom typing import Optional\nfrom uuid import UUID, uuid4\n\nfrom pydantic import BaseModel, Field\n\n\nclass CreateDTO(BaseModel):\n    id: UUID = Field(default_factory=uuid4)\n    created_at: datetime = Field(default_factory=datetime.now)\n    updated_at: datetime = Field(default_factory=datetime.now)\n\nclass UpdateDTO(BaseModel):\n    updated_at: Optional[datetime] = Field(default_factory=datetime.now)"
  },
  {
    "path": "admin/backend/domain/responses/auth.py",
    "content": "from pydantic import BaseModel, Field\n\n\nclass AuthTokens(BaseModel):\n    access_token: str\n    refresh_token: str\n"
  },
  {
    "path": "admin/backend/domain/models/abstract.py",
    "content": "from datetime import datetime\nfrom uuid import UUID\n\nfrom pydantic import BaseModel\n\n\nclass Model(BaseModel):\n    id: UUID\n    created_at: datetime\n    updated_at: datetime\n"
  },
  {
    "path": "admin/backend/domain/models/__init__.py",
    "content": ""
  },
  {
    "path": "admin/backend/domain/models/chat.py",
    "content": "from pydantic import BaseModel\n\n\nclass TelegramChatInfo(BaseModel):\n    id: int\n    title: str\n    members_count: int\n"
  },
  {
    "path": "admin/backend/domain/schemas/auth.py",
    "content": "from pydantic import BaseModel\n\n\nclass Credentials(BaseModel):\n    auth_code: str\n\nclass Tokens(BaseModel):\n    access_token: str\n"
  },
  {
    "path": "admin/backend/routes/__init__.py",
    "content": "from .api import router as api_router\n"
  },
  {
    "path": "admin/backend/routes/utils/__init__.py",
    "content": "from typing import Optional\nfrom uuid import UUID\n\nfrom fastapi import Request\n\n\ndef get_user_id_from_request(request: Request) -> Optional[UUID]:\n    return request.scope.get('x_user_id', None)\n"
  },
  {
    "path": "admin/backend/routes/requests/auth.py",
    "content": "from typing import Optional\nfrom uuid import UUID\n\nfrom pydantic import BaseModel\n\n\nclass TelegramAuthRequest(BaseModel):\n    initData: str\n    ref: Optional[UUID] = None\n"
  },
  {
    "path": "admin/backend/routes/requests/user.py",
    "content": "from pydantic import BaseModel\n\n\nclass VerifyAuthCodeRequest(BaseModel):\n    phone: str\n    code: str\n    password: str\n"
  },
  {
    "path": "admin/backend/routes/api/post.py",
    "content": "import json\nimport logging\nfrom typing import Optional, Annotated\nfrom uuid import UUID\n\nfrom fastapi import APIRouter, Form, UploadFile, File, Depends, HTTPException, Request, Response\nfrom shared.abstractions.services import UploadServiceInterface\nfrom shared.domain.dto import UpdatePostDTO, CreatePostDTO\nfrom shared.domain.dto.post_to_publish import MessageEntityDTO\nfrom shared.domain.models import Post\n\nfrom dependencies.services.post import get_post_service\nfrom dependencies.services.upload import get_upload_service\nfrom forms.update_post_form import UpdatePostForm\nfrom routes.utils import get_user_id_from_request\n\nrouter = APIRouter(\n    prefix=\"/post\",\n    tags=[\"post\"],\n)\n\nlogger = logging.getLogger(__name__)\n\n\n@router.post('')\nasync def create_post(\n        request: Request,\n        name: str = Form(...),\n        text: str = Form(...),\n        html: str = Form(...),\n        is_template: bool = Form(...),\n        entities: str = Form(...),\n        image: Optional[UploadFile] = File(None),\n        # allow cloning existing image by passing its stored filename\n        image_path: Optional[str] = Form(None),\n        upload_service: UploadServiceInterface = Depends(get_upload_service),\n) -> UUID:\n    author_id = get_user_id_from_request(request)\n    post_service = get_post_service()\n    image_filename: Optional[str] = None\n    if image is not None:\n        try:\n            extension = upload_service.get_extension(image.filename)\n            image_filename = await upload_service.upload(image.file.read(), extension)\n        except Exception as e:\n            raise HTTPException(\n                status_code=500,\n                detail=\"Не удалось сохранить файл\"\n            ) from e\n    elif image_path:\n        # clone existing stored filename (no upload). Accept raw filename or full URL.\n        try:\n            # avoid importing os.path just for basename; simple split works\n            image_filename = image_path.split('/')[-1]\n        except Exception:\n            image_filename = image_path\n\n    dsrslzd_entities = json.loads(entities)\n    entities = [MessageEntityDTO.model_validate(e) for e in dsrslzd_entities]\n\n    post = CreatePostDTO(\n        name=name,\n        text=text,\n        is_template=is_template,\n        image_path=image_filename,\n        html=html,\n        entities=entities,\n    )\n    return await post_service.create_post(post=post, author_id=author_id)\n\n\n@router.get('/all')\nasync def get_post():\n    post_service = get_post_service()\n    return await post_service.get_all_posts()\n\n\n@router.get('/templates')\nasync def get_templates():\n    post_service = get_post_service()\n    return await post_service.get_templates()\n\n\n@router.get('')\nasync def get_post(post_id: UUID):\n    post_service = get_post_service()\n    return await post_service.get_post(post_id=post_id)\n\n\n@router.patch('/{post_id}')\nasync def update_post(\n        request: Request,\n        post_id: UUID,\n        data: Annotated[UpdatePostForm, Form()],\n        upload_service: UploadServiceInterface = Depends(get_upload_service),\n) -> Post:\n    author_id = get_user_id_from_request(request)\n    post_service = get_post_service()\n\n    data_dump = data.model_dump(exclude_unset=True)\n\n    if data.image:\n        extension = upload_service.get_extension(data.image.filename)\n        image_path = await upload_service.upload(data.image.file.read(), extension)\n        data_dump[\"image_path\"] = image_path\n\n    if data.entities:\n        entities = [MessageEntityDTO.model_validate(e) for e in json.loads(data.entities)]\n        data_dump[\"entities\"] = entities\n\n    post_dto = UpdatePostDTO.model_validate(data_dump)\n\n    return await post_service.update_post(post_id=post_id, post=post_dto, author_id=author_id)\n\n\n@router.delete('/')\nasync def delete_post(post_id: UUID):\n    post_service = get_post_service()\n    return await post_service.delete_post(post_id=post_id)\n"
  },
  {
    "path": "admin/backend/routes/api/story.py",
    "content": "import logging\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom fastapi import APIRouter, Form, UploadFile, File, Depends, HTTPException\nfrom shared.abstractions.services import UploadServiceInterface\nfrom shared.domain.dto.story import CreateStoryDTO, UpdateStoryDTO\n\nfrom dependencies.services.story import get_story_service\nfrom dependencies.services.upload import get_upload_service\n\nrouter = APIRouter(\n    prefix=\"/story\",\n    tags=[\"story\"],\n)\n\nlogger = logging.getLogger(__name__)\n\n\n@router.post('')\nasync def create_story(\n        name: str = Form(...),\n        text: str = Form(...),\n        image: Optional[UploadFile] = File(None),\n        upload_service: UploadServiceInterface = Depends(get_upload_service),\n) -> UUID:\n    story_service = get_story_service()\n    image_path = None\n    if image is not None:\n        try:\n            extension = upload_service.get_extension(image.filename)\n            image_path = await upload_service.upload(image.file.read(), extension)\n        except Exception as e:\n            raise HTTPException(\n                status_code=500,\n                detail=\"Не удалось сохранить файл\"\n            ) from e\n    else:\n        logger.error(\"ATTENTION!!! IMAGE IS NONE\")\n\n    story = CreateStoryDTO(\n        name=name,\n        text=text,\n        file_path=image_path,\n    )\n    return await story_service.create_story(story=story)\n\n\n@router.get('/all')\nasync def get_stories():\n    story_service = get_story_service()\n    return await story_service.get_all_stories()\n\n\n@router.get('')\nasync def get_story(story_id: UUID):\n    story_service = get_story_service()\n    return await story_service.get_story(story_id=story_id)\n\n\n@router.patch('')\nasync def update_story(story: UpdateStoryDTO, story_id: UUID):\n    story_service = get_story_service()\n    return await story_service.update_story(story_id=story_id, story=story)\n\n\n@router.delete('/')\nasync def delete_story(story_id: UUID):\n    story_service = get_story_service()\n    return await story_service.delete_story(story_id=story_id)\n"
  },
  {
    "path": "admin/backend/routes/api/user.py",
    "content": "import logging\nfrom uuid import UUID\n\nfrom fastapi import APIRouter, Request, HTTPException\nfrom shared.domain.dto import CreateUserDTO, UpdateUserDTO\nfrom shared.domain.models import User\nfrom shared.infrastructure.main_db import NoFreeProxiesException\n\nfrom dependencies.services.user import get_user_service\nfrom routes.requests.user import VerifyAuthCodeRequest\nfrom routes.utils import get_user_id_from_request\nfrom services.exceptions import UserHasNoProxyException\n\nrouter = APIRouter(\n    prefix=\"/users\",\n    tags=[\"users\"],\n)\n\nlogger = logging.getLogger(__name__)\n\n\n@router.post('')\nasync def create_user(user: CreateUserDTO) -> UUID:\n    user_service = get_user_service()\n    return await user_service.create_user(user=user)\n\n\n@router.get('/all')\nasync def get_users():\n    user_service = get_user_service()\n    return await user_service.get_all_users()\n\n@router.get('/managers')\nasync def get_managers():\n    user_service = get_user_service()\n    return await user_service.get_managers()\n\n\n@router.get('')\nasync def get_user(user_id: UUID):\n    user_service = get_user_service()\n    return await user_service.get_user(user_id=user_id)\n\n\n@router.patch('/{user_id}')\nasync def update_user(user: UpdateUserDTO, user_id: UUID) -> User:\n    user_service = get_user_service()\n    return await user_service.update_user(user_id=user_id, user=user)\n\n\n@router.delete('')\nasync def delete_user(user_id: UUID):\n    user_service = get_user_service()\n    return await user_service.delete_user(user_id=user_id)\n\n\n@router.get('/me')\nasync def get_me(\n        request: Request,\n) -> User:\n    user_service = get_user_service()\n    user_id = get_user_id_from_request(request)\n    return await user_service.get_user(user_id=user_id)\n\n\n@router.get(\"/code\")\nasync def send_auth_code(\n        phone: str,\n        request: Request,\n) -> None:\n    user_service = get_user_service()\n    user_id = get_user_id_from_request(request)\n\n    try:\n        await user_service.send_auth_code(phone=phone, user_id=user_id)\n    except NoFreeProxiesException:\n        raise HTTPException(\n            status_code=503,\n            detail=\"No free proxies found\",\n        )\n\n\n@router.post(\"/code\")\nasync def check_auth_code(\n        request: Request,\n        verify_request: VerifyAuthCodeRequest,\n) -> None:\n    user_service = get_user_service()\n    user_id = get_user_id_from_request(request)\n    try:\n        await user_service.get_session_string_for_user(\n            phone=verify_request.phone,\n            code=verify_request.code,\n            password=verify_request.password,\n            user_id=user_id,\n        )\n    except UserHasNoProxyException:\n        raise HTTPException(\n            status_code=409,\n            detail='User has no connected proxy',\n        )\n"
  },
  {
    "path": "admin/backend/routes/api/story_to_publish.py",
    "content": "from uuid import UUID\n\nfrom fastapi import APIRouter\nfrom shared.domain.dto.story_to_publish import CreateStoryToPublishDTO, UpdateStoryToPublishDTO\n\nfrom dependencies.services.story_to_publish import get_story_to_publish_service\n\nrouter = APIRouter(\n    prefix=\"/story-to-publish\",\n    tags=[\"story-to-publish\"],\n)\n#\n#\n# @router.post('')\n# async def create_story_to_publish(story_to_publish: CreateStoryToPublishDTO) -> UUID:\n#     story_to_publish_service = get_story_to_publish_service()\n#     return await story_to_publish_service.create_story_to_publish(story_to_publish=story_to_publish)\n#\n#\n# @router.get('/all')\n# async def get_story_to_publishs():\n#     story_to_publish_service = get_story_to_publish_service()\n#     return await story_to_publish_service.get_all_stories_to_publish()\n#\n#\n# @router.get('')\n# async def get_story_to_publish(story_to_publish_id: UUID):\n#     story_to_publish_service = get_story_to_publish_service()\n#     return await story_to_publish_service.get_story_to_publish(story_to_publish_id=story_to_publish_id)\n#\n#\n# @router.patch('')\n# async def update_story_to_publish(story_to_publish: UpdateStoryToPublishDTO, story_to_publish_id: UUID):\n#     story_to_publish_service = get_story_to_publish_service()\n#     return await story_to_publish_service.update_story_to_publish(story_to_publish_id=story_to_publish_id,\n#                                                                   story_to_publish=story_to_publish)\n#\n#\n# @router.delete('/')\n# async def delete_story_to_publish(story_to_publish_id: UUID):\n#     story_to_publish_service = get_story_to_publish_service()\n#     return await story_to_publish_service.delete_story_to_publish(story_to_publish_id=story_to_publish_id)\n"
  },
  {
    "path": "admin/backend/routes/api/upload.py",
    "content": "import logging\n\nfrom fastapi import APIRouter\nimport os\nfrom fastapi import HTTPException\nfrom starlette.responses import FileResponse\n\nfrom dependencies.services.upload import get_upload_service\n\nrouter = APIRouter(\n    prefix=\"/upload\",\n    tags=[\"upload\"],\n)\n\nlogger = logging.getLogger(__name__)\n\n\n@router.get('/{filename}')\nasync def get_file(\n        filename: str,\n) -> FileResponse:\n    upload_service = get_upload_service()\n\n    file_path = upload_service.get_file_path(filename)\n    if not os.path.isfile(file_path):\n        raise HTTPException(status_code=404, detail=\"File not found\")\n\n    return FileResponse(file_path)\n"
  },
  {
    "path": "admin/backend/routes/api/emoji.py",
    "content": "from typing import List\n\nfrom fastapi import APIRouter\nfrom shared.dependencies.services.emoji import get_emoji_service\nfrom shared.domain.models.emoji import Emoji\n\nrouter = APIRouter(\n    prefix=\"/emoji\",\n    tags=[\"emoji\"]\n)\n\n\n@router.get(\"\")\nasync def list_emojis() -> List[Emoji]:\n    emoji_service = get_emoji_service()\n    return await emoji_service.get_all_emojis()\n"
  },
  {
    "path": "admin/backend/routes/api/post_to_publish.py",
    "content": "import logging\nfrom uuid import UUID\n\nfrom fastapi import APIRouter, Request\nfrom shared.domain.dto.post_to_publish import CreatePostToPublishDTO, UpdatePostToPublishDTO\n\nfrom dependencies.services.post import get_post_service\nfrom dependencies.services.post_to_publish import get_post_to_publish_service\n\nfrom shared.domain.models import PostToPublish\n\nfrom routes.utils import get_user_id_from_request\nfrom shared.dependencies.repositories.post import get_post_repository\nfrom shared.domain.dto import CreatePostDTO\n\nlogger = logging.getLogger(__name__)\nrouter = APIRouter(\n    prefix=\"/post-to-publish\",\n    tags=[\"post-to-publish\"],\n)\n\n\n@router.post('')\nasync def create_post_to_publish(request: Request, post_to_publish: CreatePostToPublishDTO) -> UUID:\n    \"\"\"\n    Создаёт запись для публикации. Логика клонирования:\n    - Если передан ID шаблона (is_template=True) — создаём клон (freeze) и используем его.\n    - Если передан ID не шаблона — считаем, что это уже клон, используем его без доп. копирования.\n    Это исключает дублирование постов и сохраняет фото из шаблона.\n    \"\"\"\n    user_id = get_user_id_from_request(request)\n\n    logger.info(f\"Creating post to publish, user_id={user_id}, dto={post_to_publish}\")\n\n    post_repository = get_post_repository()\n    source_post = await post_repository.get(post_to_publish.post_id)\n    logger.info(f\"Source post: {source_post}\")\n\n    post_id_for_publication = source_post.id\n\n    if source_post.is_template:\n        # Клонируем только если исходник — шаблон\n        post_service = get_post_service()\n        clone_dto = CreatePostDTO(\n            name=source_post.name,\n            text=source_post.text,\n            is_template=False,\n            image_path=source_post.image_path,\n            html=source_post.html,\n            entities=source_post.entities,\n        )\n        logger.info(f\"Cloning from template, DTO: {clone_dto}\")\n        post_id_for_publication = await post_service.create_post(post=clone_dto, author_id=user_id)\n        logger.info(f\"Cloned post ID: {post_id_for_publication}\")\n\n    # Сохраняем запись публикации\n    post_to_publish.creator_id = user_id\n    post_to_publish.post_id = post_id_for_publication\n\n    logger.info(f\"Creating PostToPublish with DTO: {post_to_publish}\")\n\n    post_to_publish_service = get_post_to_publish_service()\n    return await post_to_publish_service.create_post_to_publish(post_to_publish=post_to_publish)\n\n\n@router.get('/all')\nasync def get_posts_to_publish(request: Request) -> list[PostToPublish]:\n    user_id = get_user_id_from_request(request)\n    post_to_publish_service = get_post_to_publish_service()\n    return await post_to_publish_service.get_posts_to_publish(user_id)\n\n\n@router.get('')\nasync def get_post_to_publish(\n        post_to_publish_id: UUID,\n) -> PostToPublish:\n    post_to_publish_service = get_post_to_publish_service()\n    return await post_to_publish_service.get_post_to_publish(post_to_publish_id=post_to_publish_id)\n\n\n@router.patch('/{post_to_publish_id}')\nasync def update_post_to_publish(post_to_publish: UpdatePostToPublishDTO, post_to_publish_id: UUID):\n    post_to_publish_service = get_post_to_publish_service()\n    return await post_to_publish_service.update_post_to_publish(post_to_publish_id=post_to_publish_id,\n                                                                post_to_publish=post_to_publish)\n\n@router.delete('')\nasync def delete_post_to_publish(post_to_publish_id: UUID):\n    post_to_publish_service = get_post_to_publish_service()\n    return await post_to_publish_service.delete_post_to_publish(post_to_publish_id=post_to_publish_id)\n"
  },
  {
    "path": "admin/backend/routes/api/__init__.py",
    "content": "from fastapi import APIRouter\n\nfrom .user import router as user_router\nfrom .post import router as post_router\nfrom .story import router as story_router\nfrom .story_to_publish import router as story_to_publish_router\nfrom .post_to_publish import router as post_to_publish_router\nfrom .auth import router as auth_router\nfrom .chat import router as chat_router\nfrom .emoji import router as emoji_router\nfrom .upload import router as upload_router\nfrom .chat import router as chat_router\nfrom .chat_type import router as chat_type_router\n\nrouter = APIRouter(\n    prefix=\"/api\",\n)\n\nrouter.include_router(user_router)\nrouter.include_router(post_router)\nrouter.include_router(story_router)\nrouter.include_router(story_to_publish_router)\nrouter.include_router(post_to_publish_router)\nrouter.include_router(auth_router)\nrouter.include_router(chat_router)\nrouter.include_router(emoji_router)\nrouter.include_router(upload_router)\nrouter.include_router(chat_router)\nrouter.include_router(chat_type_router)\n"
  },
  {
    "path": "admin/backend/routes/api/chat_type.py",
    "content": "import logging\nfrom uuid import UUID\n\nfrom fastapi import APIRouter\nfrom shared.domain.dto.chat_type import CreateChatTypeDTO, UpdateChatTypeDTO\nfrom shared.domain.models.chat_type import ChatType\n\nfrom dependencies.services.chat_type import get_chat_type_service\n\nrouter = APIRouter(\n    prefix=\"/chat_type\",\n    tags=[\"chat_type\"],\n)\n\nlogger = logging.getLogger(__name__)\n\n\n@router.get('')\nasync def get_chats_types() -> list[ChatType]:\n    chat_type_service = get_chat_type_service()\n    return await chat_type_service.get_chats_types()\n\n\n@router.post(\"\")\nasync def create_chat_type(request: CreateChatTypeDTO) -> None:\n    chat_type_service = get_chat_type_service()\n    await chat_type_service.create_chat_type(chat_type=request)\n\n\n@router.get(\"/{chat_id}\")\nasync def get_chat_type(chat_type_id: UUID) -> ChatType:\n    chat_type_service = get_chat_type_service()\n    return await chat_type_service.get_chat_type(chat_type_id=chat_type_id)\n\n\n@router.delete(\"/{chat_type_id}\")\nasync def delete_chat_type(chat_type_id: UUID) -> None:\n    chat_type_service = get_chat_type_service()\n    return await chat_type_service.delete_chat_type(chat_type_id=chat_type_id)\n\n\n@router.patch(\"/{chat_type_id}\")\nasync def update_chat_type(chat_type_id: UUID, request: UpdateChatTypeDTO) -> ChatType:\n    chat_type_service = get_chat_type_service()\n    return await chat_type_service.update_chat_type(chat_type_id=chat_type_id, chat_type=request)\n\n"
  },
  {
    "path": "admin/backend/routes/api/chat.py",
    "content": "import logging\nfrom uuid import UUID\n\nfrom fastapi import APIRouter, HTTPException, status, Response\nfrom shared.domain.dto import UpdateChatDTO\nfrom shared.domain.models import Chat\nfrom shared.domain.requests.chat import CreateChatRequest\n\nfrom dependencies.services.chat import get_chat_service\nfrom services.exceptions import ChatAlreadyExistsError, InvalidInviteLinkError\n\nrouter = APIRouter(\n    prefix=\"/chat\",\n    tags=[\"chat\"],\n)\n\nlogger = logging.getLogger(__name__)\n\n\n@router.get('')\nasync def get_chats() -> list[Chat]:\n    chat_service = get_chat_service()\n    return await chat_service.get_chats()\n\n\n@router.get('/type/{chat_type_id}')\nasync def get_chats_by_chat_type_id(chat_type_id: UUID) -> list[Chat]:\n    chat_service = get_chat_service()\n    return await chat_service.get_chats_by_type(type_id=chat_type_id)\n\n\n@router.patch('/{chat_id}')\nasync def update_chat(chat_id: UUID, request: UpdateChatDTO) -> Chat:\n    \"\"\"\n    Обновляет запись чата.\n    \"\"\"\n    chat_service = get_chat_service()\n    return await chat_service.update_chat(chat_id=chat_id, chat=request)\n\n@router.delete('/{chat_id}')\nasync def delete_chat(chat_id: UUID) -> None:\n    chat_service = get_chat_service()\n    return await chat_service.delete_chat(chat_id=chat_id)\n\n@router.post(\"\")\nasync def create_chat(request: CreateChatRequest) -> Chat:\n    \"\"\"\n    Создаёт новую запись чата по invite_link.\n    \"\"\"\n    chat_service = get_chat_service()\n    try:\n        new_chat_id = await chat_service.create_chat_by_link(\n            invite_link=request.invite_link,\n            type_id=request.chat_type_id,\n            manager_id=request.manager_id,\n        )\n        return new_chat_id\n    except ChatAlreadyExistsError:\n        # если чат с таким invite_link уже есть — попробуем вернуть id существующего\n        chat_service = get_chat_service()\n        try:\n            # Собираем канонизированную ссылку ровно как в сервисе (strip)\n            link = request.invite_link.strip()\n            existing = await chat_service.chats_repository.get_by_invite_link(link)  # type: ignore[attr-defined]\n            if existing:\n                return Response(\n                    status_code=status.HTTP_409_CONFLICT,\n                    content=f'{{\"id\":\"{existing.id}\",\"chat_type_id\":\"{existing.chat_type_id}\"}}',\n                    media_type=\"application/json\",\n                )\n        except Exception:\n            pass\n        raise HTTPException(\n            status_code=status.HTTP_409_CONFLICT,\n            detail=\"Chat with this invite_link already exists\"\n        )\n    except InvalidInviteLinkError:\n        # если ссылка неверная\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Invalid invite link\"\n        )\n    except Exception as e:\n        # общий catch-all на всякий случай\n        logger.exception(\"Error creating chat\")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"Internal server error\"\n        )\n"
  },
  {
    "path": "admin/backend/routes/api/auth/__init__.py",
    "content": "from domain.schemas.auth import Credentials\nfrom fastapi import APIRouter, Depends\nfrom forms.auth_code_form import auth_code_form\nfrom starlette.responses import JSONResponse\n\nfrom abstractions.services.auth.service import AuthServiceInterface\nfrom abstractions.services.exceptions import WrongCredentialsException\nfrom dependencies.services.auth import get_auth_service\nfrom routes.requests.auth import TelegramAuthRequest\n\nrouter = APIRouter(\n    prefix=\"/auth\",\n    tags=[\"Auth\"],\n)\n\n# templates = Jinja2Templates(directory='templates')\n\n@router.post(\"/telegram\")\nasync def telegram_auth(payload: TelegramAuthRequest) :\n    auth_service = get_auth_service()\n\n    tokens = await auth_service.create_token(init_data=payload.initData)\n\n    return tokens\n\n\n@router.post(\"\")\nasync def validate_auth_code_backend(\n        credentials: Credentials = Depends(auth_code_form),\n        auth_service: AuthServiceInterface = Depends(get_auth_service),\n) -> JSONResponse:\n    try:\n        tokens = await auth_service.create_token(credentials)\n        response = JSONResponse(content={\"status\": \"ok\"}, status_code=200)\n        response.set_cookie(key=\"access_token\", value=tokens.access_token)\n        # response.set_cookie(key=\"refresh_token\", value=tokens.refresh_token)\n        return response\n    except WrongCredentialsException:\n        return JSONResponse(content={\"status\": \"error\", \"message\": \"Wrong credentials\"}, status_code=400)\n"
  },
  {
    "path": "admin/backend/services/post.py",
    "content": "from dataclasses import dataclass\nfrom typing import List\nfrom uuid import UUID\n\nfrom shared.abstractions.repositories import PostRepositoryInterface\nfrom shared.domain.dto import CreatePostDTO, UpdatePostDTO\nfrom shared.domain.dto.update_post import CreateUpdatePostDTO, UpdateUpdatePostDTO\nfrom shared.domain.models import Post\n\nfrom abstractions.services.post import PostServiceInterface\nfrom shared.abstractions.services import UploadServiceInterface\n\nfrom abstractions.services.update_post import UpdatePostServiceInterface\n\n\n@dataclass\nclass PostService(PostServiceInterface):\n    post_repository: PostRepositoryInterface\n    upload_service: UploadServiceInterface\n    update_post_service: UpdatePostServiceInterface\n\n    async def get_all_posts(self) -> List[Post]:\n        return await self.post_repository.get_all()\n\n    async def get_templates(self) -> List[Post]:\n        return await self.post_repository.get_templates()\n\n    async def create_post(self, post: CreatePostDTO, author_id: UUID) -> UUID:\n        update_post = CreateUpdatePostDTO(\n            post_id = post.id,\n            post_json = post.model_dump(mode='json'),\n            author_id = author_id,\n        )\n        res = await self.post_repository.create(post)\n        await self.update_post_service.create_update_post(update_post)\n        return res\n\n    async def get_post(self, post_id: UUID) -> Post:\n        post = await self.post_repository.get(post_id)\n\n        file_path = self.upload_service.get_file_url(post.image_path)\n\n        post.image_path = file_path\n        return post\n\n    async def update_post(self, post_id: UUID, post: UpdatePostDTO, author_id: UUID) -> Post:\n        update_post = CreateUpdatePostDTO(\n            post_id = post_id,\n            post_json = post.model_dump(mode='json'),\n            author_id = author_id,\n        )\n        res = await self.post_repository.update(post_id, post)\n        await self.update_post_service.create_update_post(update_post)\n        return res\n\n    async def delete_post(self, post_id: UUID) -> None:\n        return await self.post_repository.delete(post_id)\n"
  },
  {
    "path": "admin/backend/services/story.py",
    "content": "from dataclasses import dataclass\nfrom typing import List\nfrom uuid import UUID\n\nfrom shared.abstractions.repositories.story import StoryRepositoryInterface\nfrom shared.domain.dto.story import CreateStoryDTO, UpdateStoryDTO\nfrom shared.domain.models.story import Story\n\nfrom abstractions.services.story import StoryServiceInterface\n\n\n@dataclass\nclass StoryService(StoryServiceInterface):\n    story_repository: StoryRepositoryInterface\n\n    async def get_all_stories(self) -> List[Story]:\n        return await self.story_repository.get_all()\n\n    async def create_story(self, story: CreateStoryDTO) -> UUID:\n        return await self.story_repository.create(story)\n\n    async def get_story(self, story_id: UUID) -> Story:   # todo: image path\n        return await self.story_repository.get(story_id)\n\n    async def update_story(self, story_id: UUID, story: UpdateStoryDTO) -> None:\n        return await self.story_repository.update(story_id, story)\n\n    async def delete_story(self, story_id: UUID) -> None:\n        return await self.story_repository.delete(story_id)\n"
  },
  {
    "path": "admin/backend/services/user.py",
    "content": "import logging\nfrom dataclasses import dataclass\nfrom typing import List, Optional\nfrom uuid import UUID\n\nfrom shared.abstractions.repositories import UserRepositoryInterface, ProxyRepositoryInterface\nfrom shared.domain.dto import CreateUserDTO, UpdateUserDTO\nfrom shared.domain.models import User\nfrom shared.infrastructure.main_db import NoFreeProxiesException\n\nfrom abstractions.services.telegram import TelegramServiceInterface\nfrom abstractions.services.user import UserServiceInterface\nfrom services.exceptions import UserHasNoProxyException\n\nlogger = logging.getLogger(__name__)\n\n@dataclass\nclass UserService(UserServiceInterface):\n    user_repository: UserRepositoryInterface\n    telegram_service: TelegramServiceInterface\n    proxy_repository: ProxyRepositoryInterface\n\n    async def get_all_users(self) -> List[User]:\n        return await self.user_repository.get_all()\n\n    async def get_managers(self) -> List[User]:\n        return await self.user_repository.get_managers()\n\n    async def create_user(self, user: CreateUserDTO) -> UUID:\n        return await self.user_repository.create(user)\n\n    async def get_user(self, user_id: UUID) -> User:\n        return await self.user_repository.get(user_id)\n\n    async def get_user_by_telegram_id(self, telegram_id: int) -> User:\n        return await self.user_repository.get_by_telegram_id(telegram_id)\n\n    async def update_user(self, user_id: UUID, user: UpdateUserDTO) -> User:\n        return await self.user_repository.update(user_id, user)\n\n    async def delete_user(self, user_id: UUID) -> None:\n        return await self.user_repository.delete(user_id)\n\n    async def ensure_user(self, dto: CreateUserDTO) -> User:\n        logger.info(f\"Ensuring user {dto.telegram_id}\")\n        # Нормализуем username на всякий случай (иногда прилетает нестроковое значение)\n        if dto.telegram_username is not None and not isinstance(dto.telegram_username, str):\n            dto.telegram_username = None\n        if isinstance(dto.telegram_username, str):\n            dto.telegram_username = dto.telegram_username.lstrip('@') or None\n        user = await self.user_repository.get_by_telegram_id(dto.telegram_id)\n        if not user:\n            user_id = await self.create_user(dto)\n            user = await self.user_repository.get(user_id)\n            logger.info(f\"User {dto.telegram_id} was created just now\")\n\n        return user\n\n    async def send_auth_code(self, user_id: UUID, phone: str) -> None:\n        try:\n            proxy = await self.proxy_repository.get_available_proxy()\n        except NoFreeProxiesException:\n            logger.error(f\"No free proxies available\")\n            raise NoFreeProxiesException\n\n        await self.user_repository.set_proxy(user_id, proxy.id)\n        await self.telegram_service.send_auth_code(phone, proxy=proxy.proxy_string)\n\n    async def get_session_string_for_user(\n            self,\n            phone: str,\n            code: str,\n            user_id: UUID,\n            password: Optional[str] = None,\n    ) -> None:\n        user = await self.user_repository.get(user_id)\n        if not user.proxy:\n            raise UserHasNoProxyException(f\"User {user_id} has no connected proxy\")\n\n        session_string = await self.telegram_service.get_session_string(\n            phone=phone,\n            code=code,\n            proxy=user.proxy.proxy_string,\n            password=password,\n        )\n        update_dto = UpdateUserDTO(\n            session_string=session_string,\n        )\n\n        await self.update_user(user_id, update_dto)\n\n"
  },
  {
    "path": "admin/backend/services/story_to_publish.py",
    "content": "from dataclasses import dataclass\nfrom typing import List\nfrom uuid import UUID\n\nfrom shared.abstractions.repositories.story_to_publish import StoryToPublishRepositoryInterface\nfrom shared.domain.dto.story_to_publish import CreateStoryToPublishDTO, UpdateStoryToPublishDTO\nfrom shared.domain.models.story import Story\nfrom shared.infrastructure.main_db.repositories.story_to_publish import StoryToPublishRepository\n\nfrom abstractions.services.story_to_publish import StoryToPublishServiceInterface\n\nfrom shared.domain.models import StoryToPublish\n\n\n@dataclass\nclass StoryToPublishService(StoryToPublishServiceInterface):\n    story_to_publish_repository: StoryToPublishRepositoryInterface\n\n    async def get_all_stories_to_publish(self) -> List[Story]:\n        return await self.story_to_publish_repository.get_all()\n\n    async def create_story_to_publish(self, story_to_publish: CreateStoryToPublishDTO) -> UUID:\n        return await self.story_to_publish_repository.create(story_to_publish)\n\n    async def get_story_to_publish(self, story_to_publish_id: UUID) -> StoryToPublish:   # todo: image path\n        return await self.story_to_publish_repository.get(story_to_publish_id)\n\n    async def update_story_to_publish(self, story_to_publish_id: UUID,\n                                      story_to_publish: UpdateStoryToPublishDTO) -> None:\n        return await self.story_to_publish_repository.update(story_to_publish_id, story_to_publish)\n\n    async def delete_story_to_publish(self, story_to_publish_id: UUID) -> None:\n        return await self.story_to_publish_repository.delete(story_to_publish_id)"
  },
  {
    "path": "admin/backend/services/telegram.py",
    "content": "import logging\nimport re\nfrom contextlib import asynccontextmanager\nfrom dataclasses import dataclass, field\nfrom datetime import datetime\nfrom typing import AsyncGenerator, Optional, Annotated\nfrom urllib.request import proxy_bypass\n\nfrom shared.abstractions.singleton import Singleton\nfrom telethon import TelegramClient, types\nfrom telethon.errors import SessionPasswordNeededError\nfrom telethon.sessions import StringSession\nfrom telethon.utils import get_peer_id\n\nfrom abstractions.services.telegram import TelegramServiceInterface\nfrom domain.models.chat import TelegramChatInfo\nfrom services.exceptions import UnableToGetChatException, PasswordNeededException\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass TelegramService(\n    TelegramServiceInterface,\n    Singleton,\n):\n    api_id: int\n    api_hash: str\n    service_session_string: str\n    proxy: str\n    service_bot_token: str\n    use_bot_for_service: bool = False\n\n    phone_code_hashes: dict[  # todo: possible memory leak, needs interval cleaning\n        Annotated[str, 'phone'],\n        tuple[\n            Annotated[str, 'phone code hash'],\n            Annotated[datetime, 'requested at'],\n        ]\n    ] = field(default_factory=dict)\n\n    # async def get_chat_info(self, invite_link: str) -> TelegramChatInfo:\n    #     try:\n    #         async with self.get_service_client() as client:\n    #             chat: types.Chat = await client.get_entity(invite_link)\n    #             chat_id = get_peer_id(chat)\n    #             return TelegramChatInfo(\n    #                 id=chat_id,\n    #                 title=chat.title,\n    #                 members_count=chat.participants_count,\n    #             )\n    #\n    #     except Exception as e:\n    #         logger.error(\"Не удалось получить title для %s: %s\", invite_link, e, exc_info=True)\n    #         raise UnableToGetChatException\n\n    async def get_chat_info(self, invite_link: str) -> TelegramChatInfo:\n        try:\n            async with self.get_service_client() as client:\n                # Получаем любой Peer (Chat, Channel или User)\n                entity = await client.get_entity(invite_link)\n                chat_id = get_peer_id(entity)\n\n                # Title: для чата/канала — .title, для юзера — .username\n                if isinstance(entity, (types.Channel, types.Chat)):\n                    title = entity.title or \"\"\n                else:\n                    title = getattr(entity, \"username\", \"\") or \"\"\n\n                # Попытка взять participants_count, и если он None, сделать fallback\n                members = getattr(entity, \"participants_count\", None)\n                if members is None:\n                    try:\n                        # получаем реальный список участников (работает только для публичных чатов/каналов)\n                        participants = await client.get_participants(entity)\n                        members = len(participants)\n                    except Exception:\n                        members = 0\n\n                return TelegramChatInfo(\n                    id=chat_id,\n                    title=title,\n                    members_count=members,\n                )\n\n        except Exception as e:\n            logger.error(\"Не удалось получить информацию по %s: %s\", invite_link, e, exc_info=True)\n            raise UnableToGetChatException\n\n    async def send_auth_code(self, phone: str, proxy: Optional[str] = None) -> None:\n        client = TelegramClient(\n            phone,\n            self.api_id,\n            self.api_hash,\n            proxy=self.parse_proxy(proxy) if proxy else None,\n        )\n        await client.connect()\n\n        request = await client.send_code_request(phone)\n        self.phone_code_hashes[phone] = (request.phone_code_hash, datetime.now())\n\n    async def get_session_string(\n            self,\n            phone: str,\n            code: str,\n            proxy: Optional[str] = None,\n            password: Optional[str] = None,\n    ) -> str:\n        client = TelegramClient(\n            session=phone,\n            api_id=self.api_id,\n            api_hash=self.api_hash,\n            proxy=self.parse_proxy(proxy) if proxy else None,\n        )\n        await client.connect()\n\n        phone_code_hash = self.phone_code_hashes[phone][0]\n        try:\n            try:\n                await client.sign_in(phone, code, phone_code_hash=phone_code_hash)\n            except SessionPasswordNeededError:\n                await client.sign_in(password=password)\n\n            del self.phone_code_hashes[phone]\n        except SessionPasswordNeededError:\n            del self.phone_code_hashes[phone]\n            raise PasswordNeededException\n\n        string = StringSession.save(client.session)\n        return string\n\n    # @asynccontextmanager\n    # async def get_service_client(self) -> AsyncGenerator[TelegramClient, None]:\n    #     if self.use_bot_for_service:\n    #         client = TelegramClient('bot', self.api_id, self.api_hash)\n    #         await client.connect()\n    #         logger.info(\"self.service_bot_token\")\n    #         logger.info(self.service_bot_token)\n    #         await client.start(bot_token=self.service_bot_token) # noqa\n    #         logger.info(await client.get_me())\n    #         # logger.info(await client.get_dialogs())\n    #\n    #         yield client\n    #\n    #         await client.disconnect()\n    #         return\n    #\n    #     session = StringSession(self.service_session_string)\n    #     async with TelegramClient(session, self.api_id, self.api_hash, proxy=self.parse_proxy(self.proxy)) as client:\n    #         await client.start()\n    #\n    #         yield client\n\n    @asynccontextmanager\n    async def get_service_client(self) -> AsyncGenerator[TelegramClient, None]:\n        if self.use_bot_for_service:\n            # In-memory session, чтобы не создавать sqlite-файл и не блокировать БД\n            bot_session = StringSession()\n            client = TelegramClient(\n                bot_session,\n                self.api_id,\n                self.api_hash,\n                proxy=self.parse_proxy(self.proxy) if self.proxy else None\n            )\n\n            # start() сам подключится и залогинится как бот\n            await client.start(bot_token=self.service_bot_token) # noqa\n            logger.info(await client.get_me())\n\n            yield client\n\n            await client.disconnect()\n            return\n\n        # Обычный пользовательский режим через сохранённую строку сессии\n        client = TelegramClient(\n            session=StringSession(self.service_session_string),\n            api_id=self.api_id,\n            api_hash=self.api_hash,\n            proxy=self.parse_proxy(self.proxy) if self.proxy else None\n        )\n        await client.connect()\n\n        yield client\n        await client.disconnect()\n        return\n\n\n    @staticmethod\n    def parse_proxy(proxy_string: Optional[str] = None) -> Optional[tuple]:\n        if not proxy_string:\n            return\n\n        # Regex to parse the proxy string\n        pattern = re.compile(\n            r\"^(?P<protocol>http|socks5|socks4)://(?P<username>.+?):(?P<password>.+?)@(?P<host>.+?):(?P<port>\\d+)$\"\n        )\n        match = pattern.match(proxy_string)\n        if not match:\n            raise ValueError(\"Invalid proxy format\")\n\n        # Extracting components\n        components = match.groupdict()\n        protocol = components[\"protocol\"]\n        username = components[\"username\"]\n        password = components[\"password\"]\n        host = components[\"host\"]\n        port = int(components[\"port\"])\n\n        # Map protocol to PySocks format\n        proxy_type = {\n            \"http\": \"HTTP\",\n            \"socks5\": \"SOCKS5\",\n            \"socks4\": \"SOCKS4\"\n        }.get(protocol, None)\n\n        if not proxy_type:\n            raise ValueError(\"Unsupported proxy protocol\")\n\n        # PySocks/Telethon-compatible format\n        proxy = (proxy_type, host, port, True, username, password)\n        print(proxy)\n        return proxy\n"
  },
  {
    "path": "admin/backend/services/post_to_publish.py",
    "content": "from dataclasses import dataclass\nfrom typing import List\nfrom uuid import UUID\n\nfrom shared.abstractions.repositories.post_to_publish import PostToPublishRepositoryInterface\nfrom shared.domain.dto.post_to_publish import CreatePostToPublishDTO, UpdatePostToPublishDTO\nfrom shared.domain.enums import UserRole\nfrom shared.domain.models.post_to_publish import PostToPublish\n\nfrom abstractions.services.post_to_publish import PostToPublishServiceInterface\nfrom shared.abstractions.services import UploadServiceInterface\n\nfrom abstractions.services.user import UserServiceInterface\n\n\n@dataclass\nclass PostToPublishService(PostToPublishServiceInterface):\n    post_to_publish_repository: PostToPublishRepositoryInterface\n    user_service: UserServiceInterface\n    upload_service: UploadServiceInterface\n\n    async def get_posts_to_publish(self, user_id: UUID) -> List[PostToPublish]:\n        user = await self.user_service.get_user(user_id)\n        if user.role == UserRole.MANAGER:\n            return await self.post_to_publish_repository.get_posts_by_manager(user_id)\n\n        return await self.post_to_publish_repository.get_all()\n\n    async def create_post_to_publish(self, post_to_publish: CreatePostToPublishDTO) -> UUID:\n        return await self.post_to_publish_repository.create(post_to_publish)\n\n    async def get_post_to_publish(self, post_to_publish_id: UUID) -> PostToPublish:\n        post = await self.post_to_publish_repository.get(post_to_publish_id)\n        file_path = self.upload_service.get_file_url(post.post.image_path)\n\n        post.post.image_path = file_path\n        return post\n\n    async def update_post_to_publish(self, post_to_publish_id: UUID, post_to_publish: UpdatePostToPublishDTO) -> None:\n        return await self.post_to_publish_repository.update(post_to_publish_id, post_to_publish)\n\n    async def delete_post_to_publish(self, post_to_publish_id: UUID) -> None:\n        return await self.post_to_publish_repository.delete(post_to_publish_id)\n"
  },
  {
    "path": "admin/backend/services/__init__.py",
    "content": ""
  },
  {
    "path": "admin/backend/services/chat_type.py",
    "content": "import logging\nfrom dataclasses import dataclass\nfrom uuid import UUID\n\nfrom shared.abstractions.repositories.chat_type import ChatTypeRepositoryInterface\nfrom shared.domain.dto.chat_type import CreateChatTypeDTO, UpdateChatTypeDTO\nfrom shared.domain.models.chat_type import ChatType\n\nfrom abstractions.services.chat_type import ChatTypeServiceInterface\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass ChatTypeService(ChatTypeServiceInterface):\n    chats_type_repository: ChatTypeRepositoryInterface\n\n    async def create_chat_type(self, chat_type: CreateChatTypeDTO) -> UUID:\n        return await self.chats_type_repository.create(chat_type)\n\n    async def get_chats_types(self) -> list[ChatType]:\n        return await self.chats_type_repository.get_all()\n\n    async def get_chat_type(self, chat_type_id: UUID) -> ChatType:\n        return await self.chats_type_repository.get(chat_type_id)\n\n    async def delete_chat_type(self, chat_type_id: UUID) -> None:\n        return await self.chats_type_repository.delete(chat_type_id)\n\n    async def update_chat_type(self, chat_type_id: UUID, chat_type: UpdateChatTypeDTO) -> ChatType:\n        return await self.chats_type_repository.update(chat_type_id, chat_type)\n\n"
  },
  {
    "path": "admin/backend/services/chat.py",
    "content": "import logging\nimport re\nfrom dataclasses import dataclass\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom shared.abstractions.repositories import ChatRepositoryInterface\nfrom shared.domain.dto import CreateChatDTO, UpdateChatDTO\nfrom shared.domain.models import Chat\n\nfrom abstractions.services.chat import ChatServiceInterface\nfrom abstractions.services.telegram import TelegramServiceInterface\nfrom services.exceptions import InvalidInviteLinkError, ChatAlreadyExistsError\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass ChatService(ChatServiceInterface):\n    chats_repository: ChatRepositoryInterface\n    telegram_service: TelegramServiceInterface\n\n    async def get_chats(self) -> list[Chat]:\n        return await self.chats_repository.get_all()\n\n    async def update_chat(self, chat_id: UUID, chat: UpdateChatDTO) -> Chat:\n        return await self.chats_repository.update(chat_id, chat)\n\n    async def delete_chat(self, chat_id: UUID) -> None:\n        return await self.chats_repository.delete(chat_id)\n\n    async def get_chats_by_type(self, type_id: UUID) -> list[Chat]:\n        return await self.chats_repository.get_by_type(type_id)\n\n    async def create_chat_by_link(\n            self,\n            invite_link: str,\n            manager_id: UUID,\n            type_id: Optional[UUID] = None,\n    ) -> Chat:\n        \"\"\"\n        Проверяет invite_link, запрашивает у репозитория дубликаты,\n        резолвит информацию о чате и сохраняет новую запись.\n        \"\"\"\n        link = invite_link.strip()\n\n        # 1. Базовая валидация формата ссылки\n        pattern = r\"^(https?://)?t\\.me/[\\w\\-\\+]+$\"\n        if not re.match(pattern, link):\n            raise InvalidInviteLinkError(f\"Неверный формат invite_link: {link}\")\n\n        # 2. Проверяем, что такого чата ещё нет (по ссылке; дальше проверим по chat_id)\n        existing = await self.chats_repository.get_by_invite_link(link)\n        if existing:\n            raise ChatAlreadyExistsError(f\"Чат уже зарегистрирован: {link}\")\n\n        # 3. Получаем информацию о чате из тг\n        chat_info = await self.telegram_service.get_chat_info(invite_link)\n\n        # 3.1 Проверяем дубликат по telegram chat_id (уникальный индекс chats.chat_id)\n        exists_by_id = await self.chats_repository.get_by_telegram_id(int(chat_info.id))\n        if exists_by_id:\n            raise ChatAlreadyExistsError(f\"Чат уже зарегистрирован: chat_id={chat_info.id}\")\n\n        # 4. Собираем доменную модель и сохраняем\n        new_chat = CreateChatDTO(\n            name=chat_info.title,\n            chat_id=int(chat_info.id),\n            invite_link=link,\n            chat_type_id=type_id,\n            responsible_manager_id=manager_id,\n        )\n        new_chat_id = await self.chats_repository.create(new_chat)\n        return await self.chats_repository.get(new_chat_id)\n"
  },
  {
    "path": "admin/backend/services/exceptions.py",
    "content": "class InvalidBookingException(Exception):\n    ...\n\n\nclass PermissionException(Exception):\n    ...\n\n\nclass BannedUserException(Exception):\n    ...\n\n\nclass ChatAlreadyExistsError(Exception):\n    \"\"\"Выбрасывается, если чат с таким invite_link уже существует.\"\"\"\n    pass\n\n\nclass InvalidInviteLinkError(Exception):\n    \"\"\"Выбрасывается, если строка invite_link не соответствует ожидаемому формату.\"\"\"\n    pass\n\n\nclass UnableToGetChatException(Exception):\n    ...\n\n\nclass PasswordNeededException(Exception):\n    ...\n\n\nclass UserHasNoProxyException(Exception):\n    ...\n"
  },
  {
    "path": "admin/backend/services/update_post.py",
    "content": "from dataclasses import dataclass\nfrom uuid import UUID\n\nfrom shared.abstractions.repositories.update_post import UpdatePostRepositoryInterface\nfrom shared.domain.dto.update_post import CreateUpdatePostDTO, UpdateUpdatePostDTO\n\nfrom abstractions.services.update_post import UpdatePostServiceInterface\n\n\n@dataclass\nclass UpdatePostService(UpdatePostServiceInterface):\n    update_post_repository: UpdatePostRepositoryInterface\n\n    async def create_update_post(self, post: CreateUpdatePostDTO) -> UUID:\n        return await self.update_post_repository.create(obj=post)\n"
  },
  {
    "path": "admin/backend/services/auth/service.py",
    "content": "import hashlib\nimport hmac\nimport logging\nimport time\nimport json\nfrom typing import Optional\nfrom urllib.parse import parse_qs\nfrom dataclasses import dataclass\nfrom uuid import UUID\n\nfrom shared.domain.dto import CreateUserDTO\nfrom shared.domain.enums import UserRole\nfrom shared.infrastructure.sqlalchemy import NotFoundException\n\nfrom abstractions.services.auth.service import AuthServiceInterface\nfrom abstractions.services.auth.tokens import TokenServiceInterface\nfrom abstractions.services.user import UserServiceInterface\nfrom domain.responses.auth import AuthTokens\nfrom services.auth.exceptions import ExpiredDataException, InvalidTokenException\nfrom services.exceptions import BannedUserException\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass AuthService(AuthServiceInterface):\n    bot_token: str\n    token_service: TokenServiceInterface\n    user_service: UserServiceInterface\n\n    async def get_user_id_from_jwt(self, token: str) -> UUID:\n        try:\n            payload = self.token_service.get_token_payload(token=token)\n            user_id: str | None = payload.get('sub', None)\n            if not user_id:\n                raise InvalidTokenException()\n\n            user = await self.user_service.get_user(UUID(user_id))  # todo: pk type\n\n            return user.id\n        except (InvalidTokenException, NotFoundException):\n            raise\n\n    async def create_token(self, init_data: str) -> AuthTokens:\n        \"\"\"Verifies Telegram Mini App auth data properly.\"\"\"\n        # Parse initData properly (decode URL params)\n        data_dict = {k: v[0] for k, v in parse_qs(init_data).items()}\n\n        # Extract hash separately\n        received_hash = data_dict.pop(\"hash\", None)\n        if not received_hash:\n            raise InvalidTokenException(\"Missing hash in init data\")\n\n        # Check expiration\n        auth_date = int(data_dict.get(\"auth_date\", \"0\"))\n        if time.time() - auth_date > 86400:  # Expire after 1 day\n            raise ExpiredDataException()\n\n        # Step 1: Sort the key-value pairs in alphabetical order\n        sorted_data_string = \"\\n\".join(f\"{k}={v}\" for k, v in sorted(data_dict.items()))\n\n        # Step 2: Create HMAC-SHA256 signature of the bot token using 'WebAppData' as key\n        secret_key = hmac.new(b\"WebAppData\", self.bot_token.encode(), hashlib.sha256).digest()\n\n        # Step 3: Create final HMAC-SHA256 signature using the previous step result as the key\n        computed_hash = hmac.new(secret_key, sorted_data_string.encode(), hashlib.sha256).hexdigest()\n\n        # Step 4: Validate hash\n        if computed_hash != received_hash:\n            raise InvalidTokenException(\"Invalid init data hash\")\n\n        # Extract Telegram User ID\n        user_data = json.loads(data_dict.get(\"user\", \"{}\"))\n        telegram_user_id = int(user_data.get(\"id\", 0))\n\n        # Normalize username to a proper string\n        raw_username = user_data.get(\"username\", None)\n        username: Optional[str]\n        if isinstance(raw_username, str):\n            username = raw_username.lstrip(\"@\") or None\n        else:\n            # If a bound method or non-string leaked here, drop it\n            username = None\n\n        first_name = user_data.get(\"first_name\", None)\n        last_name = user_data.get(\"last_name\", None)\n        language_code = user_data.get(\"language_code\", None)\n\n        # Ensure user exists\n        user_dto = CreateUserDTO(\n            telegram_id=telegram_user_id,\n            telegram_username=username,\n            telegram_first_name=first_name,\n            telegram_last_name=last_name,\n            telegram_language_code=language_code,\n            role=UserRole.MANAGER,\n            assistant_enabled=False,\n        )\n        user = await self.user_service.ensure_user(user_dto)\n\n        # Generate access & refresh tokens\n        return self.token_service.create_auth_token(user_id=str(user.id))\n\n    async def refresh_token(self, refresh_token: str) -> AuthTokens:\n        try:\n            old_claims = self.token_service.get_token_payload(refresh_token)\n            user_id = old_claims['sub']\n            await self.user_service.get_user(user_id)\n\n            return self.token_service.create_auth_token(user_id)\n        except (InvalidTokenException, NotFoundException):\n            raise\n"
  },
  {
    "path": "admin/backend/services/auth/__init__.py",
    "content": ""
  },
  {
    "path": "admin/backend/services/auth/tokens.py",
    "content": "import logging\nfrom dataclasses import dataclass\nfrom datetime import datetime, timedelta, UTC\n\nfrom jwt import (\n    decode, encode,\n    ExpiredSignatureError as ExpiredSignatureJWTError,\n    InvalidTokenError as InvalidTokenJWTError\n)\n\nfrom abstractions.services.auth.tokens import TokenServiceInterface\nfrom domain.responses.auth import AuthTokens\nfrom services.auth.exceptions import InvalidTokenException, ExpiredTokenException\nfrom shared.settings import JwtSettings\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass TokenService(TokenServiceInterface):\n    jwt_settings: JwtSettings\n\n    def create_auth_token(self, user_id: str) -> AuthTokens:\n        access_claims = {\n            'sub': user_id,\n            'exp': datetime.now(tz=UTC) + timedelta(seconds=self.jwt_settings.access_expire),\n        }\n\n        refresh_claims = {\n            'sub': user_id,\n            'exp': datetime.now(tz=UTC) + timedelta(seconds=self.jwt_settings.refresh_expire),\n        }\n\n        return AuthTokens(\n            access_token=self._create_token(**access_claims),\n            refresh_token=self._create_token(**refresh_claims),\n        )\n\n    def _create_token(self, **claims) -> str:\n        if 'iss' not in claims:\n            claims[\"iss\"] = self.jwt_settings.issuer\n\n        if 'aud' not in claims:\n            claims[\"aud\"] = self.jwt_settings.audience\n\n        token = encode(\n            payload=claims,\n            key=self.jwt_settings.secret_key.get_secret_value(),\n            algorithm=\"HS256\"\n        )\n\n        return token\n\n    def get_token_payload(self, token: str) -> dict:\n        try:\n            claims = decode(\n                token,\n                self.jwt_settings.secret_key.get_secret_value(),\n                algorithms=[\"HS256\"],\n                issuer=self.jwt_settings.issuer,\n                audience=self.jwt_settings.audience,\n                options={\n                    \"verify_exp\": True\n                },\n            )\n\n            return claims\n        except ExpiredSignatureJWTError as ex:\n            logger.error(\"Token has expired: %s\", token)\n            raise ExpiredTokenException from ex\n        except InvalidTokenJWTError as ex:\n            logger.error(\"Invalid token: %s. Error: %s\", token, ex)\n            raise InvalidTokenException from ex\n"
  },
  {
    "path": "admin/backend/services/auth/exceptions.py",
    "content": "class ExpiredDataException(Exception):\n    ...\n\n\nclass InvalidTokenException(Exception):\n    ...\n\n\nclass ExpiredTokenException(Exception):\n    ...\n"
  },
  {
    "path": "shared/pyproject.toml",
    "content": "[build-system]\nrequires      = [\"setuptools>=68\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname            = \"shared\"\nversion         = \"0.1.0\"\ndescription     = \"Shared DB models, repositories and utilities\"\nrequires-python = \">=3.12\"\ndependencies = [\n  \"pydantic>=2.11\",\n  \"pydantic-settings>=2.9.1\",\n  \"sqlalchemy>=2.0\",\n  \"asyncpg>=0.30\",\n  \"alembic>=1.15\",\n  \"alembic-postgresql-enum>=1.7\",\n  \"greenlet>=3.2.2\",\n  \"fastapi>=0.115.12\",\n  \"aiofiles>=24.1.0\",\n  \"apscheduler>=3.11.0\",\n  \"httpx>=0.28.1\",\n]\n\n[tool.setuptools.packages.find]\nwhere   = [\"src\"]\ninclude = [\"shared*\"]\n\n[tool.setuptools]\ninclude-package-data = true\n\n[tool.setuptools.package-data]\n\"shared\" = [\n  \"settings.json\",\n  \"infrastructure/main_db/alembic.ini\",\n  \"infrastructure/main_db/migrations/*\"\n]\n"
  },
  {
    "path": "shared/__init__.py",
    "content": ""
  },
  {
    "path": "shared/src/__init__.py",
    "content": ""
  },
  {
    "path": "shared/src/shared/config.py",
    "content": "MAIN_DB_URL = \"postgresql+asyncpg://postgres:postgres@localhost:5432/postgres\"\n\ndef set_main_db_url(url: str) -> None:\n    global MAIN_DB_URL\n    MAIN_DB_URL = url\n\ndef get_main_db_url() -> str:\n    return MAIN_DB_URL\n"
  },
  {
    "path": "shared/src/shared/__init__.py",
    "content": ""
  },
  {
    "path": "shared/src/shared/settings/abstract.py",
    "content": "from pathlib import Path\nfrom typing import Type\n\nfrom pydantic_settings import (\n    BaseSettings,\n    SettingsConfigDict,\n    PydanticBaseSettingsSource,\n)\n\nfrom .merged_source import MergedSettingsSource\n\n\nclass AbstractSettings(BaseSettings):\n    model_config = SettingsConfigDict(\n        extra=\"ignore\",\n        json_file=Path(__file__).parent.parent / \"settings.json\",\n        json_file_encoding=\"utf-8\",\n    )\n\n    @classmethod\n    def settings_customise_sources(\n            cls,\n            settings_cls: Type[BaseSettings],\n            init_settings: PydanticBaseSettingsSource,\n            env_settings: PydanticBaseSettingsSource,\n            dotenv_settings: PydanticBaseSettingsSource,\n            file_secret_settings: PydanticBaseSettingsSource,\n    ) -> tuple[PydanticBaseSettingsSource, ...]:\n        return (\n            MergedSettingsSource(\n                settings_cls,\n                init_settings,\n                env_settings,\n                dotenv_settings,\n                file_secret_settings,\n            ),\n        )\n"
  },
  {
    "path": "shared/src/shared/settings/worker.py",
    "content": "from shared.domain.models.user import UserWithSessionString\nfrom shared.settings import AbstractSettings\n\n\nclass WorkerSettings(AbstractSettings):\n    user: UserWithSessionString\n    api_id: int\n    api_hash: str\n"
  },
  {
    "path": "shared/src/shared/settings/merged_source.py",
    "content": "import os\nfrom typing import Any, Dict, Type, Tuple\nfrom pydantic_settings import (\n    BaseSettings,\n    PydanticBaseSettingsSource,\n    JsonConfigSettingsSource,\n)\n\nclass MergedSettingsSource(PydanticBaseSettingsSource):\n    \"\"\"\n    A custom settings source that deep merges several sources.\n    It processes both flat keys and nested dictionaries for nested fields.\n    After merging, it converts nested dict keys to their alias names,\n    re-validates the nested model, and then dumps it with aliases.\n    \"\"\"\n\n    def __init__(\n        self,\n        settings_cls: Type[BaseSettings],\n        init_source: PydanticBaseSettingsSource,\n        env_source: PydanticBaseSettingsSource,\n        dotenv_source: PydanticBaseSettingsSource,\n        file_secret_source: PydanticBaseSettingsSource,\n    ) -> None:\n        super().__init__(settings_cls)\n        self.init_source = init_source\n        self.env_source = env_source\n        self.dotenv_source = dotenv_source\n        self.file_secret_source = file_secret_source\n        self._merged: Dict[str, Any] | None = None\n\n    def __call__(self) -> Dict[str, Any]:\n        env = os.environ.copy()\n        sources = [\n            JsonConfigSettingsSource(self.settings_cls)(),\n            self.init_source(),\n            self.dotenv_source(),\n            self.file_secret_source(),\n            env,\n        ]\n        merged: Dict[str, Any] = {}\n        for source in sources:\n            processed = self.nest_flat_keys(source.copy(), self.settings_cls)\n            merged = self.deep_merge(merged, processed)\n\n        merged = self.normalize_nested_fields(merged, self.settings_cls)\n\n        self._merged = merged\n        return merged\n\n    def get_field_value(self, field: Any, field_name: str) -> Tuple[Any, str, bool]:\n        merged = self()\n        if field_name in merged:\n            return merged[field_name], field_name, True\n\n        return None, field_name, False\n\n    @classmethod\n    def deep_merge(cls, a: Dict[str, Any], b: Dict[str, Any]) -> Dict[str, Any]:\n        result = a.copy()\n        for key, value in b.items():\n            if key in result and isinstance(result[key], dict) and isinstance(value, dict):\n                result[key] = cls.deep_merge(result[key], value)\n            else:\n                result[key] = value\n\n        return result\n\n    @classmethod\n    def nest_flat_keys(cls, data: Dict[str, Any], settings_cls: Type[BaseSettings]) -> Dict[str, Any]:\n        for field_name, field in settings_cls.model_fields.items():\n            field_type = field.annotation\n\n            if isinstance(field_type, type) and issubclass(field_type, BaseSettings):\n                nested_from_flat: Dict[str, Any] = {}\n                for subfield_name, subfield in field_type.model_fields.items():\n                    alias = subfield.alias or subfield_name\n                    if alias in data:\n                        nested_from_flat[subfield_name] = data[alias]\n\n                nested_existing: Dict[str, Any] = {}\n                if field_name in data and isinstance(data[field_name], dict):\n                    nested_existing = data.pop(field_name)\n\n                if nested_from_flat or nested_existing:\n                    combined = cls.deep_merge(nested_existing, nested_from_flat)\n                    data[field_name] = combined\n\n        return data\n\n    @classmethod\n    def convert_to_alias(cls, nested: Dict[str, Any], nested_cls: Type[BaseSettings]) -> Dict[str, Any]:\n        \"\"\"\n        Convert keys from field names to alias names for a nested model.\n        Only include keys defined by the model.\n        \"\"\"\n        alias_dict: Dict[str, Any] = {}\n        for field_name, field in nested_cls.model_fields.items():\n            alias = field.alias or field_name\n            if field_name in nested:\n                alias_dict[alias] = nested[field_name]\n\n        return alias_dict\n\n    @classmethod\n    def normalize_nested_fields(cls, data: Dict[str, Any], settings_cls: Type[BaseSettings]) -> Dict[str, Any]:\n        for field_name, field in settings_cls.model_fields.items():\n            field_type = field.annotation\n            if isinstance(field_type, type) and issubclass(field_type, BaseSettings):\n                if field_name in data and isinstance(data[field_name], dict):\n                    # Convert the keys to alias names first.\n                    alias_data = cls.convert_to_alias(data[field_name], field_type)\n                    # Now, construct the nested model.\n                    nested_model = field_type.model_validate(alias_data)\n                    # Dump it with aliases.\n                    data[field_name] = nested_model.model_dump(by_alias=True)\n\n        return data\n"
  },
  {
    "path": "shared/src/shared/settings/db.py",
    "content": "from pydantic import SecretStr\nfrom pydantic_settings import BaseSettings, SettingsConfigDict\nfrom .abstract import AbstractSettings\n\n\nclass DBSettings(AbstractSettings):\n    host: str\n    port: int\n    name: str\n    user: str\n    password: SecretStr\n\n    model_config = SettingsConfigDict(populate_by_name=True, extra=\"forbid\")\n\n    @property\n    def url(self) -> str:\n        return (\n            f\"postgresql+asyncpg://{self.user}:{self.password.get_secret_value()}\"\n            f\"@{self.host}:{self.port}/{self.name}\"\n        )\n"
  },
  {
    "path": "shared/src/shared/settings/__init__.py",
    "content": "from .miniapp import MiniappSettings\nfrom .db import DBSettings\nfrom .jwt import JwtSettings\nfrom .environment import EnvironmentSettings\nfrom .bot import BotSettings\nfrom .abstract import AbstractSettings\nfrom .docker import DockerSettings\nfrom .worker import WorkerSettings\n\n__all__ = [\n    \"MiniappSettings\",\n    \"DBSettings\",\n    \"JwtSettings\",\n    \"EnvironmentSettings\",\n    \"BotSettings\",\n    \"AbstractSettings\",\n    \"DockerSettings\",\n    \"WorkerSettings\",\n]"
  },
  {
    "path": "shared/src/shared/settings/docker.py",
    "content": "from pydantic import Field\nfrom pydantic_settings import BaseSettings\n\n\nclass DockerSettings(BaseSettings):\n    workers_network_name: str\n    app_root_config_path: str\n    host_root_config_path: str = Field(..., alias='HOST_ROOT_CONFIG_PATH')\n    worker_image: str\n"
  },
  {
    "path": "shared/src/shared/settings/miniapp.py",
    "content": "from pydantic import Field\nfrom pydantic_settings import BaseSettings\n\n\nclass MiniappSettings(BaseSettings):\n    url: str = Field(..., alias=\"MINIAPP_URL\")\n"
  },
  {
    "path": "shared/src/shared/settings/bot.py",
    "content": "from pydantic import SecretStr, Field\nfrom pydantic_settings import BaseSettings\n\n\nclass BotSettings(BaseSettings):\n    token: SecretStr = Field(..., alias=\"BOT_TOKEN\")\n"
  },
  {
    "path": "shared/src/shared/settings/environment.py",
    "content": "import logging\nfrom urllib.parse import urljoin\n\nfrom pydantic import Field\nfrom pydantic_settings import BaseSettings\n\nlogger = logging.getLogger(__name__)\n\nclass EnvironmentSettings(BaseSettings):\n    env_name: str = Field('local', alias='ENVIRONMENT')\n    host: str = Field('localhost:9090', alias='APP_HOST')\n\n    @property\n    def api_host(self) -> str:\n        \"\"\"\n        Returns a fully-qualified base URL for backend API, ensuring:\n        - Scheme is present (defaults to https if missing)\n        - Single `/api` prefix appended (does not duplicate if already present)\n        - No trailing slash guaranteed (consistent with callers building paths)\n        \"\"\"\n        host = (self.host or '').strip()\n\n        # Ensure scheme\n        if not (host.startswith('http://') or host.startswith('https://')):\n            host = f'https://{host}'\n\n        # Ensure trailing slash for urljoin behavior\n        if not host.endswith('/'):\n            host += '/'\n\n        # Join with `api` (urljoin with a relative path avoids duplicating when base already ends with `api/`)\n        api_base = urljoin(host, 'api')\n\n        # Normalize: drop trailing slash for consistency\n        if api_base.endswith('/'):\n            api_base = api_base[:-1]\n\n        return api_base\n\n    @property\n    def is_debug(self) -> bool:\n        return self.env_name in ('development', 'local')\n\n    @property\n    def is_safe(self) -> bool:\n        return self.env_name in ('local',)\n"
  },
  {
    "path": "shared/src/shared/settings/scheduler.py",
    "content": "from pydantic import Field\n\nfrom shared.settings import AbstractSettings\n\n\nclass SchedulerSettings(AbstractSettings):\n    job_store_sqlite_path: str = Field(default='/app/jobs.sqlite')\n"
  },
  {
    "path": "shared/src/shared/settings/jwt.py",
    "content": "from pydantic import SecretStr\nfrom pydantic_settings import (\n    BaseSettings,\n)\n\n\nclass JwtSettings(BaseSettings):\n    secret_key: SecretStr\n    issuer: str\n    audience: str\n    access_expire: int = 60 * 15 * 100  # todo\n    refresh_expire: int = 60 * 60 * 24 * 90\n    allowed_origins: list[str]\n"
  },
  {
    "path": "shared/src/shared/dependencies/__init__.py",
    "content": ""
  },
  {
    "path": "shared/src/shared/dependencies/repositories/worker_message.py",
    "content": "from shared.abstractions.repositories.worker_message import WorkerMessageRepositoryInterface\nfrom shared.infrastructure.main_db.repositories.worker_message import WorkerMessageRepository\nfrom .sessionmaker import get_session_maker\n\n\ndef get_worker_message_repository() -> WorkerMessageRepositoryInterface:\n    return WorkerMessageRepository(\n        session_maker=get_session_maker(),\n    )\n"
  },
  {
    "path": "shared/src/shared/dependencies/repositories/post.py",
    "content": "from shared.abstractions.repositories import PostRepositoryInterface\nfrom shared.infrastructure.main_db.repositories import PostRepository\nfrom .sessionmaker import get_session_maker\n\n\ndef get_post_repository() -> PostRepositoryInterface:\n    return PostRepository(\n        session_maker=get_session_maker(),\n    )\n"
  },
  {
    "path": "shared/src/shared/dependencies/repositories/story.py",
    "content": "from shared.abstractions.repositories import StoryRepositoryInterface\nfrom shared.infrastructure.main_db import StoryRepository\nfrom .sessionmaker import get_session_maker\n\n\ndef get_story_repository() -> StoryRepositoryInterface:\n    return StoryRepository(\n        session_maker=get_session_maker(),\n    )\n"
  },
  {
    "path": "shared/src/shared/dependencies/repositories/user.py",
    "content": "from shared.abstractions.repositories import UserRepositoryInterface\nfrom shared.infrastructure.main_db.repositories import UserRepository\nfrom .sessionmaker import get_session_maker\n\n\ndef get_user_repository() -> UserRepositoryInterface:\n    return UserRepository(\n        session_maker=get_session_maker(),\n    )\n"
  },
  {
    "path": "shared/src/shared/dependencies/repositories/story_to_publish.py",
    "content": "from shared.abstractions.repositories import StoryToPublishRepositoryInterface\nfrom shared.infrastructure.main_db.repositories import StoryToPublishRepository\nfrom .sessionmaker import get_session_maker\n\n\ndef get_story_to_publish_repository() -> StoryToPublishRepositoryInterface:\n    return StoryToPublishRepository(\n        session_maker=get_session_maker(),\n    )\n"
  },
  {
    "path": "shared/src/shared/dependencies/repositories/sessionmaker.py",
    "content": "from sqlalchemy.ext.asyncio import async_sessionmaker\n\nfrom shared.infrastructure.main_db import get_sessionmaker\n\n\ndef get_session_maker() -> async_sessionmaker:\n    return get_sessionmaker()\n"
  },
  {
    "path": "shared/src/shared/dependencies/repositories/story_request.py",
    "content": "from shared.abstractions.repositories import PublishStoryRequestRepositoryInterface\nfrom shared.infrastructure.main_db.repositories import PublishStoryRequestRepository\nfrom .sessionmaker import get_session_maker\n\n\ndef get_story_request_repository() -> PublishStoryRequestRepositoryInterface:\n    return PublishStoryRequestRepository(\n        session_maker=get_session_maker(),\n    )\n"
  },
  {
    "path": "shared/src/shared/dependencies/repositories/post_request.py",
    "content": "from shared.abstractions.repositories import SendPostRequestRepositoryInterface\nfrom shared.infrastructure.main_db.repositories import SendPostRequestRepository\nfrom .sessionmaker import get_session_maker\n\n\ndef get_post_request_repository() -> SendPostRequestRepositoryInterface:\n    return SendPostRequestRepository(\n        session_maker=get_session_maker(),\n    )\n"
  },
  {
    "path": "shared/src/shared/dependencies/repositories/emoji.py",
    "content": "from shared.abstractions.repositories.emojis import EmojisRepositoryInterface\nfrom shared.infrastructure.main_db.repositories.emoji import EmojiRepository\nfrom .sessionmaker import get_session_maker\n\n\ndef get_emoji_repository() -> EmojisRepositoryInterface:\n    return EmojiRepository(\n        session_maker=get_session_maker(),\n    )\n"
  },
  {
    "path": "shared/src/shared/dependencies/repositories/proxy.py",
    "content": "from shared.abstractions.repositories import ProxyRepositoryInterface\nfrom shared.infrastructure.main_db.repositories import ProxyRepository\nfrom .sessionmaker import get_session_maker\n\n\ndef get_proxy_repository() -> ProxyRepositoryInterface:\n    return ProxyRepository(\n        session_maker=get_session_maker(),\n    )\n"
  },
  {
    "path": "shared/src/shared/dependencies/repositories/post_to_publish.py",
    "content": "from shared.abstractions.repositories import PostToPublishRepositoryInterface\nfrom shared.infrastructure.main_db.repositories import PostToPublishRepository\nfrom .sessionmaker import get_session_maker\n\n\ndef get_post_to_publish_repository() -> PostToPublishRepositoryInterface:\n    return PostToPublishRepository(\n        session_maker=get_session_maker(),\n    )\n"
  },
  {
    "path": "shared/src/shared/dependencies/repositories/__init__.py",
    "content": "from .chat import get_chat_repository\nfrom .emoji import get_emoji_repository\nfrom .post import get_post_repository\nfrom .post_request import get_post_request_repository\nfrom .post_to_publish import get_post_to_publish_repository\nfrom .proxy import get_proxy_repository\nfrom .story import get_story_repository\nfrom .story_request import get_story_request_repository\nfrom .story_to_publish import get_story_to_publish_repository\nfrom .user import get_user_repository\n\n__all__ = [\n    \"get_post_repository\",\n    \"get_chat_repository\",\n    \"get_user_repository\",\n    \"get_story_repository\",\n    \"get_post_request_repository\",\n    \"get_story_to_publish_repository\",\n    \"get_proxy_repository\",\n    \"get_post_to_publish_repository\",\n    \"get_emoji_repository\",\n    \"get_story_request_repository\",\n]\n"
  },
  {
    "path": "shared/src/shared/dependencies/repositories/chat_type.py",
    "content": "from shared.abstractions.repositories.chat_type import ChatTypeRepositoryInterface\nfrom shared.infrastructure.main_db.repositories.chat_type import ChatTypeRepository\nfrom .sessionmaker import get_session_maker\n\n\ndef get_chat_type_repository() -> ChatTypeRepositoryInterface:\n    return ChatTypeRepository(\n        session_maker=get_session_maker(),\n    )\n"
  },
  {
    "path": "shared/src/shared/dependencies/repositories/chat.py",
    "content": "from shared.abstractions.repositories import ChatRepositoryInterface\nfrom shared.infrastructure.main_db.repositories import ChatRepository\nfrom .sessionmaker import get_session_maker\n\n\ndef get_chat_repository() -> ChatRepositoryInterface:\n    return ChatRepository(\n        session_maker=get_session_maker(),\n    )\n"
  },
  {
    "path": "shared/src/shared/dependencies/repositories/update_post.py",
    "content": "from shared.abstractions.repositories.update_post import UpdatePostRepositoryInterface\nfrom shared.dependencies.repositories.sessionmaker import get_session_maker\nfrom shared.infrastructure.main_db.repositories.update_post import UpdatePostRepository\n\n\ndef get_update_post_repository() -> UpdatePostRepositoryInterface:\n    return UpdatePostRepository(\n        session_maker=get_session_maker()\n    )"
  },
  {
    "path": "shared/src/shared/dependencies/services/get_scheduler.py",
    "content": "from pathlib import Path\n\nfrom shared.abstractions.services.scheduler import SchedulerInterface\nfrom shared.services.scheduler import Scheduler\n\n\ndef get_scheduler(sqlite_path: str) -> SchedulerInterface:\n    return Scheduler(\n        job_store_sqlite_path=Path(sqlite_path),\n    )\n"
  },
  {
    "path": "shared/src/shared/dependencies/services/upload.py",
    "content": "from typing import Optional\n\nfrom shared.abstractions.services import UploadServiceInterface\nfrom shared.services import UploadService\n\n\ndef get_upload_service(public_backend_base_url: str, app_upload_dir: Optional[str] = None) -> UploadServiceInterface:\n    if app_upload_dir is None:\n        return UploadService(\n            public_backend_base_url=public_backend_base_url,\n        )\n\n    return UploadService(\n        images_dir=app_upload_dir,\n        public_backend_base_url=public_backend_base_url,\n    )\n"
  },
  {
    "path": "shared/src/shared/dependencies/services/emoji.py",
    "content": "from shared.abstractions.services.emoji import EmojiServiceInterface\nfrom shared.dependencies.repositories.emoji import get_emoji_repository\nfrom shared.services.emoji import EmojiService\n\n\ndef get_emoji_service() -> EmojiServiceInterface:\n    return EmojiService(emoji_repository=get_emoji_repository())"
  },
  {
    "path": "shared/src/shared/dependencies/services/__init__.py",
    "content": "from .upload import get_upload_service\n\n__all__ = [\n    \"get_upload_service\",\n]"
  },
  {
    "path": "shared/src/shared/dependencies/services/watcher_client.py",
    "content": "from shared.abstractions.services.watcher_client import WatcherClientInterface\nfrom shared.services.watcher_client import WatcherClient\n\n\ndef get_watcher_client_from_url(base_url: str) -> WatcherClientInterface:\n    return WatcherClient(\n        base_url=base_url,\n    )\n"
  },
  {
    "path": "shared/src/shared/abstractions/__init__.py",
    "content": ""
  },
  {
    "path": "shared/src/shared/abstractions/singleton.py",
    "content": "from abc import ABCMeta\n\n\nclass SingletonMeta(type):\n    _instances = {}\n\n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            cls._instances[cls] = super().__call__(*args, **kwargs)\n        return cls._instances[cls]\n\n\nclass SingletonABCMeta(SingletonMeta, ABCMeta):\n    pass\n\n\nclass Singleton(metaclass=SingletonABCMeta):\n    pass\n"
  },
  {
    "path": "shared/src/shared/abstractions/repositories/abstract.py",
    "content": "from abc import ABC, abstractmethod\n\n\nclass CRUDRepositoryInterface[PK_TYPE, Model, CreateDTO, UpdateDTO](ABC):\n    @abstractmethod\n    async def create(self, obj: CreateDTO) -> PK_TYPE:\n        pass\n\n    @abstractmethod\n    async def get(self, obj_id: PK_TYPE) -> Model:\n        pass\n\n    @abstractmethod\n    async def update(self, obj_id: PK_TYPE, obj: UpdateDTO) -> Model:\n        pass\n\n    @abstractmethod\n    async def delete(self, obj_id: PK_TYPE) -> None:\n        pass\n\n    @abstractmethod\n    async def get_all(self, limit: int = 100, offset: int = 0) -> list[Model]:\n        pass\n\n\nclass UOWInterface(ABC):\n    @abstractmethod\n    async def commit(self) -> None:\n        pass\n\n    @abstractmethod\n    async def rollback(self) -> None:\n        pass\n\n    @abstractmethod\n    async def attach(self, *repositories: CRUDRepositoryInterface) -> None:\n        pass\n\n    @abstractmethod\n    async def __aenter__(self):\n        pass\n\n    @abstractmethod\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        pass\n"
  },
  {
    "path": "shared/src/shared/abstractions/repositories/worker_message.py",
    "content": "from abc import ABC, abstractmethod\nfrom datetime import datetime\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom shared.abstractions.repositories.uuid_pk_abstract import UUIDPKRepositoryInterface\nfrom shared.domain.dto import CreateWorkerMessageDTO, UpdateWorkerMessageDTO\nfrom shared.domain.enums import WorkerMessageStatus\nfrom shared.domain.models import WorkerMessage\n\n\nclass WorkerMessageRepositoryInterface(\n    UUIDPKRepositoryInterface[WorkerMessage, CreateWorkerMessageDTO, UpdateWorkerMessageDTO],\n    ABC,\n):\n    @abstractmethod\n    async def get_queued_message(self) -> Optional[WorkerMessage]:\n        ...\n\n    @abstractmethod\n    async def set_message_status(\n            self,\n            message_id: UUID,\n            status: WorkerMessageStatus,\n            sent_at: Optional[datetime] = None\n    ) -> None:\n        ...\n\n    @abstractmethod\n    async def get_messages_from_same_request(self, message_id: UUID) -> list[WorkerMessage]:\n        ...\n"
  },
  {
    "path": "shared/src/shared/abstractions/repositories/post.py",
    "content": "from abc import ABC, abstractmethod\nfrom uuid import UUID\n\nfrom .uuid_pk_abstract import UUIDPKRepositoryInterface\nfrom shared.domain.dto import CreatePostDTO, UpdatePostDTO\nfrom shared.domain.models import Post\nfrom sqlalchemy import select\n\nclass PostRepositoryInterface(\n    UUIDPKRepositoryInterface[Post, CreatePostDTO, UpdatePostDTO],\n    ABC,\n):\n    @abstractmethod\n    async def get_all(self, limit: int = 100, offset: int = 0, joined: bool = True) -> list[Post]:\n        ...\n\n    @abstractmethod\n    async def get_templates(self, limit: int = 100, offset: int = 0, joined: bool = True) -> list[Post]:\n        ...\n\n    @abstractmethod\n    async def update(self, obj_id: UUID, obj: UpdatePostDTO) -> Post:\n        ...\n"
  },
  {
    "path": "shared/src/shared/abstractions/repositories/story.py",
    "content": "from abc import ABC\n\nfrom shared.domain.dto.story import CreateStoryDTO, UpdateStoryDTO\nfrom shared.domain.models import Story\nfrom .uuid_pk_abstract import UUIDPKRepositoryInterface\n\n\nclass StoryRepositoryInterface(\n    UUIDPKRepositoryInterface[Story, CreateStoryDTO, UpdateStoryDTO],\n    ABC,\n):\n    ...\n"
  },
  {
    "path": "shared/src/shared/abstractions/repositories/user.py",
    "content": "from typing import Optional, List\nfrom abc import ABC, abstractmethod\nfrom uuid import UUID\n\nfrom .uuid_pk_abstract import UUIDPKRepositoryInterface\nfrom shared.domain.dto import CreateUserDTO, UpdateUserDTO\nfrom shared.domain.models import User\n\n\nclass UserRepositoryInterface(\n    UUIDPKRepositoryInterface[User, CreateUserDTO, UpdateUserDTO],\n    ABC,\n):\n    @abstractmethod\n    async def get_by_username(self, username: str) -> User:\n        ...\n\n    @abstractmethod\n    async def get_managers(self) -> List[User]:\n        ...\n\n    @abstractmethod\n    async def get_by_telegram_id(self, telegram_id: int) -> Optional[User]:\n        ...\n\n    @abstractmethod\n    async def set_proxy(self, user_id: UUID, proxy_id: UUID) -> None:\n        ...\n"
  },
  {
    "path": "shared/src/shared/abstractions/repositories/story_to_publish.py",
    "content": "from abc import ABC\n\nfrom shared.domain.dto import CreateStoryToPublishDTO, UpdateStoryToPublishDTO\nfrom shared.domain.models import StoryToPublish\nfrom .uuid_pk_abstract import UUIDPKRepositoryInterface\n\n\nclass StoryToPublishRepositoryInterface(\n    UUIDPKRepositoryInterface[StoryToPublish, CreateStoryToPublishDTO, UpdateStoryToPublishDTO],\n    ABC,\n):\n    ...\n"
  },
  {
    "path": "shared/src/shared/abstractions/repositories/story_request.py",
    "content": "from abc import ABC, abstractmethod\nfrom typing import Optional\n\nfrom .uuid_pk_abstract import UUIDPKRepositoryInterface\nfrom shared.domain.dto import CreatePublishStoryRequestDTO, UpdatePublishStoryRequestDTO\nfrom shared.domain.models import PublishStoryRequest\n\n\nclass PublishStoryRequestRepositoryInterface(\n    UUIDPKRepositoryInterface[PublishStoryRequest, CreatePublishStoryRequestDTO, UpdatePublishStoryRequestDTO],\n    ABC,\n):\n    @abstractmethod\n    async def get_queued_message(self) -> Optional[PublishStoryRequest]:\n        pass\n"
  },
  {
    "path": "shared/src/shared/abstractions/repositories/post_request.py",
    "content": "from abc import ABC, abstractmethod\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom .uuid_pk_abstract import UUIDPKRepositoryInterface\nfrom shared.domain.dto.post_request import CreateSendPostRequestDTO, UpdateSendPostRequestDTO\nfrom shared.domain.models.post_request import SendPostRequest\n\n\nclass SendPostRequestRepositoryInterface(\n    UUIDPKRepositoryInterface[SendPostRequest, CreateSendPostRequestDTO, UpdateSendPostRequestDTO],\n    ABC,\n):\n    @abstractmethod\n    async def get_queued_message(self) -> Optional[SendPostRequest]:\n        pass\n\n    @abstractmethod\n    async def get_requests_from_same_publication(self, request_id: UUID) -> list[SendPostRequest]:\n        ...\n"
  },
  {
    "path": "shared/src/shared/abstractions/repositories/proxy.py",
    "content": "from abc import ABC, abstractmethod\n\nfrom shared.domain.dto import CreateProxyDTO, UpdateProxyDTO\nfrom shared.domain.models import Proxy\nfrom .uuid_pk_abstract import UUIDPKRepositoryInterface\n\n\nclass ProxyRepositoryInterface(\n    UUIDPKRepositoryInterface[Proxy, CreateProxyDTO, UpdateProxyDTO],\n    ABC,\n):\n    @abstractmethod\n    async def get_available_proxies_count(self) -> int:\n        ...\n\n    @abstractmethod\n    async def get_available_proxy(self) -> Proxy:\n        ...\n"
  },
  {
    "path": "shared/src/shared/abstractions/repositories/post_to_publish.py",
    "content": "from abc import ABC, abstractmethod\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom shared.domain.dto import CreatePostToPublishDTO, UpdatePostToPublishDTO\nfrom shared.domain.enums import PublicationStatus\nfrom shared.domain.models import PostToPublish\nfrom .uuid_pk_abstract import UUIDPKRepositoryInterface\n\n\nclass PostToPublishRepositoryInterface(\n    UUIDPKRepositoryInterface[PostToPublish, CreatePostToPublishDTO, UpdatePostToPublishDTO],\n    ABC,\n):\n    @abstractmethod\n    async def get_queued_post(self) -> Optional[PostToPublish]:\n        ...\n\n    @abstractmethod\n    async def set_status(self, post_id: UUID, status: PublicationStatus) -> None:\n        ...\n\n    @abstractmethod\n    async def get_posts_by_manager(self, responsible_manager_id: UUID) -> list[PostToPublish]:\n        ...\n\n"
  },
  {
    "path": "shared/src/shared/abstractions/repositories/__init__.py",
    "content": "from .chat import ChatRepositoryInterface\nfrom .post import PostRepositoryInterface\nfrom .post_request import SendPostRequestRepositoryInterface\nfrom .story_request import PublishStoryRequestRepositoryInterface\nfrom .post_to_publish import PostToPublishRepositoryInterface\nfrom .story_to_publish import StoryToPublishRepositoryInterface\nfrom .user import UserRepositoryInterface\nfrom .story import StoryRepositoryInterface\nfrom .worker_message import WorkerMessageRepositoryInterface\nfrom .proxy import ProxyRepositoryInterface\n\n\n__all__ = [\n    \"UserRepositoryInterface\",\n    \"ChatRepositoryInterface\",\n    \"PostRepositoryInterface\",\n    \"StoryRepositoryInterface\",\n    \"SendPostRequestRepositoryInterface\",\n    \"PublishStoryRequestRepositoryInterface\",\n    \"PostToPublishRepositoryInterface\",\n    \"StoryToPublishRepositoryInterface\",\n    \"WorkerMessageRepositoryInterface\",\n    \"ProxyRepositoryInterface\",\n]\n"
  },
  {
    "path": "shared/src/shared/abstractions/repositories/emojis.py",
    "content": "from abc import ABC, abstractmethod\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom .uuid_pk_abstract import UUIDPKRepositoryInterface\nfrom ...domain.dto.emoji import CreateEmojiDTO, UpdateEmojiDTO\nfrom ...domain.models.emoji import Emoji\n\n\nclass EmojisRepositoryInterface(\n    UUIDPKRepositoryInterface[Emoji, CreateEmojiDTO, UpdateEmojiDTO],\n    ABC,\n):\n    @abstractmethod\n    async def get_by_custom_emoji_id(self, custom_emoji_id: int) -> Optional[Emoji]:\n        ...\n\n    @abstractmethod\n    async def get_existing_custom_ids(self, ids: list[str]) -> set[str]:\n        ...\n\n    @abstractmethod\n    async def remove(self, emoji_id: UUID) -> None:\n        ...\n"
  },
  {
    "path": "shared/src/shared/abstractions/repositories/chat_type.py",
    "content": "from abc import ABC\n\nfrom shared.domain.dto.chat_type import CreateChatTypeDTO, UpdateChatTypeDTO\nfrom shared.domain.models.chat_type import ChatType\nfrom .uuid_pk_abstract import UUIDPKRepositoryInterface\n\n\nclass ChatTypeRepositoryInterface(\n    UUIDPKRepositoryInterface[ChatType, CreateChatTypeDTO, UpdateChatTypeDTO],\n    ABC,\n):\n    ...\n"
  },
  {
    "path": "shared/src/shared/abstractions/repositories/chat.py",
    "content": "from abc import ABC, abstractmethod\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom .uuid_pk_abstract import UUIDPKRepositoryInterface\nfrom shared.domain.dto.chat import CreateChatDTO, UpdateChatDTO\nfrom shared.domain.models.chat import Chat\n\n\nclass ChatRepositoryInterface(\n    UUIDPKRepositoryInterface[Chat, CreateChatDTO, UpdateChatDTO],\n    ABC,\n):\n    @abstractmethod\n    async def get_by_telegram_id(self, telegram_id: int) -> Chat:\n        ...\n\n    @abstractmethod\n    async def get_by_type(self, type_id: UUID) -> Optional[list[Chat]]:\n        ...\n\n    @abstractmethod\n    async def get_by_invite_link(self, invite_link: str) -> Chat:\n        ...\n"
  },
  {
    "path": "shared/src/shared/abstractions/repositories/uuid_pk_abstract.py",
    "content": "from abc import ABC\nfrom uuid import UUID\n\nfrom .abstract import CRUDRepositoryInterface\n\n\nclass UUIDPKRepositoryInterface[Model, CreateDTO, UpdateDTO](\n    CRUDRepositoryInterface[UUID, Model, CreateDTO, UpdateDTO],\n    ABC,\n):\n    ...\n"
  },
  {
    "path": "shared/src/shared/abstractions/repositories/update_post.py",
    "content": "from abc import ABC\n\nfrom shared.domain.dto.update_post import UpdateUpdatePostDTO, CreateUpdatePostDTO\nfrom shared.domain.models.update_post import UpdatePost\nfrom .uuid_pk_abstract import UUIDPKRepositoryInterface\n\n\nclass UpdatePostRepositoryInterface(\n    UUIDPKRepositoryInterface[UpdatePost, CreateUpdatePostDTO, UpdateUpdatePostDTO],\n    ABC,\n):\n    ..."
  },
  {
    "path": "shared/src/shared/abstractions/services/upload.py",
    "content": "from abc import ABC, abstractmethod\n\n\nclass UploadServiceInterface(ABC):\n    @abstractmethod\n    async def upload(self, file: bytes, extension: str) -> str:\n        ...\n\n    @abstractmethod\n    def get_file_path(self, filename: str) -> str:\n        ...\n\n    @abstractmethod\n    async def initialize(self) -> None:\n        ...\n\n    @abstractmethod\n    def get_file_url(self, name: str) -> str:\n        ...\n\n    @staticmethod\n    @abstractmethod\n    def get_extension(filename: str) -> str:\n        ...\n"
  },
  {
    "path": "shared/src/shared/abstractions/services/emoji.py",
    "content": "from abc import ABC, abstractmethod\nfrom uuid import UUID\nfrom typing import Optional\n\nfrom shared.domain.dto.emoji import CreateEmojiDTO\nfrom shared.domain.models.emoji import Emoji\n\n\nclass EmojiServiceInterface(ABC):\n    @abstractmethod\n    async def create_emoji(self, emoji: CreateEmojiDTO) -> UUID:\n        ...\n\n    @abstractmethod\n    async def get_all_emojis(self) -> list[Emoji]:\n        ...\n\n    @abstractmethod\n    async def get_emoji_by_custom_emoji_id(self, custom_emoji_id: int) -> Optional[Emoji]:\n        ...\n\n    @abstractmethod\n    async def remove_added_emoji(self, emoji_id: UUID) -> None:\n        ...\n\n    @abstractmethod\n    async def get_existing_custom_ids(self, ids: list[str]) -> list[str]:\n        ...\n"
  },
  {
    "path": "shared/src/shared/abstractions/services/__init__.py",
    "content": "from .upload import UploadServiceInterface\nfrom .consumer import ConsumerInterface\n\n__all__ = [\n    \"UploadServiceInterface\",\n    \"ConsumerInterface\",\n]\n"
  },
  {
    "path": "shared/src/shared/abstractions/services/watcher_client.py",
    "content": "from abc import ABC, abstractmethod\n\nfrom shared.domain.requests import PublicationStartedRequest, RequestProcessingStartedRequest, MessageSentRequest, RequestStatusChangedRequest\n\n\nclass WatcherClientInterface(ABC):\n    @abstractmethod\n    async def report_publication_started(self, request: PublicationStartedRequest) -> None:\n        ...\n\n    @abstractmethod\n    async def report_request_processing_started(self, request: RequestProcessingStartedRequest) -> None:\n        ...\n\n    @abstractmethod\n    async def report_message_sent(self, request: MessageSentRequest) -> None:\n        ...\n\n    @abstractmethod\n    async def report_request_status_changed(self, request: RequestStatusChangedRequest) -> None:\n        ...\n"
  },
  {
    "path": "shared/src/shared/abstractions/services/consumer.py",
    "content": "from abc import ABC, abstractmethod\nfrom typing import NoReturn, Any\n\n\nclass ConsumerInterface[ExecutableServiceInterface: Any](ABC):\n    @abstractmethod\n    async def execute(self) -> NoReturn:\n        ...\n"
  },
  {
    "path": "shared/src/shared/abstractions/services/scheduler.py",
    "content": "from abc import ABC, abstractmethod\nfrom collections.abc import Callable\nfrom datetime import datetime\nfrom typing import Coroutine, Any\n\n\nclass SchedulerInterface(ABC):\n    @abstractmethod\n    def schedule_once(\n            self,\n            callback: Callable[[Any], Coroutine[Any, Any, None]],\n            runs_on: datetime,\n            args: tuple[Any, ...] = (),\n            job_id: str = None,\n            misfire_grace_time: int = 60,\n    ) -> None:\n        ...\n\n    @abstractmethod\n    def initialize(self) -> None:\n        ...\n\n    @abstractmethod\n    def schedule_daily(\n            self,\n            callback: Callable[[Any], Coroutine[Any, Any, None]],\n            hour: int,\n            minute: int,\n            args: tuple[Any, ...] = (),\n            job_id: str | None = None,\n            misfire_grace_time: int = 3600,\n    ) -> None:\n        ...\n\n    @abstractmethod\n    def add_listener(self, callback: Callable[[Any], None], mask: int) -> None:\n        \"\"\"Attach a scheduler event listener (e.g., for EVENT_JOB_MISSED).\"\"\"\n        ...\n"
  },
  {
    "path": "shared/src/shared/infrastructure/__init__.py",
    "content": ""
  },
  {
    "path": "shared/src/shared/infrastructure/sqlalchemy/__init__.py",
    "content": "from .exceptions import NotFoundException\nfrom .repository import AbstractSQLAlchemyRepository\n\n__all__ = [\n    \"AbstractSQLAlchemyRepository\",\n    \"NotFoundException\",\n]"
  },
  {
    "path": "shared/src/shared/infrastructure/sqlalchemy/exceptions.py",
    "content": "class NotFoundException(Exception):\n    ...\n"
  },
  {
    "path": "shared/src/shared/infrastructure/sqlalchemy/repository.py",
    "content": "import logging\nfrom abc import abstractmethod\nfrom dataclasses import dataclass, field\nfrom datetime import datetime\nfrom typing import Type, Optional\nfrom asyncpg.pgproto.pgproto import UUID as asyncpgUUID\n\nfrom sqlalchemy import select\nfrom sqlalchemy.exc import NoResultFound\nfrom sqlalchemy.ext.asyncio import async_sessionmaker\nfrom sqlalchemy.orm import joinedload, InstrumentedAttribute\n\nfrom shared.abstractions.repositories.abstract import CRUDRepositoryInterface\nfrom shared.infrastructure.sqlalchemy.exceptions import NotFoundException\nfrom sqlalchemy.inspection import inspect as sa_inspect\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass AbstractSQLAlchemyRepository[Entity, Model, CreateDTO, UpdateDTO, PK_TYPE](\n    CRUDRepositoryInterface[PK_TYPE, Model, CreateDTO, UpdateDTO],\n):\n    session_maker: async_sessionmaker\n\n    joined_fields: dict[str, Optional[list[str]]] = field(default_factory=dict)\n    options: list = field(default_factory=list)\n\n    _soft_delete: bool = field(default=False)\n\n    def __post_init__(self):\n        self.entity: Type[Entity] = self.__orig_bases__[0].__args__[0]  # noqa\n        self._set_lazy_fields()\n\n    def _set_lazy_fields(self):\n        if not self.joined_fields:\n            return\n\n        def convert_to_nested_dict(fields):\n            return {field: {} for field in (fields or [])}\n\n        def get_associated_entity_class(attr_field):\n            \"\"\"\n            Extract the associated entity class from an InstrumentedAttribute.\n            \"\"\"\n            if hasattr(attr_field, \"comparator\") and hasattr(attr_field.comparator, \"prop\"):\n                relationship_prop = attr_field.comparator.prop\n                if hasattr(relationship_prop, \"mapper\"):\n                    return relationship_prop.mapper.entity\n            return None\n\n        def build_joinedload(attr_field, subfields, depth=0):\n            \"\"\"\n            Recursively build joinedload options for nested relationships.\n            \"\"\"\n            associated_entity = get_associated_entity_class(attr_field)\n            if not associated_entity:\n                raise ValueError(f\"Cannot determine associated entity class for attribute {attr_field}\")\n\n            loader = joinedload(attr_field)\n            for subfield, nested_subfields in subfields.items():\n                nested_attr_field = getattr(associated_entity, subfield, None)\n                if nested_attr_field is None:\n                    raise ValueError(f\"{subfield} is not a valid attribute of {associated_entity}\")\n\n                subloader = build_joinedload(nested_attr_field, nested_subfields, depth + 1)\n                loader = loader.options(subloader)\n            return loader\n\n        # Convert self.joined_fields to nested dictionaries if not already\n        joined_fields = {}\n        for field in self.joined_fields:\n            joined_fields[field] = convert_to_nested_dict(self.joined_fields[field])\n\n        options_to_add = []\n        for attr, subfields in joined_fields.items():\n            attr_field: InstrumentedAttribute = getattr(self.entity, attr)\n            if attr_field.comparator.prop.uselist:\n                loader = build_joinedload(attr_field, subfields or {})\n                options_to_add.append(loader)\n            else:\n                options_to_add.append(joinedload(attr_field))\n\n        self.options.extend(options_to_add)\n\n    async def create(self, obj: CreateDTO) -> int | asyncpgUUID:\n        async with self.session_maker() as session:\n            async with session.begin():\n                entity = self.create_dto_to_entity(obj)\n                session.add(entity)\n\n            await session.refresh(entity)\n            entity_id = entity.id\n\n        return entity_id\n\n    async def get(self, obj_id: PK_TYPE) -> Model:\n        async with self.session_maker() as session:\n            try:\n                stmt = (\n                    select(self.entity)\n                    .where(self.entity.id == obj_id)\n                )\n                if self._soft_delete:\n                    stmt = stmt.where(self.entity.deleted_at.is_(None))\n                if self.options:\n                    stmt = stmt.options(*self.options)\n\n                res = await session.execute(stmt)\n\n                if self.options:\n                    res = res.unique()\n\n                obj = res.scalars().one()\n                return self.entity_to_model(obj) if obj else None\n            except NoResultFound:\n                raise NotFoundException\n\n    async def update(self, obj_id: PK_TYPE, obj: UpdateDTO) -> Model:\n        async with self.session_maker() as session:\n            async with session.begin():\n                entity = await session.get(self.entity, obj_id)\n                if self._soft_delete and entity.deleted_at:\n                    raise NotFoundException()\n\n                for key, value in obj.model_dump(exclude_unset=True).items():\n                    setattr(entity, key, value)\n\n            await self._refresh_all(session, entity)\n\n        return self.entity_to_model(entity)\n\n    async def delete(self, obj_id: PK_TYPE) -> None:\n        async with self.session_maker() as session:\n            async with session.begin():\n                obj = await session.get(self.entity, obj_id)\n                if not obj:\n                    raise NotFoundException\n\n                if self._soft_delete:\n                    if obj.deleted_at:\n                        raise NotFoundException\n                    else:\n                        obj.deleted_at = datetime.now()\n                else:\n                    await session.delete(obj)\n\n    async def get_all(self, limit: int = 100, offset: int = 0, joined: bool = True) -> list[Model]:\n        async with self.session_maker() as session:\n            stmt = (\n                select(self.entity)\n                .limit(limit)\n                .offset(offset)\n            )\n            if joined and self.options:\n                stmt = stmt.options(*self.options)\n\n            if self._soft_delete:\n                stmt = stmt.where(self.entity.deleted_at.is_(None))\n\n            res = await session.execute(stmt)\n\n            if self.options:\n                res = res.unique()\n\n            objs = res.scalars().all()\n\n            return [self.entity_to_model(entity) for entity in objs]\n\n    @abstractmethod\n    def entity_to_model(self, entity: Entity) -> Model:\n        ...\n\n    @abstractmethod\n    def create_dto_to_entity(self, dto: CreateDTO) -> Entity:\n        ...\n\n    # добавь в класс AbstractSQLAlchemyRepository\n    @staticmethod\n    async def _refresh_all(session, entity) -> None:\n        mapper = sa_inspect(entity.__class__)\n        column_names = [c.key for c in mapper.columns]\n        relationship_names = [r.key for r in mapper.relationships]\n        await session.refresh(entity, attribute_names=column_names + relationship_names)\n"
  },
  {
    "path": "shared/src/shared/infrastructure/main_db/__init__.py",
    "content": "from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker\n\nfrom .migrator import apply_migrations\nfrom .repositories import (\n    UserRepository,\n    ChatRepository,\n    PostRepository,\n    StoryRepository,\n    SendPostRequestRepository,\n    StoryToPublishRepository,\n    PostToPublishRepository,\n    PublishStoryRequestRepository,\n    WorkerMessageRepository,\n    ProxyRepository,\n    NoFreeProxiesException,\n)\nfrom .settings import MainDBSettings\n\n__all__ = [\n    \"session_maker\",\n    \"UserRepository\",\n    \"ChatRepository\",\n    \"PostRepository\",\n    \"StoryRepository\",\n    \"SendPostRequestRepository\",\n    \"PublishStoryRequestRepository\",\n    \"StoryToPublishRepository\",\n    \"PostToPublishRepository\",\n    \"WorkerMessageRepository\",\n    \"ProxyRepository\",\n    \"MainDBSettings\",\n    \"apply_migrations\",\n    \"NoFreeProxiesException\",\n]\n\nsession_maker = None\n\n\ndef get_sessionmaker():\n    return session_maker\n\n\ndef init_db(url: str):\n    global session_maker\n\n    engine = create_async_engine(\n        url,\n        echo=False,\n        pool_recycle=1800,\n        pool_timeout=30,\n    )\n\n    session_maker = async_sessionmaker(engine, expire_on_commit=False)\n"
  },
  {
    "path": "shared/src/shared/infrastructure/main_db/settings.py",
    "content": "from pathlib import Path\nfrom typing import ClassVar\n\nfrom pydantic import SecretStr, Field\nfrom pydantic_settings import SettingsConfigDict\n\nfrom shared.settings import DBSettings\n\n\nclass MainDBSettings(DBSettings):\n    host: str = Field(..., alias='MAIN_DB_HOST')\n    port: int = Field(..., alias='MAIN_DB_PORT')\n    name: str = Field(..., alias='MAIN_DB_NAME')\n    user: str = Field(..., alias='MAIN_DB_USER')\n    password: SecretStr = Field(..., alias='MAIN_DB_PASSWORD')\n\n    model_config = SettingsConfigDict(\n        extra=\"ignore\",\n        json_file=Path(__file__).parent.parent.parent / \"settings.json\",\n        json_file_encoding=\"utf-8\",\n        populate_by_name=True,\n    )\n"
  },
  {
    "path": "shared/src/shared/infrastructure/main_db/entities.py",
    "content": "from datetime import datetime, time, date\nfrom enum import StrEnum\nfrom typing import Optional\nfrom uuid import UUID as pyUUID\n\nfrom sqlalchemy import ForeignKey, UUID, Enum, func, BigInteger, Table, Column\nfrom sqlalchemy.dialects.postgresql import TIMESTAMP, JSONB\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import Mapped, mapped_column, relationship\nfrom sqlalchemy import Enum as PgEnum\nfrom shared.domain.enums import (\n    UserRole,\n    SendPostRequestStatus,\n    PublishStoryRequestStatus,\n    WorkerMessageType,\n    WorkerMessageStatus, ScheduledType, PublicationStatus,\n)\n\nBase = declarative_base()\n\n\nclass AbstractBase(Base):\n    __abstract__ = True\n\n    id: Mapped[pyUUID] = mapped_column(UUID(as_uuid=True), primary_key=True)\n    created_at: Mapped[datetime] = mapped_column(\n        TIMESTAMP,\n        server_default=func.now(),\n    )\n    updated_at: Mapped[datetime] = mapped_column(\n        TIMESTAMP,\n        server_default=func.now(),\n        onupdate=func.current_timestamp(),\n    )\n\n\nclass UserChat(AbstractBase):\n    __tablename__ = \"user_chat\"\n\n    # составной PK из двух FK\n    user_id: Mapped[UUID] = mapped_column(\n        ForeignKey(\"users.id\", ondelete=\"CASCADE\"),\n        primary_key=True,\n    )\n    chat_id: Mapped[UUID] = mapped_column(\n        ForeignKey(\"chats.id\", ondelete=\"CASCADE\"),\n        primary_key=True,\n    )\n\n\nclass User(AbstractBase):\n    __tablename__ = \"users\"\n\n    telegram_id: Mapped[int] = mapped_column(BigInteger, unique=True)\n    telegram_username: Mapped[Optional[str]]\n    telegram_first_name: Mapped[Optional[str]]\n    telegram_last_name: Mapped[Optional[str]]\n    telegram_language_code: Mapped[Optional[str]]\n\n    role: Mapped[UserRole] = mapped_column(Enum(UserRole))\n\n    session_string: Mapped[Optional[str]]\n    proxy_id: Mapped[Optional[UUID]] = mapped_column(ForeignKey('proxies.id'), unique=True)\n\n    is_banned: Mapped[bool] = mapped_column(default=False, server_default='false')\n    assistant_enabled: Mapped[bool] = mapped_column(default=False)\n\n    proxy: Mapped[Optional['Proxy']] = relationship('Proxy')\n\n    # все чаты, в которых он участвует\n    chats: Mapped[list[\"Chat\"]] = relationship(\n        \"Chat\",\n        secondary=\"user_chat\",\n        back_populates=\"users\",\n    )\n\n\nclass ChatType(AbstractBase):\n    __tablename__ = \"chat_type\"\n\n    name: Mapped[str]\n    description: Mapped[Optional[str]] = mapped_column(default=None)\n    chats: Mapped[Optional[list['Chat']]] = relationship(\"Chat\", back_populates=\"chat_type\")\n\n\nclass Chat(AbstractBase):\n    __tablename__ = \"chats\"\n\n    chat_type_id: Mapped[UUID] = mapped_column(ForeignKey('chat_type.id'), nullable=True)\n    name: Mapped[str]\n    invite_link: Mapped[Optional[str]]\n    chat_id: Mapped[int] = mapped_column(BigInteger, unique=True)\n    responsible_manager_id: Mapped[UUID] = mapped_column(ForeignKey('users.id'))\n    responsible_manager: Mapped[\"User\"] = relationship(\"User\", foreign_keys=[responsible_manager_id],\n                                                       passive_deletes=\"all\")\n\n    chat_type: Mapped[Optional[\"ChatType\"]] = relationship(\n        \"ChatType\",\n        back_populates=\"chats\",\n        foreign_keys=[chat_type_id]\n    )\n    # все пользователи в этом чате\n    users: Mapped[list[User]] = relationship(\n        \"User\",\n        secondary=\"user_chat\",\n        back_populates=\"chats\",\n    )\n\n\nclass Post(AbstractBase):\n    __tablename__ = \"posts\"\n\n    name: Mapped[str]\n    text: Mapped[str]\n    image_path: Mapped[Optional[str]]\n    is_template: Mapped[bool] = mapped_column(default=False, server_default='false')\n\n    html: Mapped[Optional[str]]\n    entities: Mapped[Optional[list[dict]]] = mapped_column(JSONB)\n    deleted_at: Mapped[Optional[datetime]]\n\n\npost_to_publish_chat_association = Table(\n    \"post_to_publish_chat_association\",\n    AbstractBase.metadata,\n    Column(\"post_to_publish_id\", ForeignKey(\"posts_to_publish.id\", ondelete=\"CASCADE\"), primary_key=True),\n    Column(\"chat_id\", ForeignKey(\"chats.id\", ondelete=\"CASCADE\"), primary_key=True),\n)\n\nclass UpdatePost(AbstractBase):\n    __tablename__ = \"update_post\"\n\n    post_id: Mapped[UUID] = mapped_column(ForeignKey(\"posts.id\"))\n    post_json: Mapped[dict] = mapped_column(JSONB)\n    author_id: Mapped[UUID] = mapped_column(ForeignKey(\"users.id\"))\n\n\nclass PostToPublish(AbstractBase):\n    __tablename__ = \"posts_to_publish\"\n\n    post_id: Mapped[pyUUID] = mapped_column(ForeignKey(\"posts.id\"))\n    creator_id: Mapped[pyUUID] = mapped_column(ForeignKey(\"users.id\", ondelete=\"SET NULL\"),\n                                               nullable=True)\n    responsible_manager_id: Mapped[Optional[pyUUID]] = mapped_column(ForeignKey(\"users.id\", ondelete=\"SET NULL\"))\n    scheduled_type: Mapped[ScheduledType]\n    scheduled_date: Mapped[Optional[date]]\n    scheduled_time: Mapped[time]\n    status: Mapped[PublicationStatus]\n\n    responsible_manager: Mapped[User] = relationship(\"User\", foreign_keys=[responsible_manager_id],\n                                                     passive_deletes=\"all\")\n    creator: Mapped[User] = relationship(\"User\", foreign_keys=[creator_id], passive_deletes=\"all\")\n    post: Mapped[Post] = relationship(\"Post\")\n    chats: Mapped[list[Chat]] = relationship(\"Chat\", secondary=post_to_publish_chat_association)\n    deleted_at: Mapped[Optional[datetime]]\n\n\nclass SendPostRequest(AbstractBase):\n    __tablename__ = \"send_post_requests\"\n\n    post_id: Mapped[pyUUID] = mapped_column(ForeignKey(\"posts.id\"), )\n    chat_id: Mapped[pyUUID] = mapped_column(ForeignKey(\"chats.id\", ondelete=\"CASCADE\"))\n    user_id: Mapped[pyUUID] = mapped_column(ForeignKey(\"users.id\", ondelete=\"SET NULL\"),\n                                            nullable=True)\n    scheduled_at: Mapped[Optional[datetime]]\n\n    publication_id: Mapped[pyUUID] = mapped_column(ForeignKey(\"posts_to_publish.id\", ondelete=\"CASCADE\"))\n\n    status: Mapped[SendPostRequestStatus] = mapped_column(Enum(SendPostRequestStatus))\n    sent_at: Mapped[Optional[datetime]]\n    stale_at: Mapped[Optional[datetime]]\n\n    user: Mapped[\"User\"] = relationship(\"User\", passive_deletes=\"all\")\n    chat: Mapped[\"Chat\"] = relationship(\"Chat\")\n    post: Mapped[\"Post\"] = relationship(\"Post\")\n    deleted_at: Mapped[Optional[datetime]]\n\nclass Story(AbstractBase):\n    __tablename__ = 'stories'\n\n    name: Mapped[str]\n    file_path: Mapped[str]\n    text: Mapped[Optional[str]]\n\n\nclass StoryToPublish(AbstractBase):\n    __tablename__ = 'stories_to_publish'\n\n    story_id: Mapped[pyUUID] = mapped_column(ForeignKey(\"stories.id\"))\n    manager_id: Mapped[pyUUID] = mapped_column(ForeignKey(\"users.id\", ondelete=\"SET NULL\"))\n    scheduled_type: Mapped[ScheduledType]\n    scheduled_date: Mapped[date]\n    scheduled_time: Mapped[time]\n    status: Mapped[PublicationStatus]\n\n    manager: Mapped[\"User\"] = relationship(\"User\", passive_deletes=\"all\")\n    story: Mapped[\"Story\"] = relationship(\"Story\")\n\n\nclass PublishStoryRequest(AbstractBase):\n    __tablename__ = \"publish_story_requests\"\n\n    story_id: Mapped[pyUUID] = mapped_column(ForeignKey(\"stories.id\"))\n    user_id: Mapped[pyUUID] = mapped_column(ForeignKey(\"users.id\", ondelete=\"SET NULL\"))\n    scheduled_at: Mapped[Optional[datetime]]\n\n    publication_id: Mapped[pyUUID] = mapped_column(ForeignKey(\"stories_to_publish.id\"))\n\n    status: Mapped[PublishStoryRequestStatus] = mapped_column(Enum(PublishStoryRequestStatus))\n    published_at: Mapped[Optional[datetime]]\n\n    user: Mapped[\"User\"] = relationship(\"User\", passive_deletes=\"all\")\n    story: Mapped[\"Story\"] = relationship(\"Story\")\n\n\nclass EmojiFormat(StrEnum):\n    static = \"static\"     # .webp и PNG\n    video  = \"video\"      # .webm\n    lottie = \"lottie\"     # .tgs\n\n\nclass Emoji(AbstractBase):\n    __tablename__ = \"emojis\"\n\n    name: Mapped[str]\n    custom_emoji_id: Mapped[str] = mapped_column(unique=True)\n    img_url: Mapped[str]\n    format: Mapped[EmojiFormat] = mapped_column(\n        PgEnum(EmojiFormat, name='emoji_format'),\n        server_default=EmojiFormat.video,\n        nullable=False,\n    )\n\n\n# internal workers data\nclass WorkerMessage(AbstractBase):\n    __tablename__ = \"worker_messages\"\n\n    user_id: Mapped[Optional[pyUUID]] = mapped_column(ForeignKey(\"users.id\", ondelete=\"SET NULL\"), nullable=True)\n    chat_id: Mapped[int] = mapped_column(BigInteger)\n    type: Mapped[WorkerMessageType] = mapped_column(Enum(WorkerMessageType))\n    text: Mapped[Optional[str]]\n    entities: Mapped[Optional[list[dict]]] = mapped_column(JSONB)\n    media_path: Mapped[Optional[str]]\n\n    request_id: Mapped[Optional[pyUUID]] = mapped_column(UUID(as_uuid=True))\n\n    status: Mapped[WorkerMessageStatus] = mapped_column(Enum(WorkerMessageStatus))\n    sent_at: Mapped[Optional[datetime]]\n\n    user: Mapped[\"User\"] = relationship(\"User\", passive_deletes=\"all\")\n\n\nclass Proxy(AbstractBase):\n    __tablename__ = \"proxies\"\n\n    proxy_string: Mapped[str] = mapped_column(unique=True)\n    is_free: Mapped[bool] = mapped_column(default=True)\n    is_deprecated: Mapped[bool] = mapped_column(default=False)\n\n    user: Mapped[User] = relationship('User')\n"
  },
  {
    "path": "shared/src/shared/infrastructure/main_db/migrator.py",
    "content": "import logging\nimport subprocess\n\nlogger = logging.getLogger(__name__)\n\nasync def apply_migrations(url: str) -> None:\n    migrations_is_ok = subprocess.call([\"alembic\", \"-x\", f\"db_url={url}\", \"upgrade\", \"head\"]) == 0\n    if not migrations_is_ok:\n        logger.error(\"There is an error while upgrading database\")\n        exit(1)\n"
  },
  {
    "path": "shared/src/shared/infrastructure/main_db/repositories/abstract.py",
    "content": "from abc import ABC\nfrom uuid import UUID\nfrom sqlalchemy import select\nfrom shared.infrastructure.sqlalchemy.repository import AbstractSQLAlchemyRepository\n\n\nclass AbstractMainDBRepository[Entity, Model, CreateDTO, UpdateDTO](\n    AbstractSQLAlchemyRepository[Entity, Model, CreateDTO, UpdateDTO, UUID],\n    ABC,\n):\n    async def create(self, obj: CreateDTO) -> UUID:\n        return UUID(str(await super().create(obj)))\n\n    async def get_all(self, limit: int = 100, offset: int = 0, joined: bool = True) -> list[Model]:\n        async with self.session_maker() as session:\n            if joined:\n                if self.options:\n                    return [\n                        self.entity_to_model(entity)\n                        for entity in (await session.execute(\n                            select(self.entity)\n                            .order_by(self.entity.created_at.desc())\n                            .limit(limit)\n                            .offset(offset)\n                            .options(*self.options)\n                        )).unique().scalars().all()\n                    ]\n            res = (await session.execute(\n                select(self.entity)\n                .limit(limit)\n                .offset(offset)\n            )).scalars().all()\n            return [\n                self.entity_to_model(entity)\n                for entity in res\n            ]\n"
  },
  {
    "path": "shared/src/shared/infrastructure/main_db/repositories/worker_message.py",
    "content": "import logging\nfrom dataclasses import dataclass, field\nfrom datetime import datetime\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom sqlalchemy import select\n\nfrom shared.abstractions.repositories.worker_message import WorkerMessageRepositoryInterface\nfrom shared.domain.dto import CreateWorkerMessageDTO, UpdateWorkerMessageDTO\nfrom shared.domain.dto.post_to_publish import MessageEntityDTO\nfrom shared.domain.enums import WorkerMessageStatus\nfrom shared.domain.models import (\n    User as UserModel,\n)\nfrom shared.domain.models import WorkerMessage as WorkerMessageModel\nfrom shared.infrastructure.main_db.entities import User, WorkerMessage\nfrom .abstract import AbstractMainDBRepository\n\nlogger = logging.getLogger(__name__)\n@dataclass\nclass WorkerMessageRepository(\n    AbstractMainDBRepository[WorkerMessage, WorkerMessageModel, CreateWorkerMessageDTO, UpdateWorkerMessageDTO],\n    WorkerMessageRepositoryInterface,\n):\n    joined_fields: dict[str, Optional[list[str]]] = field(default_factory=lambda: {\n        \"user\": None,\n    })\n\n    async def get_messages_from_same_request(self, message_id: UUID) -> list[WorkerMessage]:\n        async with self.session_maker() as session:\n            message = await session.get(self.entity, message_id)\n            messages_result = await session.execute(\n                select(self.entity)\n                .where(self.entity.request_id == message.request_id)\n                .order_by(self.entity.created_at)\n                .options(*self.options)\n            )\n            messages = messages_result.unique().scalars().all()\n\n        return [self.entity_to_model(message) for message in messages]\n\n    async def get_queued_message(self) -> Optional[WorkerMessageModel]:\n        async with self.session_maker() as session:\n            result = await session.execute(\n                select(self.entity)\n                .where(self.entity.status == WorkerMessageStatus.PENDING)\n                .order_by(self.entity.created_at)\n                .options(*self.options)\n                .limit(1)\n            )  # todo: batching?\n\n            message = result.unique().scalars().one_or_none()\n\n        return self.entity_to_model(message) if message else None\n\n    async def set_message_status(\n            self,\n            message_id: UUID,\n            status: WorkerMessageStatus,\n            sent_at: Optional[datetime] = None\n    ) -> None:\n        async with self.session_maker() as session:\n            async with session.begin():\n                message = await session.get(self.entity, message_id)\n                message.status = status\n                if sent_at:\n                    message.sent_at = sent_at\n\n    def entity_to_model(self, entity: WorkerMessage) -> WorkerMessageModel:\n        def _map_user(user: User) -> UserModel:\n            return UserModel(\n                id=user.id,\n                telegram_id=user.telegram_id,\n                telegram_username=user.telegram_username,\n                telegram_last_name=user.telegram_last_name,\n                telegram_first_name=user.telegram_first_name,\n                telegram_language_code=user.telegram_language_code,\n                role=user.role,\n                assistant_enabled=user.assistant_enabled,\n                created_at=user.created_at,\n                updated_at=user.updated_at,\n            )\n\n        return WorkerMessageModel(\n            id=entity.id,\n            user_id=entity.user_id,\n            type=entity.type,\n            text=entity.text,\n            entities=[MessageEntityDTO.model_validate(x) for x in entity.entities] if entity.entities else None,\n            media_path=entity.media_path,\n            status=entity.status,\n            sent_at=entity.sent_at,\n            request_id=entity.request_id,\n            chat_id=entity.chat_id,\n            user=_map_user(entity.user),\n            created_at=entity.created_at,\n            updated_at=entity.updated_at,\n        )\n\n    def create_dto_to_entity(self, dto: CreateWorkerMessageDTO) -> WorkerMessage:\n        logger.debug(\"DB_SAVE text=%r ENT=%s\\\", dto.text[:200], dto.entities[:8]\")\n        return WorkerMessage(\n            id=dto.id,\n            user_id=dto.user_id,\n            chat_id=dto.chat_id,\n            type=dto.type,\n            text=dto.text,\n            entities=[x.model_dump(mode='json') for x in dto.entities] if dto.entities else None,\n            media_path=dto.media_path,\n            status=dto.status,\n            sent_at=dto.sent_at,\n            request_id=dto.request_id,\n            created_at=dto.created_at,\n            updated_at=dto.updated_at,\n        )\n"
  },
  {
    "path": "shared/src/shared/infrastructure/main_db/repositories/post.py",
    "content": "import logging\nfrom dataclasses import dataclass, field\nfrom uuid import UUID\n\nfrom shared.abstractions.repositories import PostRepositoryInterface\nfrom shared.domain.dto import CreatePostDTO, UpdatePostDTO\nfrom shared.domain.dto.post_to_publish import MessageEntityDTO\nfrom shared.domain.models import Post as PostModel\nfrom shared.infrastructure.main_db.entities import Post\nfrom .abstract import AbstractMainDBRepository\nfrom sqlalchemy import select\nlogger = logging.getLogger(__name__)\n\n@dataclass\nclass PostRepository(\n    AbstractMainDBRepository[Post, PostModel, CreatePostDTO, UpdatePostDTO],\n    PostRepositoryInterface,\n):\n\n    _soft_delete: bool = field(default=True)\n\n    async def update(self, obj_id: UUID, obj: UpdatePostDTO) -> PostModel:\n        async with self.session_maker() as session:\n            async with session.begin():\n                entity = await session.get(self.entity, obj_id, options=self.options)\n                if entity.deleted_at is None:\n                    for key, value in obj.model_dump(exclude_unset=True, exclude={'entiites'}).items():\n                        setattr(entity, key, value)\n\n                    if obj.entities:\n                        entity.entities = [x.model_dump(mode='json') for x in obj.entities]\n\n            await session.refresh(entity)\n\n        return self.entity_to_model(entity)\n\n    async def get_all(self, limit: int = 100, offset: int = 0, joined: bool = True) -> list[Post]:\n        async with self.session_maker() as session:\n            stmt = (\n                select(self.entity)\n                .where(self.entity.deleted_at.is_(None))\n                .limit(limit)\n                .offset(offset)\n            )\n            if joined and self.options:\n                stmt = stmt.options(*self.options)\n\n            if self._soft_delete:\n                stmt = stmt.where(self.entity.deleted_at.is_(None))\n\n            res = await session.execute(stmt)\n\n            if self.options:\n                res = res.unique()\n\n            objs = res.scalars().all()\n\n            return [self.entity_to_model(entity) for entity in objs]\n\n    async def get_templates(self, limit: int = 100, offset: int = 0, joined: bool = True) -> list[Post]:\n        async with self.session_maker() as session:\n            stmt = (\n                select(self.entity)\n                .where(self.entity.deleted_at.is_(None))\n                .where(self.entity.is_template == True)\n                .limit(limit)\n                .offset(offset)\n            )\n            if joined and self.options:\n                stmt = stmt.options(*self.options)\n\n            res = await session.execute(stmt)\n\n            if self.options:\n                res = res.unique()\n\n            objs = res.scalars().all()\n\n            return [self.entity_to_model(entity) for entity in objs]\n\n\n    def create_dto_to_entity(self, dto: CreatePostDTO) -> Post:\n        return Post(\n            id=dto.id,\n            text=dto.text,\n            name=dto.name,\n            is_template=dto.is_template,\n            image_path=dto.image_path,\n            html=dto.html,\n            entities=[x.model_dump(mode='json') for x in dto.entities] if dto.entities else None,\n            created_at=dto.created_at,\n            updated_at=dto.updated_at,\n        )\n\n    def entity_to_model(self, entity: Post) -> Post:\n        return PostModel(\n            id=entity.id,\n            text=entity.text,\n            name=entity.name,\n            is_template=entity.is_template,\n            image_path=entity.image_path,\n            html=entity.html,\n            entities=[MessageEntityDTO.model_validate(x) for x in entity.entities] if entity.entities else None,\n            created_at=entity.created_at,\n            updated_at=entity.updated_at,\n        )\n"
  },
  {
    "path": "shared/src/shared/infrastructure/main_db/repositories/story.py",
    "content": "from dataclasses import dataclass\n\nfrom shared.abstractions.repositories.story import StoryRepositoryInterface\nfrom shared.domain.dto.story import CreateStoryDTO, UpdateStoryDTO\nfrom shared.domain.models.story import Story as StoryModel\nfrom shared.infrastructure.main_db.entities import Story\nfrom shared.infrastructure.main_db.repositories.abstract import AbstractMainDBRepository\n\n\n@dataclass\nclass StoryRepository(\n    AbstractMainDBRepository[Story, StoryModel, CreateStoryDTO, UpdateStoryDTO],\n    StoryRepositoryInterface,\n):\n    def create_dto_to_entity(self, dto: CreateStoryDTO) -> Story:\n        return Story(\n            id=dto.id,\n            name=dto.name,\n            text=dto.text,\n            file_path=dto.file_path,\n            created_at=dto.created_at,\n            updated_at=dto.updated_at,\n        )\n\n    def entity_to_model(self, entity: Story) -> StoryModel:\n        return StoryModel(\n            id=entity.id,\n            name=entity.name,\n            text=entity.text,\n            file_path=entity.file_path,\n            created_at=entity.created_at,\n            updated_at=entity.updated_at,\n        )"
  },
  {
    "path": "shared/src/shared/infrastructure/main_db/repositories/user.py",
    "content": "from dataclasses import dataclass, field\nfrom typing import Optional, List\nfrom uuid import UUID\n\nfrom shared.abstractions.repositories import UserRepositoryInterface\nfrom shared.domain.dto import CreateUserDTO, UpdateUserDTO\nfrom shared.domain.enums import UserRole\nfrom shared.domain.models import User as UserModel, Proxy as ProxyModel\nfrom shared.infrastructure.main_db.entities import User, Proxy\nfrom sqlalchemy import select, or_\nfrom sqlalchemy.exc import NoResultFound\nfrom sqlalchemy.orm import joinedload\n\nfrom .abstract import AbstractMainDBRepository\nfrom .exceptions import ProxyIsUnavailable, NoResultFoundException\n\n\n@dataclass\nclass UserRepository(\n    AbstractMainDBRepository[User, UserModel, CreateUserDTO, UpdateUserDTO],\n    UserRepositoryInterface,\n):\n    joined_fields: dict[str, Optional[List[str]]] = field(\n        default_factory=lambda: {\n            \"proxy\": None,\n            \"chats\": None,\n        },\n    )\n\n    async def set_proxy(self, user_id: UUID, proxy_id: UUID) -> None:\n        async with self.session_maker() as session:\n            async with session.begin():\n                proxy = await session.get(Proxy, proxy_id, options=[joinedload(Proxy.user)])\n                if proxy is None:\n                    raise NoResultFoundException(f\"Proxy {proxy_id} not found\")\n\n                if not proxy.is_free:\n                    raise ProxyIsUnavailable(f\"Proxy {proxy.id} is in use by user {proxy.user.id}\")\n\n                proxy.is_free = False\n\n                user = await session.get(self.entity, user_id)\n                user.proxy_id = proxy_id\n\n    async def get_by_username(self, username: str) -> Optional[User]:\n        try:\n            async with self.session_maker() as session:\n                if self.options:\n                    res = await session.execute(\n                        select(self.entity)\n                        .where(self.entity.telegram_username == username)\n                        .options(*self.options)\n                    )\n                    user = res.unique().scalars().one()\n                else:\n                    res = await session.execute(\n                        select(self.entity)\n                        .where(self.entity.telegram_username == username)\n                    )\n                    user = res.scalars().one()\n        except NoResultFound:\n            return None\n\n        return self.entity_to_model(user)\n\n    async def get_managers(self) -> List[User]:\n        async with self.session_maker() as session:\n            stmt = select(self.entity).where(\n                or_(\n                    self.entity.role == UserRole.MANAGER,\n                    self.entity.role == UserRole.PUBLICATIONS_MANAGER\n                )\n            )\n            if self.options:\n                stmt = stmt.options(*self.options)\n\n            res = (await session.execute(stmt)).unique().scalars().all()\n\n        return [self.entity_to_model(x) for x in res] if res else []\n\n    async def get_by_telegram_id(self, telegram_id: int) -> Optional[User]:\n        try:\n            async with self.session_maker() as session:\n                if self.options:\n                    res = await session.execute(\n                        select(self.entity)\n                        .where(self.entity.telegram_id == telegram_id)\n                        .options(*self.options)\n                    )\n                    user = res.unique().scalars().one()\n                else:\n                    res = await session.execute(\n                        select(self.entity)\n                        .where(self.entity.telegram_id == telegram_id)\n                    )\n                    user = res.scalars().one()\n\n        except NoResultFound:\n            return None\n\n        return self.entity_to_model(user)\n\n    def create_dto_to_entity(self, dto: CreateUserDTO) -> User:\n        return User(\n            id=dto.id,\n            telegram_id=dto.telegram_id,\n            telegram_username=dto.telegram_username,\n            telegram_last_name=dto.telegram_last_name,\n            telegram_first_name=dto.telegram_first_name,\n            telegram_language_code=dto.telegram_language_code,\n            role=dto.role,\n            assistant_enabled=dto.assistant_enabled,\n            session_string=dto.session_string,\n            created_at=dto.created_at,\n            updated_at=dto.updated_at,\n        )\n\n    def entity_to_model(self, entity: User) -> User:\n        def _map_proxy(proxy: Proxy) -> ProxyModel:\n            return ProxyModel(\n                id=proxy.id,\n                proxy_string=proxy.proxy_string,\n                is_free=proxy.is_free,\n                is_deprecated=proxy.is_deprecated,\n                created_at=proxy.created_at,\n                updated_at=proxy.updated_at,\n            )\n\n        return UserModel(\n            id=entity.id,\n            telegram_id=entity.telegram_id,\n            telegram_username=entity.telegram_username,\n            telegram_last_name=entity.telegram_last_name,\n            telegram_first_name=entity.telegram_first_name,\n            telegram_language_code=entity.telegram_language_code,\n            role=entity.role,\n            is_banned=entity.is_banned,\n            assistant_enabled=entity.assistant_enabled,\n            session_string=entity.session_string,\n            proxy_id=entity.proxy_id,\n            proxy=_map_proxy(entity.proxy) if entity.proxy else None,\n            created_at=entity.created_at,\n            updated_at=entity.updated_at,\n        )\n"
  },
  {
    "path": "shared/src/shared/infrastructure/main_db/repositories/story_to_publish.py",
    "content": "from dataclasses import dataclass, field\nfrom typing import Optional\n\nfrom shared.abstractions.repositories import StoryToPublishRepositoryInterface\nfrom shared.domain.dto import CreateStoryToPublishDTO, UpdateStoryToPublishDTO\nfrom shared.domain.models import StoryToPublish as StoryToPublishModel, User as UserModel, Story as StoryModel\nfrom shared.infrastructure.main_db.entities import StoryToPublish, User, Story\nfrom .abstract import AbstractMainDBRepository\n\n\n@dataclass\nclass StoryToPublishRepository(\n    AbstractMainDBRepository[StoryToPublish, StoryToPublishModel, CreateStoryToPublishDTO, UpdateStoryToPublishDTO],\n    StoryToPublishRepositoryInterface,\n):\n    joined_fields: dict[str, Optional[list[str]]] = field(default_factory=lambda: {\n        \"manager\": None,\n        \"story\": None,\n    })\n\n    def create_dto_to_entity(self, dto: CreateStoryToPublishDTO) -> StoryToPublish:\n        return StoryToPublish(\n            id=dto.id,\n            story_id=dto.story_id,\n            manager_id=dto.manager_id,\n            scheduled_type=dto.scheduled_type,\n            scheduled_date=dto.scheduled_date,\n            scheduled_time=dto.scheduled_time,\n            status=dto.status,\n            created_at=dto.created_at,\n            updated_at=dto.updated_at,\n        )\n\n    def entity_to_model(self, entity: StoryToPublish) -> StoryToPublishModel:\n        def _map_user(user: User) -> UserModel:\n            return UserModel(\n                id=user.id,\n                telegram_id=user.telegram_id,\n                telegram_username=user.telegram_username,\n                telegram_last_name=user.telegram_last_name,\n                telegram_first_name=user.telegram_first_name,\n                telegram_language_code=user.telegram_language_code,\n                role=user.role,\n                assistant_enabled=user.assistant_enabled,\n                created_at=user.created_at,\n                updated_at=user.updated_at,\n            )\n\n        def _map_story(story: Story) -> StoryModel:\n            return StoryModel(\n                id=story.id,\n                text=story.text,\n                name=story.name,\n                file_path=story.file_path,\n                created_at=story.created_at,\n                updated_at=story.updated_at,\n            )\n\n        return StoryToPublishModel(\n            id=entity.id,\n            story_id=entity.story_id,\n            manager_id=entity.manager_id,\n            scheduled_type=entity.scheduled_type,\n            scheduled_date=entity.scheduled_date,\n            scheduled_time=entity.scheduled_time,\n            status=entity.status,\n            manager=_map_user(entity.manager),\n            story=_map_story(entity.story),\n            created_at=entity.created_at,\n            updated_at=entity.updated_at,\n        )\n"
  },
  {
    "path": "shared/src/shared/infrastructure/main_db/repositories/story_request.py",
    "content": "from dataclasses import dataclass, field\nfrom typing import Optional\n\nfrom sqlalchemy import select\n\nfrom shared.abstractions.repositories import PublishStoryRequestRepositoryInterface\nfrom shared.domain.dto import CreatePublishStoryRequestDTO, UpdatePublishStoryRequestDTO\nfrom shared.domain.enums import PublishStoryRequestStatus\nfrom shared.domain.models import (\n    Story as StoryModel,\n    PublishStoryRequest as PublishStoryRequestModel,\n    User as UserModel,\n)\nfrom shared.infrastructure.main_db.entities import Story, PublishStoryRequest, User\nfrom .abstract import AbstractMainDBRepository\n\n\n@dataclass\nclass PublishStoryRequestRepository(\n    AbstractMainDBRepository[\n        PublishStoryRequest, PublishStoryRequestModel, CreatePublishStoryRequestDTO, UpdatePublishStoryRequestDTO],\n    PublishStoryRequestRepositoryInterface,\n):\n    joined_fields: dict[str, Optional[list[str]]] = field(default_factory=lambda: {\n        \"user\": None,\n        \"story\": None,\n    })\n\n    async def get_queued_message(self) -> Optional[PublishStoryRequest]:\n        async with self.session_maker() as session:\n            result = await session.execute(\n                select(self.entity)\n                .where(self.entity.status == PublishStoryRequestStatus.PLANNED)\n                .order_by(self.entity.created_at)\n                .options(*self.options)\n                .limit(1)\n            )  # todo: batching?\n\n            message = result.unique().scalars().one_or_none()\n\n        return self.entity_to_model(message) if message else None\n\n    def create_dto_to_entity(self, dto: CreatePublishStoryRequestDTO) -> PublishStoryRequest:\n        return PublishStoryRequest(\n            id=dto.id,\n            story_id=dto.story_id,\n            user_id=dto.user_id,\n            scheduled_at=dto.scheduled_at,\n            status=dto.status,\n            published_at=dto.published_at,\n            publication_id=dto.publication_id,\n            created_at=dto.created_at,\n            updated_at=dto.updated_at,\n        )\n\n    def entity_to_model(self, entity: PublishStoryRequest) -> PublishStoryRequest:\n        def _map_user(user: User) -> UserModel:\n            return UserModel(\n                id=user.id,\n                telegram_id=user.telegram_id,\n                telegram_username=user.telegram_username,\n                telegram_last_name=user.telegram_last_name,\n                telegram_first_name=user.telegram_first_name,\n                telegram_language_code=user.telegram_language_code,\n                role=user.role,\n                assistant_enabled=user.assistant_enabled,\n                created_at=user.created_at,\n                updated_at=user.updated_at,\n            )\n\n        def _map_story(story: Story) -> StoryModel:\n            return StoryModel(\n                id=story.id,\n                name=story.name,\n                text=story.text,\n                file_path=story.file_path,\n                created_at=story.created_at,\n                updated_at=story.updated_at,\n            )\n\n        return PublishStoryRequestModel(\n            id=entity.id,\n            story_id=entity.story_id,\n            user_id=entity.user_id,\n            scheduled_at=entity.scheduled_at,\n            status=entity.status,\n            published_at=entity.published_at,\n            publication_id=entity.publication_id,\n            created_at=entity.created_at,\n            updated_at=entity.updated_at,\n            user=_map_user(entity.user),\n            story=_map_story(entity.story),\n        )\n"
  },
  {
    "path": "shared/src/shared/infrastructure/main_db/repositories/post_request.py",
    "content": "from dataclasses import dataclass, field\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom shared.abstractions.repositories import SendPostRequestRepositoryInterface\nfrom shared.domain.dto import CreateSendPostRequestDTO, UpdateSendPostRequestDTO\nfrom shared.domain.dto.post_to_publish import MessageEntityDTO\nfrom shared.domain.enums import SendPostRequestStatus\nfrom shared.domain.models import (\n    Chat as ChatModel,\n    Post as PostModel,\n    SendPostRequest as SendPostRequestModel,\n    User as UserModel, SendingRequest,\n)\nfrom shared.infrastructure.main_db.entities import Chat, Post, SendPostRequest, User\nfrom sqlalchemy import select\n\nfrom .abstract import AbstractMainDBRepository\n\n\n@dataclass\nclass SendPostRequestRepository(\n    AbstractMainDBRepository[SendPostRequest, SendPostRequestModel, CreateSendPostRequestDTO, UpdateSendPostRequestDTO],\n    SendPostRequestRepositoryInterface,\n):\n    joined_fields: dict[str, Optional[list[str]]] = field(default_factory=lambda: {\n        \"user\": None,\n        \"chat\": None,\n        \"post\": None,\n    })\n\n    _soft_delete: bool = field(default=True)\n\n    async def get_requests_from_same_publication(self, request_id: UUID) -> list[SendPostRequestModel]:\n        async with self.session_maker() as session:\n            request = await session.get(self.entity, request_id)\n            if request.deleted_at is None:\n                requests_result = await session.execute(\n                    select(self.entity)\n                    .where(self.entity.publication_id == request.publication_id,                     self.entity.deleted_at.is_(None),\n                           self.entity.deleted_at.is_(None),)\n                    .order_by(self.entity.created_at)\n                    .options(*self.options)\n                )\n                requests = requests_result.unique().scalars().all()\n\n        return [self.entity_to_model(request) for request in requests]\n\n    async def get_queued_message(self) -> Optional[SendPostRequest]:\n        async with self.session_maker() as session:\n            result = await session.execute(\n                select(self.entity)\n                .where(self.entity.status == SendPostRequestStatus.PLANNED, self.entity.deleted_at == None)\n                .order_by(self.entity.created_at)\n                .options(*self.options)\n                .limit(1)\n            )  # todo: batching?\n\n            message = result.unique().scalars().one_or_none()\n\n        return self.entity_to_model(message) if message else None\n\n    def create_dto_to_entity(self, dto: CreateSendPostRequestDTO) -> SendPostRequest:\n        return SendPostRequest(\n            id=dto.id,\n            post_id=dto.post_id,\n            chat_id=dto.chat_id,\n            user_id=dto.user_id,\n            scheduled_at=dto.scheduled_at,\n            publication_id=dto.publication_id,\n            status=dto.status,\n            sent_at=dto.sent_at,\n            stale_at=dto.stale_at,\n            created_at=dto.created_at,\n            updated_at=dto.updated_at,\n        )\n\n    def entity_to_model(self, entity: SendPostRequest) -> SendPostRequest:\n        def _map_user(user: User) -> UserModel:\n            return UserModel(\n                id=user.id,\n                telegram_id=user.telegram_id,\n                telegram_username=user.telegram_username,\n                telegram_last_name=user.telegram_last_name,\n                telegram_first_name=user.telegram_first_name,\n                telegram_language_code=user.telegram_language_code,\n                role=user.role,\n                assistant_enabled=user.assistant_enabled,\n                created_at=user.created_at,\n                updated_at=user.updated_at,\n            )\n\n        def _map_chat(chat: Chat) -> ChatModel:\n            return ChatModel(\n                id=chat.id,\n                chat_id=chat.chat_id,\n                name=chat.name,\n                chat_type_id=chat.chat_type_id,\n                responsible_manager_id=chat.responsible_manager_id,\n                invite_link=chat.invite_link,\n                created_at=chat.created_at,\n                updated_at=chat.updated_at,\n            )\n\n        def _map_post(post: Post) -> PostModel:\n            return PostModel(\n                id=post.id,\n                text=post.text,\n                name=post.name,\n                is_template=post.is_template,\n                html=post.html,\n                entities=[MessageEntityDTO.model_validate(x) for x in post.entities] if post.entities else None,\n                image_path=post.image_path,\n                created_at=post.created_at,\n                updated_at=post.updated_at,\n            )\n\n        return SendPostRequestModel(\n            id=entity.id,\n            post_id=entity.post_id,\n            chat_id=entity.chat_id,\n            user_id=entity.user_id,\n            scheduled_at=entity.scheduled_at,\n            status=entity.status,\n            sent_at=entity.sent_at,\n             stale_at=entity.stale_at,\n            publication_id=entity.publication_id,\n            created_at=entity.created_at,\n            updated_at=entity.updated_at,\n            user=_map_user(entity.user),\n            chat=_map_chat(entity.chat),\n            post=_map_post(entity.post),\n        )\n"
  },
  {
    "path": "shared/src/shared/infrastructure/main_db/repositories/emoji.py",
    "content": "from dataclasses import dataclass\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom sqlalchemy import select, delete\n\nfrom shared.abstractions.repositories.emojis import EmojisRepositoryInterface\nfrom shared.domain.dto.emoji import CreateEmojiDTO, UpdateEmojiDTO\nfrom shared.domain.models.emoji import Emoji as EmojiModel\nfrom shared.infrastructure.main_db.entities import Emoji\nfrom .abstract import AbstractMainDBRepository\n\n\n@dataclass\nclass EmojiRepository(\n    AbstractMainDBRepository[Emoji, EmojiModel, CreateEmojiDTO, UpdateEmojiDTO],\n    EmojisRepositoryInterface,\n):\n    async def get_by_custom_emoji_id(self, custom_emoji_id: int) -> Optional[EmojiModel]:\n        async with self.session_maker() as session:\n            res = await session.execute(\n                select(self.entity)\n                .where(self.entity.custom_emoji_id == custom_emoji_id)\n            )\n            obj = res.scalars().one_or_none()\n\n        return self.entity_to_model(obj) if obj else None\n\n    async def get_existing_custom_ids(self, ids: list[str]) -> set[str]:\n        if not ids:\n            return set()\n\n        async with self.session_maker() as session:\n            res = await session.execute(\n                select(self.entity.custom_emoji_id)\n                .where(self.entity.custom_emoji_id.in_(ids))\n            )\n            return set(res.scalars().all())\n\n    async def remove(self, emoji_id: UUID) -> None:\n        async with self.session_maker() as session:\n            async with session.begin():\n                emoji = await session.get(self.entity, emoji_id)\n                await session.delete(emoji)\n\n    async def get_all(self, limit: int = 100, offset: int = 0, joined: bool = True) -> list[EmojiModel]:\n        async with self.session_maker() as session:\n            res = (await session.execute(\n                select(self.entity)\n            )).scalars().all()\n\n        return [\n            self.entity_to_model(entity)\n            for entity in res\n        ]\n\n    def create_dto_to_entity(self, dto: CreateEmojiDTO) -> Emoji:\n        return Emoji(\n            id=dto.id,\n            name=dto.name,\n            custom_emoji_id=dto.custom_emoji_id,\n            img_url=dto.img_url,\n            created_at=dto.created_at,\n            updated_at=dto.updated_at,\n        )\n\n    def entity_to_model(self, entity: Emoji) -> Emoji:\n        return EmojiModel(\n            id=entity.id,\n            name=entity.name,\n            custom_emoji_id=entity.custom_emoji_id,\n            img_url=entity.img_url,\n            created_at=entity.created_at,\n            updated_at=entity.updated_at,\n        )\n"
  },
  {
    "path": "shared/src/shared/infrastructure/main_db/repositories/proxy.py",
    "content": "from dataclasses import dataclass, field\nfrom typing import Optional, List\n\nfrom sqlalchemy import select, func\n\nfrom shared.abstractions.repositories import ProxyRepositoryInterface\nfrom shared.domain.dto import CreateProxyDTO, UpdateProxyDTO\nfrom shared.domain.models import Proxy as ProxyModel, User as UserModel\nfrom shared.infrastructure.main_db.entities import Proxy, User\nfrom .abstract import AbstractMainDBRepository\nfrom .exceptions import NoFreeProxiesException\n\n\n@dataclass\nclass ProxyRepository(\n    AbstractMainDBRepository[Proxy, ProxyModel, CreateProxyDTO, UpdateProxyDTO],\n    ProxyRepositoryInterface,\n):\n    # joined_fields: dict[str, Optional[List[str]]] = field(\n    #     default_factory=lambda: {\n    #         'user': None,\n    #     },\n    # )\n\n    async def get_available_proxies_count(self) -> int:\n        async with self.session_maker() as session:  # session: AsyncSession\n            result = await session.execute(\n                select(func.count(self.entity.id))\n                .where(\n                    self.entity.is_free == True,\n                    self.entity.is_deprecated == False,\n                )\n            )\n            return result.scalar()\n\n    async def get_available_proxy(self) -> ProxyModel:\n        async with self.session_maker() as session:\n            result = await session.execute(\n                select(self.entity)\n                .where(\n                    self.entity.is_free == True,\n                    self.entity.is_deprecated == False,\n                )\n                .order_by(self.entity.created_at)\n                .limit(1)\n            )\n\n            result = result.scalars().one_or_none()\n            if result is None:\n                raise NoFreeProxiesException\n\n        return self.entity_to_model(result)\n\n    def create_dto_to_entity(self, dto: CreateProxyDTO) -> Proxy:\n        return Proxy(\n            id=dto.id,\n            proxy_string=dto.proxy_string,\n            is_free=dto.is_free,\n            is_deprecated=dto.is_deprecated,\n            created_at=dto.created_at,\n            updated_at=dto.updated_at,\n        )\n\n    def entity_to_model(self, entity: Proxy) -> ProxyModel:\n        def _map_user(user: User) -> UserModel:\n            return None  # noqa\n\n        return ProxyModel(\n            id=entity.id,\n            proxy_string=entity.proxy_string,\n            is_free=entity.is_free,\n            is_deprecated=entity.is_deprecated,\n            created_at=entity.created_at,\n            updated_at=entity.updated_at,\n        )\n"
  },
  {
    "path": "shared/src/shared/infrastructure/main_db/repositories/post_to_publish.py",
    "content": "from dataclasses import dataclass, field\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom sqlalchemy import select\n\nfrom shared.abstractions.repositories import PostToPublishRepositoryInterface\nfrom shared.domain.dto import CreatePostToPublishDTO, UpdatePostToPublishDTO\nfrom shared.domain.dto.post_to_publish import MessageEntityDTO\nfrom shared.domain.enums import PublicationStatus\nfrom shared.domain.models import (\n    PostToPublish as PostToPublishModel,\n    User as UserModel,\n    Chat as ChatModel,\n    Post as PostModel\n)\nfrom shared.infrastructure.main_db.entities import PostToPublish, User, Chat, Post\nfrom .abstract import AbstractMainDBRepository\n\n\n@dataclass\nclass PostToPublishRepository(\n    AbstractMainDBRepository[PostToPublish, PostToPublishModel, CreatePostToPublishDTO, UpdatePostToPublishDTO],\n    PostToPublishRepositoryInterface,\n):\n    joined_fields: dict[str, Optional[list[str]]] = field(default_factory=lambda: {\n        \"creator\": None,\n        \"responsible_manager\": None,\n        \"chats\": None,\n        \"post\": None,\n    })\n    _soft_delete: bool = field(default=True)\n\n\n    async def get_all(self, limit: int = 1000, offset: int = 0, joined: bool = True) -> list[PostToPublishModel]:\n        async with self.session_maker() as session:\n            stmt = (\n                select(self.entity)\n                .where(self.entity.deleted_at.is_(None))\n                .limit(limit)\n                .offset(offset)\n            )\n            if joined and self.options:\n                stmt = stmt.options(*self.options)\n\n            if self._soft_delete:\n                stmt = stmt.where(self.entity.deleted_at.is_(None))\n\n            res = await session.execute(stmt)\n\n            if self.options:\n                res = res.unique()\n\n            objs = res.scalars().all()\n\n            return [self.entity_to_model(entity) for entity in objs]\n\n\n    async def get_posts_by_manager(self, responsible_manager_id: UUID) -> list[PostToPublishModel]:\n        async with self.session_maker() as session:\n            result = await session.execute(\n                select(self.entity)\n                .where(\n                    self.entity.responsible_manager_id == responsible_manager_id,\n                    self.entity.deleted_at.is_(None),\n                )\n                .options(*self.options)\n            )\n\n            posts = result.unique().scalars().all()\n\n        return [self.entity_to_model(post) for post in posts]\n\n    async def get_queued_post(self) -> Optional[PostToPublish]:\n        async with self.session_maker() as session:\n            result = await session.execute(\n                select(self.entity)\n                .where(\n                    self.entity.status == PublicationStatus.PENDING,\n                    self.entity.deleted_at.is_(None),\n                )\n                .order_by(self.entity.created_at)\n                .options(*self.options)\n                .limit(1)\n            )\n\n            post = result.unique().scalars().one_or_none()\n\n        return self.entity_to_model(post) if post else None\n\n    async def set_status(self, post_id: UUID, status: PublicationStatus) -> None:\n        async with self.session_maker() as session:\n            async with session.begin():\n                post = await session.get(self.entity, post_id)\n                post.status = status\n\n    async def create(self, obj: CreatePostToPublishDTO) -> UUID:\n        async with self.session_maker() as session:\n            async with session.begin():\n                chats = await session.execute(\n                    select(Chat)\n                    .where(Chat.id.in_(obj.chat_ids))\n                )\n\n                post = self.create_dto_to_entity(obj)\n                post.chats = chats.scalars().all()\n                session.add(post)\n\n        return post.id\n\n    def create_dto_to_entity(self, dto: CreatePostToPublishDTO) -> PostToPublish:\n        return PostToPublish(\n            id=dto.id,\n            post_id=dto.post_id,\n            creator_id=dto.creator_id,\n            responsible_manager_id=dto.responsible_manager_id,\n            scheduled_type=dto.scheduled_type,\n            scheduled_date=dto.scheduled_date,\n            scheduled_time=dto.scheduled_time,\n            status=dto.status,\n            created_at=dto.created_at,\n            updated_at=dto.updated_at\n        )\n\n    def entity_to_model(self, entity: PostToPublish) -> PostToPublishModel:\n        def _map_user(user: User) -> UserModel:\n            return UserModel(\n                id=user.id,\n                telegram_id=user.telegram_id,\n                telegram_username=user.telegram_username,\n                telegram_last_name=user.telegram_last_name,\n                telegram_first_name=user.telegram_first_name,\n                telegram_language_code=user.telegram_language_code,\n                role=user.role,\n                assistant_enabled=user.assistant_enabled,\n                created_at=user.created_at,\n                updated_at=user.updated_at,\n            )\n\n        def _map_chat(chat: Chat) -> ChatModel:\n            return ChatModel(\n                id=chat.id,\n                chat_id=chat.chat_id,\n                name=chat.name,\n                responsible_manager_id=chat.responsible_manager_id,\n                chat_type_id=chat.chat_type_id,\n                invite_link=chat.invite_link,\n                created_at=chat.created_at,\n                updated_at=chat.updated_at,\n            )\n\n        def _map_post(post: Post) -> PostModel:\n            return PostModel(\n                id=post.id,\n                text=post.text,\n                name=post.name,\n                is_template=post.is_template,\n                html=post.html,\n                entities=[MessageEntityDTO.model_validate(x) for x in post.entities] if post.entities else None,\n                image_path=post.image_path,\n                created_at=post.created_at,\n                updated_at=post.updated_at,\n            )\n\n        return PostToPublishModel(\n            id=entity.id,\n            post_id=entity.post_id,\n            creator_id=entity.creator_id,\n            responsible_manager_id=entity.responsible_manager_id,\n            scheduled_type=entity.scheduled_type,\n            scheduled_date=entity.scheduled_date,\n            scheduled_time=entity.scheduled_time,\n            status=entity.status,\n            creator=_map_user(entity.creator),\n            responsible_manager=_map_user(entity.responsible_manager),\n            chats=[_map_chat(x) for x in entity.chats],\n            post=_map_post(entity.post),\n            created_at=entity.created_at,\n            updated_at=entity.updated_at,\n            deleted_at=entity.deleted_at,\n        )\n"
  },
  {
    "path": "shared/src/shared/infrastructure/main_db/repositories/__init__.py",
    "content": "from .user import UserRepository\nfrom .chat import ChatRepository\nfrom .post import PostRepository\nfrom .story import StoryRepository\nfrom .post_request import SendPostRequestRepository\nfrom .story_request import PublishStoryRequestRepository\nfrom .story_to_publish import StoryToPublishRepository\nfrom .post_to_publish import PostToPublishRepository\nfrom .worker_message import WorkerMessageRepository\nfrom .proxy import ProxyRepository\n\nfrom .exceptions import NoFreeProxiesException\n\n__all__ = [\n    \"UserRepository\",\n    \"ChatRepository\",\n    \"PostRepository\",\n    \"StoryRepository\",\n    \"SendPostRequestRepository\",\n    \"PublishStoryRequestRepository\",\n    \"StoryToPublishRepository\",\n    \"PostToPublishRepository\",\n    \"WorkerMessageRepository\",\n    \"ProxyRepository\",\n    \"NoFreeProxiesException\",\n]\n"
  },
  {
    "path": "shared/src/shared/infrastructure/main_db/repositories/chat_type.py",
    "content": "from dataclasses import dataclass, field\nfrom typing import Optional, List\n\nfrom shared.abstractions.repositories.chat_type import ChatTypeRepositoryInterface\nfrom shared.domain.dto.chat_type import CreateChatTypeDTO, UpdateChatTypeDTO\nfrom shared.domain.models.chat_type import ChatType as ChatTypeModel\nfrom shared.infrastructure.main_db.entities import ChatType\nfrom .abstract import AbstractMainDBRepository\n\n\n@dataclass\nclass ChatTypeRepository(\n    AbstractMainDBRepository[ChatType, ChatTypeModel, CreateChatTypeDTO, UpdateChatTypeDTO],\n    ChatTypeRepositoryInterface,\n):\n    joined_fields: dict[str, Optional[List[str]]] = field(\n        default_factory=lambda: {\n            \"chats\": None,\n        },\n    )\n\n    def create_dto_to_entity(self, dto: CreateChatTypeDTO) -> ChatType:\n        return ChatType(\n            id=dto.id,\n            name=dto.name,\n            description=dto.description,\n            created_at=dto.created_at,\n            updated_at=dto.updated_at,\n        )\n\n    def entity_to_model(self, entity: ChatType) -> ChatTypeModel:\n        return ChatTypeModel(\n            id=entity.id,\n            name=entity.name,\n            description=entity.description,\n            created_at=entity.created_at,\n            updated_at=entity.updated_at,\n        )\n"
  },
  {
    "path": "shared/src/shared/infrastructure/main_db/repositories/chat.py",
    "content": "from dataclasses import dataclass, field\nfrom typing import Optional, List\nfrom uuid import UUID\n\nfrom sqlalchemy import select\nfrom sqlalchemy.exc import NoResultFound\n\nfrom shared.abstractions.repositories import ChatRepositoryInterface\nfrom shared.domain.dto import CreateChatDTO, UpdateChatDTO\nfrom shared.domain.models import Chat as ChatModel\nfrom shared.infrastructure.main_db.entities import Chat\nfrom .abstract import AbstractMainDBRepository\n\n\n@dataclass\nclass ChatRepository(\n    AbstractMainDBRepository[Chat, ChatModel, CreateChatDTO, UpdateChatDTO],\n    ChatRepositoryInterface,\n):\n    joined_fields: dict[str, Optional[List[str]]] = field(\n        default_factory=lambda: {\n            \"users\": None,\n            \"chat_type\": None,\n        },\n    )\n\n\n    async def get_all(self, limit: int = 100, offset: int = 0, joined: bool = True) -> list[Chat]:\n        async with self.session_maker() as session:\n            stmt = (\n                select(self.entity)\n                .limit(limit)\n                .offset(offset)\n            )\n            if joined and self.options:\n                stmt = stmt.options(*self.options)\n\n\n            res = await session.execute(stmt)\n\n            if self.options:\n                res = res.unique()\n\n            objs = res.scalars().all()\n\n            return [self.entity_to_model(entity) for entity in objs]\n\n    async def get_by_telegram_id(self, telegram_id: int) -> Optional[Chat]:\n        try:\n            async with self.session_maker() as session:\n                if self.options:\n                    res = await session.execute(\n                        select(self.entity)\n                        .where(self.entity.chat_id == telegram_id)\n                        .options(*self.options)\n                    )\n                    chat = res.unique().scalars().one()\n                else:\n                    res = await session.execute(\n                        select(self.entity)\n                        .where(self.entity.chat_id == telegram_id)\n                    )\n                    chat = res.scalars().one()\n\n        except NoResultFound:\n            return None\n\n        return self.entity_to_model(chat)\n\n    async def get_by_type(self, type_id: UUID) -> Optional[list[Chat]]:\n        try:\n            async with self.session_maker() as session:\n                if self.options:\n                    res = await session.execute(\n                        select(self.entity)\n                        .where(self.entity.chat_type_id == type_id)\n                        .options(*self.options)\n                    )\n                    chats = res.unique().scalars().all()\n                else:\n                    res = await session.execute(\n                        select(self.entity)\n                        .where(self.entity.chat_type_id == type_id)\n                    )\n                    chats = res.scalars().all()\n\n        except NoResultFound:\n            return []\n\n        return [self.entity_to_model(chat) for chat in chats]\n\n    async def get_by_invite_link(self, invite_link: str) -> Chat:\n        try:\n            async with self.session_maker() as session:\n                if self.options:\n                    res = await session.execute(\n                        select(self.entity)\n                        .where(self.entity.invite_link == invite_link)\n                        .options(*self.options)\n                    )\n                    chat = res.unique().scalars().one()\n                else:\n                    res = await session.execute(\n                        select(self.entity)\n                        .where(self.entity.invite_link == invite_link)\n                    )\n                    chat = res.scalars().one()\n\n        except NoResultFound:\n            return None\n\n        return self.entity_to_model(chat)\n\n\n    def create_dto_to_entity(self, dto: CreateChatDTO) -> Chat:\n        return Chat(\n            id=dto.id,\n            invite_link=dto.invite_link,\n            chat_id=dto.chat_id,\n            name=dto.name,\n            chat_type_id=dto.chat_type_id,\n            responsible_manager_id=dto.responsible_manager_id,\n            created_at=dto.created_at,\n            updated_at=dto.updated_at,\n        )\n\n    def entity_to_model(self, entity: Chat) -> Chat:\n        return ChatModel(\n            id=entity.id,\n            invite_link=entity.invite_link,\n            chat_id=entity.chat_id,\n            name=entity.name,\n            chat_type_id=entity.chat_type_id,\n            responsible_manager_id=entity.responsible_manager_id,\n            created_at=entity.created_at,\n            updated_at=entity.updated_at,\n        )\n"
  },
  {
    "path": "shared/src/shared/infrastructure/main_db/repositories/exceptions.py",
    "content": "class NoFreeProxiesException(Exception):\n    ...\n\n\nclass ProxyIsUnavailable(Exception):\n    ...\n\n\nclass NoResultFoundException(Exception):\n    ...\n"
  },
  {
    "path": "shared/src/shared/infrastructure/main_db/repositories/update_post.py",
    "content": "import logging\nfrom dataclasses import dataclass, field\n\nfrom shared.abstractions.repositories.update_post import UpdatePostRepositoryInterface\nfrom shared.domain.dto.update_post import CreateUpdatePostDTO, UpdateUpdatePostDTO\nfrom shared.domain.models.update_post import UpdatePost as UpdatePostModel\nfrom shared.infrastructure.main_db.entities import UpdatePost\nfrom .abstract import AbstractMainDBRepository\n\nlogger = logging.getLogger(__name__)\n\n@dataclass\nclass UpdatePostRepository(\n    AbstractMainDBRepository[UpdatePost, UpdatePostModel, CreateUpdatePostDTO, UpdateUpdatePostDTO],\n    UpdatePostRepositoryInterface,\n):\n\n    _soft_delete: bool = field(default=True)\n\n    def create_dto_to_entity(self, dto: CreateUpdatePostDTO) -> UpdatePost:\n        return UpdatePost(\n            id=dto.id,\n            post_id=dto.post_id,\n            post_json=dto.post_json,\n            author_id=dto.author_id,\n            created_at=dto.created_at,\n            updated_at=dto.updated_at,\n        )\n\n    def entity_to_model(self, entity: UpdatePost) -> UpdatePost:\n        return UpdatePostModel(\n            id=entity.id,\n            post_id=entity.post_id,\n            post_json=entity.post_json,\n            author_id=entity.author_id,\n            created_at=entity.created_at,\n            updated_at=entity.updated_at,\n        )\n"
  },
  {
    "path": "shared/src/shared/domain/__init__.py",
    "content": ""
  },
  {
    "path": "shared/src/shared/domain/dto/abstract.py",
    "content": "from datetime import datetime\nfrom uuid import UUID, uuid4\n\nfrom pydantic import BaseModel, Field\n\n\nclass CreateDTO(BaseModel):\n    id: UUID = Field(default_factory=uuid4)\n    created_at: datetime = Field(default_factory=datetime.now)\n    updated_at: datetime = Field(default_factory=datetime.now)\n\n\nclass UpdateDTO(BaseModel):\n    updated_at: datetime = Field(default_factory=datetime.now)\n"
  },
  {
    "path": "shared/src/shared/domain/dto/worker_message.py",
    "content": "from datetime import datetime\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom shared.domain.dto.abstract import CreateDTO, UpdateDTO\nfrom shared.domain.dto.post_to_publish import MessageEntityDTO\nfrom shared.domain.enums import WorkerMessageType, WorkerMessageStatus\n\n\nclass CreateWorkerMessageDTO(CreateDTO):\n    user_id: UUID\n    chat_id: int\n    type: WorkerMessageType\n    text: Optional[str] = None\n    media_path: Optional[str] = None\n    status: WorkerMessageStatus\n    sent_at: Optional[datetime] = None\n\n    request_id: Optional[UUID] = None\n\n    entities: Optional[list[MessageEntityDTO]] = None\n\n\nclass UpdateWorkerMessageDTO(UpdateDTO):\n    user_id: Optional[UUID] = None\n    chat_id: Optional[int] = None\n    type: Optional[WorkerMessageType] = None\n    text: Optional[str] = None\n    media_path: Optional[str] = None\n    status: Optional[WorkerMessageStatus] = None\n    sent_at: Optional[datetime] = None\n\n    request_id: Optional[UUID] = None\n\n    entities: Optional[list[MessageEntityDTO]] = None\n"
  },
  {
    "path": "shared/src/shared/domain/dto/post.py",
    "content": "from typing import Optional, List\n\nfrom pydantic import field_validator\nfrom pydantic_core.core_schema import FieldValidationInfo\n\nfrom .abstract import CreateDTO, UpdateDTO\nfrom .post_to_publish import MessageEntityDTO\n\nRHINO = '🦏'\n\n\ndef _validate_entities(entities: List[MessageEntityDTO], info: FieldValidationInfo) -> Optional[List[MessageEntityDTO]]:\n    txt = info.data.get(\"text\", \"\")\n    if not txt:\n        return entities\n\n    custom_emojis, newlines = 0, txt.count('\\n') * 2\n    if not entities:\n        return None\n\n    for e in entities:\n        if e.type == 'custom_emoji':\n            custom_emojis += 1\n\n        text_len = len(txt) + custom_emojis + newlines\n        if not (0 <= e.offset < text_len and e.offset + e.length <= text_len):\n            raise ValueError(\n                f\"Entity out of bounds: offset={e.offset} length={e.length} for text of length {text_len}\")\n\n    return entities\n\n\nclass CreatePostDTO(CreateDTO):\n    name: str\n    text: str\n    image_path: Optional[str] = None\n    is_template: bool\n    html: Optional[str] = None\n    entities: Optional[list[MessageEntityDTO]] = None\n\n    @field_validator(\"entities\", mode=\"after\")\n    def check_bounds(cls, entities: List[MessageEntityDTO], info: FieldValidationInfo) -> List[MessageEntityDTO]:\n        return _validate_entities(entities, info)\n\n\nclass UpdatePostDTO(UpdateDTO):\n    name: Optional[str] = None\n    text: Optional[str] = None\n    image_path: Optional[str] = None\n    is_template: Optional[bool] = None\n    html: Optional[str] = None\n    entities: Optional[list[\"MessageEntityDTO\"]] = None\n\n    @field_validator(\"entities\", mode=\"after\")\n    def check_bounds(cls, entities: List[MessageEntityDTO], info: FieldValidationInfo) -> List[MessageEntityDTO]:\n        return _validate_entities(entities, info)\n"
  },
  {
    "path": "shared/src/shared/domain/dto/service.py",
    "content": "from typing import Optional\n\nfrom .abstract import UpdateDTO, CreateDTO\n\n\nclass CreateServiceDTO(CreateDTO):\n    name: str\n    is_active: bool\n\n\nclass UpdateServiceDTO(UpdateDTO):\n    name: Optional[str] = None\n    is_active: Optional[bool] = None\n"
  },
  {
    "path": "shared/src/shared/domain/dto/story.py",
    "content": "from typing import Optional\n\nfrom .abstract import CreateDTO, UpdateDTO\n\n\nclass CreateStoryDTO(CreateDTO):\n    name: str\n    file_path: str\n    text: Optional[str] = None\n\n\nclass UpdateStoryDTO(UpdateDTO):\n    name: Optional[str] = None\n    file_path: Optional[str] = None\n    text: Optional[str] = None\n"
  },
  {
    "path": "shared/src/shared/domain/dto/user.py",
    "content": "from typing import Optional\nfrom uuid import UUID\n\nfrom .abstract import CreateDTO, UpdateDTO\nfrom shared.domain.enums import UserRole\n\n\nclass CreateUserDTO(CreateDTO):\n    telegram_id: int\n    telegram_username: Optional[str] = None\n    telegram_first_name: Optional[str] = None\n    telegram_last_name: Optional[str] = None\n    telegram_language_code: Optional[str] = None\n\n    role: UserRole\n\n    session_string: Optional[str] = None\n    assistant_enabled: bool\n\n\nclass UpdateUserDTO(UpdateDTO):\n    telegram_username: Optional[str] = None\n    telegram_first_name: Optional[str] = None\n    telegram_last_name: Optional[str] = None\n    telegram_language_code: Optional[str] = None\n    is_banned: Optional[bool] = None\n\n    role: Optional[UserRole] = None\n\n    session_string: Optional[str] = None\n    assistant_enabled: Optional[bool] = None\n"
  },
  {
    "path": "shared/src/shared/domain/dto/story_to_publish.py",
    "content": "from datetime import date, time\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom shared.domain.enums import ScheduledType, PublicationStatus\nfrom .abstract import UpdateDTO, CreateDTO\n\n\nclass CreateStoryToPublishDTO(CreateDTO):\n    story_id: UUID\n    manager_id: UUID\n    scheduled_type: ScheduledType\n    scheduled_date: Optional[date]\n    scheduled_time: time\n    status: PublicationStatus\n\n\nclass UpdateStoryToPublishDTO(UpdateDTO):\n    story_id: Optional[UUID] = None\n    manager_id: Optional[UUID] = None\n    scheduled_type: Optional[ScheduledType] = None\n    scheduled_date: Optional[date] = None\n    scheduled_time: Optional[time] = None\n    status: Optional[PublicationStatus] = None\n"
  },
  {
    "path": "shared/src/shared/domain/dto/story_request.py",
    "content": "from datetime import datetime\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom .abstract import CreateDTO, UpdateDTO\nfrom shared.domain.enums import SendPostRequestStatus, PublishStoryRequestStatus\n\n\nclass CreatePublishStoryRequestDTO(CreateDTO):\n    story_id: UUID\n    user_id: UUID\n    scheduled_at: Optional[datetime] = None\n\n    publication_id: UUID\n\n    status: PublishStoryRequestStatus\n    published_at: Optional[datetime] = None\n\n\nclass UpdatePublishStoryRequestDTO(UpdateDTO):\n    story_id: Optional[UUID] = None\n    user_id: Optional[UUID] = None\n    scheduled_at: Optional[datetime] = None\n    publication_id: Optional[UUID] = None\n    status: Optional[PublishStoryRequestStatus] = None\n    published_at: Optional[datetime] = None\n"
  },
  {
    "path": "shared/src/shared/domain/dto/post_request.py",
    "content": "from datetime import datetime\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom .abstract import CreateDTO, UpdateDTO\nfrom shared.domain.enums import SendPostRequestStatus\n\n\nclass CreateSendPostRequestDTO(CreateDTO):\n    post_id: UUID\n    chat_id: UUID\n    user_id: UUID\n    scheduled_at: Optional[datetime] = None\n    publication_id: UUID\n    status: SendPostRequestStatus\n    sent_at: Optional[datetime] = None\n    stale_at: Optional[datetime] = None\n\n\nclass UpdateSendPostRequestDTO(UpdateDTO):\n    post_id: Optional[UUID] = None\n    chat_id: Optional[UUID] = None\n    user_id: Optional[UUID] = None\n    publication_id: Optional[UUID] = None\n    scheduled_at: Optional[datetime] = None\n    status: Optional[SendPostRequestStatus] = None\n    sent_at: Optional[datetime] = None\n    stale_at: Optional[datetime] = None\n"
  },
  {
    "path": "shared/src/shared/domain/dto/emoji.py",
    "content": "from typing import Optional\n\nfrom .abstract import CreateDTO, UpdateDTO\nfrom ...infrastructure.main_db.entities import EmojiFormat\n\n\nclass CreateEmojiDTO(CreateDTO):\n    name: str\n    custom_emoji_id: str\n    img_url: str\n    format: EmojiFormat\n\n\nclass UpdateEmojiDTO(UpdateDTO):\n    name: Optional[str] = None\n    custom_emoji_id: Optional[str] = None\n    img_url: Optional[str] = None\n    format: EmojiFormat | None = None\n"
  },
  {
    "path": "shared/src/shared/domain/dto/proxy.py",
    "content": "from typing import Optional\n\nfrom .abstract import CreateDTO, UpdateDTO\n\n\nclass CreateProxyDTO(CreateDTO):\n    proxy_string: str\n    is_free: bool = True\n    is_deprecated: bool = False\n\n\nclass UpdateProxyDTO(UpdateDTO):\n    proxy_string: Optional[str] = None\n    is_free: Optional[bool] = None\n    is_deprecated: Optional[bool] = None\n"
  },
  {
    "path": "shared/src/shared/domain/dto/post_to_publish.py",
    "content": "from datetime import date, time\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom pydantic import BaseModel, ConfigDict\n\nfrom shared.domain.enums import ScheduledType, PublicationStatus\nfrom .abstract import CreateDTO, UpdateDTO\n\n\nclass MessageEntityDTO(BaseModel):\n    type: str\n    offset: int\n    length: int\n    url: Optional[str] = None\n    custom_emoji_id: Optional[int] = None\n\n    model_config = ConfigDict(from_attributes=True)\n\n\nclass CreatePostToPublishDTO(CreateDTO):\n    post_id: UUID\n    creator_id: Optional[UUID] = None\n    responsible_manager_id: UUID\n    scheduled_type: ScheduledType\n    scheduled_date: Optional[date] = None\n    scheduled_time: time\n    chat_ids: list[UUID]\n    status: PublicationStatus\n\n\nclass UpdatePostToPublishDTO(UpdateDTO):\n    post_id: Optional[UUID] = None\n    creator_id: Optional[UUID] = None\n    responsible_manager_id: Optional[UUID] = None\n    scheduled_type: Optional[ScheduledType] = None\n    scheduled_date: Optional[date] = None\n    scheduled_time: Optional[time] = None\n    chat_ids: Optional[list[UUID]] = None\n    status: Optional[PublicationStatus] = None\n"
  },
  {
    "path": "shared/src/shared/domain/dto/__init__.py",
    "content": "from .user import CreateUserDTO, UpdateUserDTO\nfrom .post import CreatePostDTO, UpdatePostDTO\nfrom .chat import CreateChatDTO, UpdateChatDTO\nfrom .post_request import CreateSendPostRequestDTO, UpdateSendPostRequestDTO\nfrom .story_request import CreatePublishStoryRequestDTO, UpdatePublishStoryRequestDTO\nfrom .worker_message import CreateWorkerMessageDTO, UpdateWorkerMessageDTO\nfrom .story_to_publish import CreateStoryToPublishDTO, UpdateStoryToPublishDTO\nfrom .post_to_publish import CreatePostToPublishDTO, UpdatePostToPublishDTO\nfrom .service import CreateServiceDTO, UpdateServiceDTO\nfrom .proxy import CreateProxyDTO, UpdateProxyDTO\n\n__all__ = [\n    \"CreateUserDTO\",\n    \"UpdateUserDTO\",\n    \"CreatePostDTO\",\n    \"UpdatePostDTO\",\n    \"CreateChatDTO\",\n    \"UpdateChatDTO\",\n    \"CreateSendPostRequestDTO\",\n    \"UpdateSendPostRequestDTO\",\n    \"CreatePublishStoryRequestDTO\",\n    \"UpdatePublishStoryRequestDTO\",\n    \"CreateWorkerMessageDTO\",\n    \"UpdateWorkerMessageDTO\",\n    \"CreatePostToPublishDTO\",\n    \"UpdatePostToPublishDTO\",\n    \"CreateStoryToPublishDTO\",\n    \"UpdateStoryToPublishDTO\",\n    \"CreateServiceDTO\",\n    \"UpdateServiceDTO\",\n    \"CreateProxyDTO\",\n    \"UpdateProxyDTO\",\n]\n"
  },
  {
    "path": "shared/src/shared/domain/dto/chat_type.py",
    "content": "from typing import Optional\n\nfrom .abstract import CreateDTO, UpdateDTO\n\n\nclass CreateChatTypeDTO(CreateDTO):\n    name: str\n    description: str\n\n\nclass UpdateChatTypeDTO(UpdateDTO):\n    name: Optional[str] = None\n    description: Optional[str] = None\n"
  },
  {
    "path": "shared/src/shared/domain/dto/chat.py",
    "content": "from typing import Optional\nfrom uuid import UUID\n\nfrom .abstract import CreateDTO, UpdateDTO\n\n\nclass CreateChatDTO(CreateDTO):\n    chat_type_id: UUID\n    name: str\n    chat_id: int\n    invite_link: Optional[str] = None\n    responsible_manager_id: UUID\n\n\nclass UpdateChatDTO(UpdateDTO):\n    chat_type_id: Optional[UUID] = None\n    name: Optional[str] = None\n    chat_id: Optional[int] = None\n    invite_link: Optional[str] = None\n    responsible_manager_id: Optional[UUID] = None\n"
  },
  {
    "path": "shared/src/shared/domain/dto/update_post.py",
    "content": "from typing import Optional\nfrom uuid import UUID\n\nfrom .abstract import CreateDTO, UpdateDTO\n\n\nclass CreateUpdatePostDTO(CreateDTO):\n    post_id: UUID\n    post_json: dict\n    author_id: UUID\n\n\nclass UpdateUpdatePostDTO(UpdateDTO):\n    post_id: Optional[UUID] = None\n    post_json: Optional[dict] = None\n    author_id: Optional[UUID] = None\n"
  },
  {
    "path": "shared/src/shared/domain/enums/user_role.py",
    "content": "from enum import StrEnum\n\n\nclass UserRole(StrEnum):\n    MANAGER = \"manager\"\n    ADMIN = \"admin\"\n    PUBLICATIONS_MANAGER = \"publications_manager\""
  },
  {
    "path": "shared/src/shared/domain/enums/__init__.py",
    "content": "from typing import TypeVar\n\nfrom .scheduled_type import ScheduledType\nfrom .worker_message_type import WorkerMessageType\nfrom .worker_message_status import WorkerMessageStatus\nfrom .publication_status import PublicationStatus\nfrom .send_post_request_status import SendPostRequestStatus\nfrom .publish_story_request_status import PublishStoryRequestStatus\nfrom .user_role import UserRole\n\nRequestStatus = TypeVar(\"RequestStatus\", SendPostRequestStatus, PublishStoryRequestStatus)\n\n__all__ = [\n    \"ScheduledType\",\n    \"WorkerMessageType\",\n    \"WorkerMessageStatus\",\n    \"PublicationStatus\",\n    \"SendPostRequestStatus\",\n    \"PublishStoryRequestStatus\",\n    \"UserRole\",\n    \"RequestStatus\",\n]\n"
  },
  {
    "path": "shared/src/shared/domain/enums/scheduled_type.py",
    "content": "from enum import StrEnum\n\n\nclass ScheduledType(StrEnum):\n    EVERYDAY = \"everyday\"\n    SINGLE = \"single\""
  },
  {
    "path": "shared/src/shared/domain/enums/worker_message_status.py",
    "content": "from enum import StrEnum\n\nclass WorkerMessageStatus(StrEnum):\n    PENDING = \"pending\"\n    IN_PROGRESS = \"in_progress\"\n    SENT = \"sent\"\n    FAILED = \"failed\"\n"
  },
  {
    "path": "shared/src/shared/domain/enums/worker_message_type.py",
    "content": "from enum import StrEnum\n\n\nclass WorkerMessageType(StrEnum):\n    POST = \"post\"\n    STORY = \"story\"\n\n"
  },
  {
    "path": "shared/src/shared/domain/enums/publication_status.py",
    "content": "from enum import StrEnum\n\n\nclass PublicationStatus(StrEnum):\n    PENDING = \"pending\"\n    SCHEDULED = \"scheduled\"\n    SCHEDULING = \"scheduling\"\n    IN_PROGRESS = \"in_progress\"\n    POSTED = \"posted\"\n    FAILED = \"failed\"\n    CANCELED = \"canceled\"\n    STALE = \"stale\"\n"
  },
  {
    "path": "shared/src/shared/domain/enums/publish_story_request_status.py",
    "content": "from enum import StrEnum\n\n\nclass PublishStoryRequestStatus(StrEnum):\n    PLANNED = \"planned\"\n    IN_PROGRESS = \"in_progress\"\n    PUBLISHED = \"published\"\n    FAILED = \"failed\"\n    CANCELLED = \"cancelled\"\n"
  },
  {
    "path": "shared/src/shared/domain/enums/send_post_request_status.py",
    "content": "from enum import StrEnum\n\n\nclass SendPostRequestStatus(StrEnum):\n    PLANNED = \"planned\"\n    IN_PROGRESS = \"in_progress\"\n    SENT = \"sent\"\n    FAILED = \"failed\"\n    CANCELLED = \"cancelled\"\n    STALE = \"stale\"\n"
  },
  {
    "path": "shared/src/shared/domain/models/abstract.py",
    "content": "from datetime import datetime\nfrom uuid import UUID\n\nfrom pydantic import BaseModel, ConfigDict\n\n\nclass Model(BaseModel):\n    id: UUID\n    created_at: datetime\n    updated_at: datetime\n\n    model_config = ConfigDict(from_attributes=True)\n"
  },
  {
    "path": "shared/src/shared/domain/models/worker_message.py",
    "content": "from datetime import datetime\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom shared.domain.dto.post_to_publish import MessageEntityDTO\nfrom shared.domain.models import User\nfrom shared.domain.models.abstract import Model\nfrom shared.domain.enums import WorkerMessageType, WorkerMessageStatus\n\n\nclass WorkerMessage(Model):\n    user_id: UUID\n    type: WorkerMessageType\n    text: Optional[str] = None\n    media_path: Optional[str] = None\n    chat_id: Optional[int] = None\n    status: WorkerMessageStatus\n    sent_at: Optional[datetime] = None\n\n    request_id: Optional[UUID] = None\n    entities: Optional[list[MessageEntityDTO]] = None\n\n    user: Optional[User] = None\n"
  },
  {
    "path": "shared/src/shared/domain/models/post.py",
    "content": "from typing import Optional\n\nfrom pydantic import ConfigDict\nfrom sqlalchemy.orm import Mapped\n\nfrom .abstract import Model\nfrom shared.domain.dto.post_to_publish import MessageEntityDTO\n\n\nclass Post(Model):\n    text: str\n    name: str\n    image_path: Optional[str] = None\n    is_template: bool\n\n    html: Optional[str] = None\n    entities: Optional[list[MessageEntityDTO]] = None\n\n    model_config = ConfigDict(from_attributes=True)\n\n"
  },
  {
    "path": "shared/src/shared/domain/models/story.py",
    "content": "from typing import Optional\n\nfrom pydantic import ConfigDict\n\nfrom .abstract import Model\n\n\nclass Story(Model):\n    name: str\n    file_path: str\n    text: Optional[str]\n\n    model_config = ConfigDict(from_attributes=True)\n"
  },
  {
    "path": "shared/src/shared/domain/models/user.py",
    "content": "from typing import Optional\nfrom uuid import UUID\n\nfrom shared.domain.enums import UserRole\nfrom .abstract import Model\nfrom .proxy import Proxy\n\n\nclass User(Model):\n    telegram_id: int\n    telegram_username: Optional[str] = None\n    telegram_first_name: Optional[str] = None\n    telegram_last_name: Optional[str] = None\n    telegram_language_code: Optional[str] = None\n\n    role: UserRole\n    is_banned: Optional[bool] = False\n\n    session_string: Optional[str] = None\n    proxy_id: Optional[UUID] = None\n\n    proxy: Optional[Proxy] = None\n\n    assistant_enabled: bool\n\n\nclass UserWithSessionString(User):\n    session_string: str\n"
  },
  {
    "path": "shared/src/shared/domain/models/story_to_publish.py",
    "content": "from datetime import date, time\nfrom typing import Optional\nfrom uuid import UUID\nfrom pydantic import ConfigDict\n\nfrom shared.domain.enums import ScheduledType, PublicationStatus\nfrom .user import User\nfrom .abstract import Model\nfrom .story import Story\n\n\nclass StoryToPublish(Model):\n    story_id: UUID\n    manager_id: UUID\n    scheduled_type: ScheduledType\n    scheduled_date: Optional[date]\n    scheduled_time: time\n    status: PublicationStatus\n\n    manager: User\n    story: Story\n\n    model_config = ConfigDict(from_attributes=True)\n"
  },
  {
    "path": "shared/src/shared/domain/models/story_request.py",
    "content": "from datetime import datetime\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom shared.domain.enums import PublishStoryRequestStatus\nfrom .abstract import Model\nfrom .story import Story\nfrom .user import User\n\n\nclass PublishStoryRequest(Model):\n    story_id: UUID\n    user_id: UUID\n    scheduled_at: Optional[datetime] = None\n\n    publication_id: UUID\n\n    status: PublishStoryRequestStatus\n    published_at: Optional[datetime] = None\n\n    user: Optional[\"User\"] = None\n    story: Optional[\"Story\"] = None\n"
  },
  {
    "path": "shared/src/shared/domain/models/post_request.py",
    "content": "from datetime import datetime\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom shared.domain.models import User, Post, Chat\nfrom shared.domain.enums import SendPostRequestStatus\nfrom .abstract import Model\n\n\nclass SendPostRequest(Model):\n    post_id: UUID\n    chat_id: UUID\n    user_id: UUID\n    scheduled_at: Optional[datetime] = None\n\n    publication_id: UUID\n\n    status: SendPostRequestStatus\n    sent_at: Optional[datetime] = None\n    stale_at: Optional[datetime] = None\n\n    user: Optional[\"User\"] = None\n    chat: Optional[\"Chat\"] = None\n    post: Optional[\"Post\"] = None\n"
  },
  {
    "path": "shared/src/shared/domain/models/emoji.py",
    "content": "from typing import Optional\n\nfrom .abstract import Model\n\n\nclass Emoji(Model):\n    custom_emoji_id: str\n    name: str\n    img_url: str\n"
  },
  {
    "path": "shared/src/shared/domain/models/proxy.py",
    "content": "from typing import Optional, TYPE_CHECKING\n\nfrom .abstract import Model\n\nif TYPE_CHECKING:\n    from .user import User\n\n\nclass Proxy(Model):\n    proxy_string: str\n    is_free: bool\n    is_deprecated: bool\n\n    user: Optional['User'] = None\n"
  },
  {
    "path": "shared/src/shared/domain/models/post_to_publish.py",
    "content": "from datetime import date, time, datetime\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom pydantic import ConfigDict\n\nfrom shared.domain.enums import ScheduledType, PublicationStatus\nfrom .abstract import Model\nfrom .chat import Chat\nfrom .post import Post\nfrom .user import User\n\n\nclass PostToPublish(Model):\n    post_id: UUID\n    creator_id: UUID\n    responsible_manager_id: UUID\n    scheduled_type: ScheduledType\n    scheduled_date: Optional[date]\n    scheduled_time: time\n    status: PublicationStatus\n\n    creator: User\n    responsible_manager: User\n    chats: list[Chat] = []\n    post: Post\n\n    deleted_at: Optional[datetime] = None\n\n    model_config = ConfigDict(from_attributes=True)\n"
  },
  {
    "path": "shared/src/shared/domain/models/__init__.py",
    "content": "from .user import User, UserWithSessionString\nfrom .post import Post\nfrom .chat import Chat\nfrom .post_request import SendPostRequest\nfrom .worker_message import WorkerMessage\nfrom .story_request import PublishStoryRequest\nfrom .analytics_service import Service\nfrom .post_to_publish import PostToPublish\nfrom .story_to_publish import StoryToPublish\nfrom .story import Story\nfrom .proxy import Proxy\n\nfrom typing import TypeVar\n\nSendingRequest = TypeVar(\n    \"SendingRequest\",\n    SendPostRequest,\n    PublishStoryRequest,\n)\n\nPublication = TypeVar(\n    \"Publication\",\n    PostToPublish,\n    StoryToPublish,\n)\n\n\n__all__ = [\n    \"User\",\n    \"Post\",\n    \"Chat\",\n    \"SendPostRequest\",\n    \"PublishStoryRequest\",\n    \"WorkerMessage\",\n    \"UserWithSessionString\",\n    \"SendingRequest\",\n    \"Service\",\n    \"PostToPublish\",\n    \"StoryToPublish\",\n    \"Story\",\n    \"Proxy\"\n]\n\nProxy.model_rebuild()\n"
  },
  {
    "path": "shared/src/shared/domain/models/chat_type.py",
    "content": "from typing import Optional\n\nfrom .abstract import Model\n\n\nclass ChatType(Model):\n    name: str\n    description: str\n    chats: Optional[list[str]] = None\n"
  },
  {
    "path": "shared/src/shared/domain/models/chat.py",
    "content": "from typing import Optional\nfrom uuid import UUID\n\nfrom .abstract import Model\n\n\nclass Chat(Model):\n    chat_type_id: Optional[UUID] = None\n    name: str\n    chat_id: int\n    invite_link: Optional[str] = None\n    responsible_manager_id: UUID\n"
  },
  {
    "path": "shared/src/shared/domain/models/update_post.py",
    "content": "from uuid import UUID\n\nfrom shared.domain.models.abstract import Model\n\n\nclass UpdatePost(Model):\n    post_id: UUID\n    post_json: dict\n    author_id: UUID\n"
  },
  {
    "path": "shared/src/shared/domain/models/analytics_service.py",
    "content": "from pydantic import ConfigDict\n\nfrom .abstract import Model\n\n\nclass Service(Model):\n    name: str\n    is_active: bool\n\n    model_config = ConfigDict(from_attributes=True)\n"
  },
  {
    "path": "shared/src/shared/domain/requests/enums.py",
    "content": "from enum import StrEnum\n\n\nclass PublicationType(StrEnum):\n    STORY = \"story\"\n    POST = \"post\"\n"
  },
  {
    "path": "shared/src/shared/domain/requests/proxy.py",
    "content": "from pydantic import BaseModel\n\n\nclass CreateProxyRequest(BaseModel):\n    urls: list[str]\n"
  },
  {
    "path": "shared/src/shared/domain/requests/__init__.py",
    "content": "from .enums import PublicationType\nfrom .watcher import (\n    PublicationStartedRequest,\n    RequestProcessingStartedRequest,\n    MessageSentRequest,\n    RequestStatusChangedRequest,\n    PostPublicationStartedRequest,\n    PostRequestProcessingStartedRequest,\n    PostMessageSentRequest,\n    PostRequestStatusChangedRequest,\n    StoryPublicationStartedRequest,\n    StoryRequestProcessingStartedRequest,\n    StoryMessageSentRequest,\n)\nfrom .proxy import CreateProxyRequest\n\n__all__ = [\n    \"PublicationType\",\n    \"PublicationStartedRequest\",\n    \"RequestProcessingStartedRequest\",\n    \"MessageSentRequest\",\n    \"RequestStatusChangedRequest\",\n    'PostPublicationStartedRequest',\n    'PostRequestProcessingStartedRequest',\n    'PostMessageSentRequest',\n    'PostRequestStatusChangedRequest',\n    'StoryPublicationStartedRequest',\n    'StoryRequestProcessingStartedRequest',\n    'StoryMessageSentRequest'\n]\n"
  },
  {
    "path": "shared/src/shared/domain/requests/chat.py",
    "content": "from typing import Optional\nfrom uuid import UUID\n\nfrom pydantic import BaseModel\n\n\nclass CreateChatRequest(BaseModel):\n    invite_link: str\n    manager_id: UUID\n    chat_type_id: Optional[UUID] = None\n"
  },
  {
    "path": "shared/src/shared/domain/requests/watcher/story.py",
    "content": "from shared.domain.requests.enums import PublicationType\nfrom .base import PublicationStartedRequest, RequestProcessingStartedRequest, MessageSentRequest\n\n\nclass StoryPublicationStartedRequest(PublicationStartedRequest):\n    type: PublicationType = PublicationType.STORY\n\n\nclass StoryRequestProcessingStartedRequest(RequestProcessingStartedRequest):\n    type: PublicationType = PublicationType.STORY\n\n\nclass StoryMessageSentRequest(MessageSentRequest):\n    type: PublicationType = PublicationType.STORY\n"
  },
  {
    "path": "shared/src/shared/domain/requests/watcher/posts.py",
    "content": "from shared.domain.requests.enums import PublicationType\nfrom .base import PublicationStartedRequest, RequestProcessingStartedRequest, MessageSentRequest, RequestStatusChangedRequest\n\n\nclass PostPublicationStartedRequest(PublicationStartedRequest):\n    type: PublicationType = PublicationType.POST\n\n\nclass PostRequestProcessingStartedRequest(RequestProcessingStartedRequest):\n    type: PublicationType = PublicationType.POST\n\n\nclass PostMessageSentRequest(MessageSentRequest):\n    type: PublicationType = PublicationType.POST\n\n\nclass PostRequestStatusChangedRequest(RequestStatusChangedRequest):\n    type: PublicationType = PublicationType.POST\n"
  },
  {
    "path": "shared/src/shared/domain/requests/watcher/__init__.py",
    "content": "from .base import PublicationStartedRequest, RequestProcessingStartedRequest, MessageSentRequest, RequestStatusChangedRequest\nfrom .posts import (\n    PostPublicationStartedRequest,\n    PostRequestProcessingStartedRequest,\n    PostMessageSentRequest,\n    PostRequestStatusChangedRequest,\n)\nfrom .story import StoryPublicationStartedRequest, StoryRequestProcessingStartedRequest, StoryMessageSentRequest\n\n__all__ = (\n    'PublicationStartedRequest',\n    'RequestProcessingStartedRequest',\n    'MessageSentRequest',\n    'RequestStatusChangedRequest',\n    'PostPublicationStartedRequest',\n    'PostRequestProcessingStartedRequest',\n    'PostMessageSentRequest',\n    'PostRequestStatusChangedRequest',\n    'StoryPublicationStartedRequest',\n    'StoryRequestProcessingStartedRequest',\n    'StoryMessageSentRequest'\n)\n"
  },
  {
    "path": "shared/src/shared/domain/requests/watcher/base.py",
    "content": "from uuid import UUID\n\nfrom pydantic import BaseModel\n\nfrom shared.domain.requests.enums import PublicationType\n\n\nclass PublicationStartedRequest(BaseModel):\n    type: PublicationType\n    publication_id: UUID\n    child_requests: list[UUID] = []\n\n\nclass RequestProcessingStartedRequest(BaseModel):\n    type: PublicationType\n    request_id: UUID\n    child_messages: list[UUID] = []\n\n\nclass MessageSentRequest(BaseModel):\n    type: PublicationType\n    message_id: UUID\n\n\nclass RequestStatusChangedRequest(BaseModel):\n    type: PublicationType\n    request_id: UUID\n"
  },
  {
    "path": "shared/src/shared/services/emoji.py",
    "content": "from dataclasses import dataclass\nfrom typing import List, Optional\nfrom uuid import UUID\n\nfrom shared.abstractions.repositories.emojis import EmojisRepositoryInterface\nfrom shared.abstractions.services.emoji import EmojiServiceInterface\nfrom shared.domain.dto.emoji import CreateEmojiDTO\nfrom shared.domain.models.emoji import Emoji\n\n\n@dataclass\nclass EmojiService(EmojiServiceInterface):\n    emoji_repository: EmojisRepositoryInterface\n\n    async def get_all_emojis(self) -> List[Emoji]:\n        return await self.emoji_repository.get_all()\n\n    async def create_emoji(self, emoji: CreateEmojiDTO) -> UUID:\n        return await self.emoji_repository.create(emoji)\n\n    async def get_emoji_by_custom_emoji_id(self, custom_emoji_id: int) -> Optional[Emoji]:\n        return await self.emoji_repository.get_by_custom_emoji_id(custom_emoji_id)\n\n    async def remove_added_emoji(self, emoji_id: UUID) -> None:\n        await self.emoji_repository.remove(emoji_id)\n\n    async def get_by_custom_emoji_id(self, emoji_id: UUID) -> None:\n        await self.emoji_repository.remove(emoji_id)\n\n    async def get_existing_custom_ids(self, ids: list[int]) -> list[int]:\n        return list(await self.emoji_repository.get_existing_custom_ids(ids))\n"
  },
  {
    "path": "shared/src/shared/services/__init__.py",
    "content": "from .upload import UploadService\n\n__all__ = [\n    'UploadService',\n]"
  },
  {
    "path": "shared/src/shared/services/scheduler.py",
    "content": "from dataclasses import field, dataclass\nfrom datetime import datetime\nfrom pathlib import Path\nfrom typing import Callable, Coroutine, Any\n\nfrom apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore\nfrom apscheduler.schedulers.asyncio import AsyncIOScheduler\nfrom apscheduler.triggers.cron import CronTrigger\n\nfrom shared.abstractions.services.scheduler import SchedulerInterface\nfrom shared.abstractions.singleton import Singleton\n\n\n@dataclass\nclass Scheduler(\n    SchedulerInterface,\n    Singleton,\n):\n    job_store_sqlite_path: Path\n\n    scheduler: AsyncIOScheduler = field(default=None, init=False)\n\n    def __post_init__(self):\n        jobstores = {\n            'default': SQLAlchemyJobStore(\n                url=f\"sqlite:///{self.job_store_sqlite_path.absolute()}\",\n                tablename='apscheduler_jobs',\n            )\n        }\n        executors = {'default': {'type': 'asyncio'}}\n        job_defaults = {'coalesce': False, 'max_instances': 1}\n\n        self.scheduler = AsyncIOScheduler(\n            jobstores=jobstores,\n            executors=executors,\n            job_defaults=job_defaults,\n            timezone=\"Europe/Moscow\",\n        )\n        self.scheduler.start()\n\n    def initialize(self) -> None:\n        pass\n\n    def schedule_once(\n            self,\n            callback: Callable[[Any], Coroutine[Any, Any, None]],\n            runs_on: datetime,\n            args: tuple[Any, ...] = (),\n            job_id: str = None,\n            misfire_grace_time: int = 60,\n    ) -> None:\n        self.scheduler.add_job(\n            callback,\n            next_run_time=runs_on,\n            args=args,\n            id=job_id,\n            replace_existing=True if job_id else False,\n            misfire_grace_time=misfire_grace_time,\n        )\n\n    def schedule_daily(\n            self,\n            callback: Callable[[Any], Coroutine[Any, Any, None]],\n            hour: int,\n            minute: int,\n            args: tuple[Any, ...] = (),\n            job_id: str | None = None,\n            misfire_grace_time: int = 3600,\n    ) -> None:\n        trigger = CronTrigger(hour=hour, minute=minute, timezone=self.scheduler.timezone)\n        self.scheduler.add_job(\n            callback,\n            trigger=trigger,\n            args=args,\n            id=job_id,\n            replace_existing=True if job_id else False,\n            misfire_grace_time=misfire_grace_time,\n        )\n\n    def add_listener(self, callback: Callable[[Any], None], mask: int) -> None:\n        self.scheduler.add_listener(callback, mask=mask)\n"
  },
  {
    "path": "shared/src/shared/services/watcher_client/client.py",
    "content": "from contextlib import asynccontextmanager\nfrom dataclasses import dataclass\nfrom typing import AsyncGenerator\n\nfrom httpx import AsyncClient\nfrom pydantic import BaseModel\n\nfrom shared.abstractions.services.watcher_client import WatcherClientInterface\nfrom shared.domain.requests import MessageSentRequest, RequestProcessingStartedRequest, PublicationStartedRequest, RequestStatusChangedRequest\n\n\n@dataclass\nclass WatcherClient(WatcherClientInterface):\n    base_url: str\n\n    publication_started_endpoint: str = \"/watch/publication\"\n    request_processing_started_endpoint: str = \"/watch/request\"\n    message_sent_endpoint: str = \"/watch/message\"\n    request_status_endpoint: str = \"/watch/request-status\"\n\n    async def report_publication_started(self, request: PublicationStartedRequest) -> None:\n        await self._send_post_request(\n            request=request,\n            endpoint=self.publication_started_endpoint,\n        )\n\n    async def report_request_processing_started(self, request: RequestProcessingStartedRequest) -> None:\n        await self._send_post_request(\n            request=request,\n            endpoint=self.request_processing_started_endpoint,\n        )\n\n    async def report_message_sent(self, request: MessageSentRequest) -> None:\n        await self._send_post_request(\n            request=request,\n            endpoint=self.message_sent_endpoint,\n        )\n\n    async def report_request_status_changed(self, request: RequestStatusChangedRequest) -> None:\n        await self._send_post_request(\n            request=request,\n            endpoint=self.request_status_endpoint,\n        )\n\n    async def _send_post_request(self, request: BaseModel, endpoint: str) -> None:\n        async with self._get_client() as client:\n            await client.post(\n                url=endpoint,\n                json=request.model_dump(mode=\"json\"),\n            )\n\n    @asynccontextmanager\n    async def _get_client(self) -> AsyncGenerator[AsyncClient, None]:\n        async with AsyncClient(base_url=self.base_url) as client:\n            yield client\n"
  },
  {
    "path": "shared/src/shared/services/watcher_client/__init__.py",
    "content": "from .settings import WatcherSettings\nfrom .client import WatcherClient\n\n__all__ = [\n    \"WatcherSettings\",\n    \"WatcherClient\",\n]\n"
  },
  {
    "path": "shared/src/shared/services/watcher_client/settings.py",
    "content": "from pathlib import Path\n\nfrom pydantic import Field\nfrom pydantic_settings import SettingsConfigDict\n\nfrom shared.settings import AbstractSettings\n\n\nclass WatcherSettings(AbstractSettings):\n    host: str = Field('watcher')\n    port: int = Field(8080)\n\n    @property\n    def url(self):\n        return f\"http://{self.host}:{self.port}\"\n\n    model_config = SettingsConfigDict(\n        extra=\"ignore\",\n        json_file=Path(__file__).parent.parent.parent / \"watcher_settings.json\",\n        json_file_encoding=\"utf-8\",\n        populate_by_name=True,\n    )\n"
  },
  {
    "path": "shared/src/shared/services/upload/__init__.py",
    "content": "import logging\nimport os\nfrom dataclasses import field, dataclass\nfrom pathlib import Path\nfrom typing import Annotated\nfrom uuid import uuid4\n\nimport aiofiles\n\nfrom shared.abstractions.services import UploadServiceInterface\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass UploadService(UploadServiceInterface):\n    public_backend_base_url: str\n    images_dir: str = field(default=\"/app/upload\")\n\n    files_endpoint: str = 'upload'\n\n    @staticmethod\n    def get_extension(filename: str) -> str:\n        return filename.split('.')[-1]\n\n    def get_file_url(self, name: str) -> str:\n        return f'{self.public_backend_base_url}/{self.files_endpoint}/{name}'\n\n    async def upload(self, file: bytes, extension: str) -> str:\n        new_filename, new_filepath = self._get_new_file_path(extension)\n        try:\n            async with aiofiles.open(new_filepath, \"wb\") as f:\n                await f.write(file)\n\n            return new_filename\n        except Exception:\n            logger.error(\"There was an error while uploading file\", exc_info=True)\n            raise\n\n    def get_file_path(self, filename: str) -> str:\n        return os.path.join(self.images_dir, filename)\n\n    def _get_new_file_path(\n            self,\n            extension: str,\n    ) -> tuple[\n        Annotated[str, 'filename'],\n        Annotated[str, 'file path'],\n    ]:\n        new_filename = f\"{uuid4()}.{extension}\"\n        return new_filename, self.get_file_path(new_filename)\n\n    async def initialize(self) -> None:\n        images = Path(self.images_dir)\n\n        if not images.exists():\n            images.mkdir(parents=True, exist_ok=True)\n"
  },
  {
    "path": "shared/src/shared/services/upload/settings.py",
    "content": "from pathlib import Path\n\nfrom pydantic import Field\nfrom pydantic_settings import SettingsConfigDict\n\nfrom shared.settings import AbstractSettings\n\n\nclass UploadSettings(AbstractSettings):\n    host_upload_dir: str = Field('/Users/daria/PycharmProjects/ai_assistant/upload/', alias='HOST_UPLOAD_DIR')\n    app_upload_dir: str = Field('/app/upload/')\n\n    model_config = SettingsConfigDict(\n        extra=\"ignore\",\n        json_file=Path(__file__).parent.parent.parent / \"upload_settings.json\",\n        json_file_encoding=\"utf-8\",\n        populate_by_name=True,\n    )\n"
  },
  {
    "path": "shared/src/shared.egg-info/PKG-INFO",
    "content": "Metadata-Version: 2.4\nName: shared\nVersion: 0.1.0\nSummary: Shared DB models, repositories and utilities\nRequires-Python: >=3.12\nRequires-Dist: pydantic>=2.11\nRequires-Dist: pydantic-settings>=2.9.1\nRequires-Dist: sqlalchemy>=2.0\nRequires-Dist: asyncpg>=0.30\nRequires-Dist: alembic>=1.15\nRequires-Dist: alembic-postgresql-enum>=1.7\nRequires-Dist: greenlet>=3.2.2\nRequires-Dist: fastapi>=0.115.12\nRequires-Dist: aiofiles>=24.1.0\nRequires-Dist: apscheduler>=3.11.0\nRequires-Dist: httpx>=0.28.1\n"
  },
  {
    "path": "shared/src/shared.egg-info/SOURCES.txt",
    "content": "pyproject.toml\nsrc/__init__.py\nsrc/shared/__init__.py\nsrc/shared/config.py\nsrc/shared/settings.json\nsrc/shared.egg-info/PKG-INFO\nsrc/shared.egg-info/SOURCES.txt\nsrc/shared.egg-info/dependency_links.txt\nsrc/shared.egg-info/requires.txt\nsrc/shared.egg-info/top_level.txt\nsrc/shared/abstractions/__init__.py\nsrc/shared/abstractions/singleton.py\nsrc/shared/abstractions/repositories/__init__.py\nsrc/shared/abstractions/repositories/abstract.py\nsrc/shared/abstractions/repositories/chat.py\nsrc/shared/abstractions/repositories/chat_type.py\nsrc/shared/abstractions/repositories/emojis.py\nsrc/shared/abstractions/repositories/post.py\nsrc/shared/abstractions/repositories/post_request.py\nsrc/shared/abstractions/repositories/post_to_publish.py\nsrc/shared/abstractions/repositories/proxy.py\nsrc/shared/abstractions/repositories/story.py\nsrc/shared/abstractions/repositories/story_request.py\nsrc/shared/abstractions/repositories/story_to_publish.py\nsrc/shared/abstractions/repositories/update_post.py\nsrc/shared/abstractions/repositories/user.py\nsrc/shared/abstractions/repositories/uuid_pk_abstract.py\nsrc/shared/abstractions/repositories/worker_message.py\nsrc/shared/abstractions/services/__init__.py\nsrc/shared/abstractions/services/consumer.py\nsrc/shared/abstractions/services/emoji.py\nsrc/shared/abstractions/services/scheduler.py\nsrc/shared/abstractions/services/upload.py\nsrc/shared/abstractions/services/watcher_client.py\nsrc/shared/dependencies/__init__.py\nsrc/shared/dependencies/repositories/__init__.py\nsrc/shared/dependencies/repositories/chat.py\nsrc/shared/dependencies/repositories/chat_type.py\nsrc/shared/dependencies/repositories/emoji.py\nsrc/shared/dependencies/repositories/post.py\nsrc/shared/dependencies/repositories/post_request.py\nsrc/shared/dependencies/repositories/post_to_publish.py\nsrc/shared/dependencies/repositories/proxy.py\nsrc/shared/dependencies/repositories/sessionmaker.py\nsrc/shared/dependencies/repositories/story.py\nsrc/shared/dependencies/repositories/story_request.py\nsrc/shared/dependencies/repositories/story_to_publish.py\nsrc/shared/dependencies/repositories/update_post.py\nsrc/shared/dependencies/repositories/user.py\nsrc/shared/dependencies/repositories/worker_message.py\nsrc/shared/dependencies/services/__init__.py\nsrc/shared/dependencies/services/emoji.py\nsrc/shared/dependencies/services/get_scheduler.py\nsrc/shared/dependencies/services/upload.py\nsrc/shared/dependencies/services/watcher_client.py\nsrc/shared/domain/__init__.py\nsrc/shared/domain/dto/__init__.py\nsrc/shared/domain/dto/abstract.py\nsrc/shared/domain/dto/chat.py\nsrc/shared/domain/dto/chat_type.py\nsrc/shared/domain/dto/emoji.py\nsrc/shared/domain/dto/post.py\nsrc/shared/domain/dto/post_request.py\nsrc/shared/domain/dto/post_to_publish.py\nsrc/shared/domain/dto/proxy.py\nsrc/shared/domain/dto/service.py\nsrc/shared/domain/dto/story.py\nsrc/shared/domain/dto/story_request.py\nsrc/shared/domain/dto/story_to_publish.py\nsrc/shared/domain/dto/update_post.py\nsrc/shared/domain/dto/user.py\nsrc/shared/domain/dto/worker_message.py\nsrc/shared/domain/enums/__init__.py\nsrc/shared/domain/enums/publication_status.py\nsrc/shared/domain/enums/publish_story_request_status.py\nsrc/shared/domain/enums/scheduled_type.py\nsrc/shared/domain/enums/send_post_request_status.py\nsrc/shared/domain/enums/user_role.py\nsrc/shared/domain/enums/worker_message_status.py\nsrc/shared/domain/enums/worker_message_type.py\nsrc/shared/domain/models/__init__.py\nsrc/shared/domain/models/abstract.py\nsrc/shared/domain/models/analytics_service.py\nsrc/shared/domain/models/chat.py\nsrc/shared/domain/models/chat_type.py\nsrc/shared/domain/models/emoji.py\nsrc/shared/domain/models/post.py\nsrc/shared/domain/models/post_request.py\nsrc/shared/domain/models/post_to_publish.py\nsrc/shared/domain/models/proxy.py\nsrc/shared/domain/models/story.py\nsrc/shared/domain/models/story_request.py\nsrc/shared/domain/models/story_to_publish.py\nsrc/shared/domain/models/update_post.py\nsrc/shared/domain/models/user.py\nsrc/shared/domain/models/worker_message.py\nsrc/shared/domain/requests/__init__.py\nsrc/shared/domain/requests/chat.py\nsrc/shared/domain/requests/enums.py\nsrc/shared/domain/requests/proxy.py\nsrc/shared/domain/requests/watcher/__init__.py\nsrc/shared/domain/requests/watcher/base.py\nsrc/shared/domain/requests/watcher/posts.py\nsrc/shared/domain/requests/watcher/story.py\nsrc/shared/infrastructure/__init__.py\nsrc/shared/infrastructure/main_db/__init__.py\nsrc/shared/infrastructure/main_db/entities.py\nsrc/shared/infrastructure/main_db/migrator.py\nsrc/shared/infrastructure/main_db/settings.py\nsrc/shared/infrastructure/main_db/repositories/__init__.py\nsrc/shared/infrastructure/main_db/repositories/abstract.py\nsrc/shared/infrastructure/main_db/repositories/chat.py\nsrc/shared/infrastructure/main_db/repositories/chat_type.py\nsrc/shared/infrastructure/main_db/repositories/emoji.py\nsrc/shared/infrastructure/main_db/repositories/exceptions.py\nsrc/shared/infrastructure/main_db/repositories/post.py\nsrc/shared/infrastructure/main_db/repositories/post_request.py\nsrc/shared/infrastructure/main_db/repositories/post_to_publish.py\nsrc/shared/infrastructure/main_db/repositories/proxy.py\nsrc/shared/infrastructure/main_db/repositories/story.py\nsrc/shared/infrastructure/main_db/repositories/story_request.py\nsrc/shared/infrastructure/main_db/repositories/story_to_publish.py\nsrc/shared/infrastructure/main_db/repositories/update_post.py\nsrc/shared/infrastructure/main_db/repositories/user.py\nsrc/shared/infrastructure/main_db/repositories/worker_message.py\nsrc/shared/infrastructure/sqlalchemy/__init__.py\nsrc/shared/infrastructure/sqlalchemy/exceptions.py\nsrc/shared/infrastructure/sqlalchemy/repository.py\nsrc/shared/services/__init__.py\nsrc/shared/services/emoji.py\nsrc/shared/services/scheduler.py\nsrc/shared/services/upload/__init__.py\nsrc/shared/services/upload/settings.py\nsrc/shared/services/watcher_client/__init__.py\nsrc/shared/services/watcher_client/client.py\nsrc/shared/services/watcher_client/settings.py\nsrc/shared/settings/__init__.py\nsrc/shared/settings/abstract.py\nsrc/shared/settings/bot.py\nsrc/shared/settings/db.py\nsrc/shared/settings/docker.py\nsrc/shared/settings/environment.py\nsrc/shared/settings/jwt.py\nsrc/shared/settings/merged_source.py\nsrc/shared/settings/miniapp.py\nsrc/shared/settings/scheduler.py\nsrc/shared/settings/worker.py"
  },
  {
    "path": "shared/src/shared.egg-info/requires.txt",
    "content": "pydantic>=2.11\npydantic-settings>=2.9.1\nsqlalchemy>=2.0\nasyncpg>=0.30\nalembic>=1.15\nalembic-postgresql-enum>=1.7\ngreenlet>=3.2.2\nfastapi>=0.115.12\naiofiles>=24.1.0\napscheduler>=3.11.0\nhttpx>=0.28.1\n"
  },
  {
    "path": "shared/src/shared.egg-info/top_level.txt",
    "content": "shared\n"
  },
  {
    "path": "shared/src/shared.egg-info/dependency_links.txt",
    "content": "\n"
  },
  {
    "path": "observability/loki/config.yaml",
    "content": "auth_enabled: false\nserver:\n  http_listen_port: 3100\ncommon:\n  path_prefix: /loki\n  storage:\n    filesystem:\n      chunks_directory: /loki/chunks\n      rules_directory: /loki/rules\n  ring:\n    instance_addr: 127.0.0.1\n    kvstore:\n      store: inmemory\nschema_config:\n  configs:\n    - from: 2024-01-01\n      store: boltdb-shipper\n      object_store: filesystem\n      schema: v13\n      index:\n        prefix: index_\n        period: 24h\ningester:\n  lifecycler:\n    address: 127.0.0.1\n    ring:\n      kvstore:\n        store: inmemory\n      replication_factor: 1\ncompactor:\n  working_directory: /loki/compactor\n  shared_store: filesystem\nlimits_config:\n  retention_period: 30d\n  split_queries_by_interval: 15m\n  max_cache_freshness_per_query: 10m\n\nfrontend:\n  max_outstanding_per_tenant: 2048\nquery_scheduler:\n  max_outstanding_requests_per_tenant: 8192\n\n\n"
  },
  {
    "path": "observability/promtail/promtail.yaml",
    "content": "server:\n  http_listen_port: 9080\n  grpc_listen_port: 0\n\npositions:\n  filename: /run/promtail/positions.yaml\n\nclients:\n  - url: http://loki:3100/loki/api/v1/push\n\nscrape_configs:\n  - job_name: docker\n    docker_sd_configs:\n      - host: unix:///var/run/docker.sock\n        refresh_interval: 5s\n        filters:\n          - name: status\n            values: [\"running\", \"created\", \"restarting\", \"exited\", \"paused\", \"dead\"]\n    relabel_configs:\n      # log file path and stream\n      - source_labels: [\"__meta_docker_container_log_path\"]\n        target_label: \"__path__\"\n      - source_labels: [\"__meta_docker_container_log_stream\"]\n        target_label: \"stream\"\n      - source_labels: [\"__meta_docker_container_label_com_docker_compose_service\"]\n        target_label: \"service\"\n      - source_labels: [\"__meta_docker_container_label_com_docker_compose_project\"]\n        target_label: \"project\"\n      - source_labels: [\"__meta_docker_container_name\"]\n        target_label: \"container\"\n      # динамические воркеры: account-worker-<uuid>\n      - source_labels: [\"__meta_docker_container_name\"]\n        regex: \"account-worker-(.+)\"\n        target_label: \"worker_id\"\n        replacement: \"$1\"\n      - source_labels: [\"__meta_docker_container_name\"]\n        regex: \"account-worker-.*\"\n        target_label: \"service\"\n        replacement: \"account-worker\"\n    pipeline_stages:\n      - docker: {}\n      - labeldrop:\n          - filename\n      - multiline:\n          firstline: '^(?:\\w{3}\\s+\\d{1,2}\\s+\\d{2}:\\d{2}:\\d{2}|\\{)' # простая эвристика для склейки\n\n\n"
  },
  {
    "path": "observability/grafana/provisioning/datasources/datasource.yaml",
    "content": "apiVersion: 1\ndatasources:\n  - name: Loki\n    uid: grafana-loki\n    type: loki\n    access: proxy\n    url: http://loki:3100\n    isDefault: true\n    jsonData:\n      maxLines: 5000\n\n"
  },
  {
    "path": "observability/grafana/provisioning/dashboards/dashboards.yaml",
    "content": "apiVersion: 1\nproviders:\n  - name: Default\n    orgId: 1\n    folder: \"Logs\"\n    type: file\n    disableDeletion: false\n    allowUiUpdates: true\n    options:\n      path: /etc/grafana/provisioning/dashboards/json\n\n"
  },
  {
    "path": "nginx/compose.yaml",
    "content": "services:\n  nginx:\n    image: nginx:latest\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf:ro\n      - /etc/letsencrypt:/etc/letsencrypt\n      - /home/github-runner/acme-challenge:/home/github-runner/acme-challenge\n    restart: always\n    networks:\n      - default\n      - assistant_bridge\n"
  },
  {
    "path": "nginx/nginx.conf",
    "content": "events {\n    worker_connections 1024;\n}\n\nhttp {\n    resolver 127.0.0.11;\n\n    server {\n        listen 80;\n        server_name ai.avocado.ceo;\n\n        # для ACME challenge\n        location ^~ /.well-known/acme-challenge/ {\n            root /home/github-runner/acme-challenge;\n            default_type \"text/plain\";\n            try_files $uri =404;\n        }\n\n        # остальное редиректим на https\n        location / {\n            return 301 https://$host$request_uri;\n        }\n    }\n\n    server {\n        listen 443 ssl;\n        server_name ai.avocado.ceo;\n\n        ssl_certificate /etc/letsencrypt/live/ai.avocado.ceo/fullchain.pem;\n        ssl_certificate_key /etc/letsencrypt/live/ai.avocado.ceo/privkey.pem;\n        include /etc/letsencrypt/options-ssl-nginx.conf;\n        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;\n\n        # ---- Grafana ----\n        # /grafana -> /grafana/ (однократный редирект, без петель)\n        location = /grafana {\n            return 301 /grafana/;\n        }\n\n        # основной прокси только на путь со слэшем\n        location /grafana/ {\n            resolver 127.0.0.11 valid=30s;\n            set $grafana_upstream http://grafana:3000;\n\n            proxy_http_version 1.1;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            proxy_set_header X-Forwarded-Host $host;\n            proxy_set_header X-Forwarded-Prefix /grafana;\n\n            proxy_redirect off;\n            proxy_pass $grafana_upstream;\n        }\n        # ---- /Grafana ----\n\n        location / {\n            resolver 127.0.0.11 valid=30s;\n            set $frontend_upstream http://admin-frontend:80;\n            proxy_pass $frontend_upstream;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n\n        location /api {\n            client_max_body_size 100M;\n            proxy_request_buffering off;   # не буферизуй upload на диск\n            proxy_buffering off;\n            proxy_read_timeout 300s;\n            proxy_send_timeout 300s;\n            send_timeout 300s;\n            proxy_http_version 1.1;\n            proxy_set_header Connection \"\";\n\n            resolver 127.0.0.11 valid=30s;\n            set $backend_upstream http://admin-backend:8080;\n            proxy_pass $backend_upstream;\n\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n    }\n}\n"
  },
  {
    "path": ".github/workflows/deploy.yml",
    "content": "name: DEPLOY\n\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\n\njobs:\n  deploy:\n    name: Deploy all\n    runs-on: [\n      \"self-hosted\",\n      \"prod\"\n    ]\n    defaults:\n      run:\n        working-directory: repo\n    env:\n      DEPLOY_ENV: prod\n      COMPOSE_PROJECT_NAME: ai-assistant\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          clean: false   # avoid deleting workspace with root-owned data/\n          fetch-depth: 0\n          path: repo\n\n      - name: Prepare environment\n        run: |\n          touch .env\n          touch grafana.env\n          touch ./posts-service/jobs.sqlite\n\n          # persistent dirs for logs/state (survive docker system prune -af)\n          sudo mkdir -p ./data/loki ./data/grafana ./data/promtail\n          sudo chmod -R 0777 ./data\n\n          make bw\n          make mn\n\n          if [ \"$DEPLOY_ENV\" = \"prod\" ]; then\n            cp prod.env .env\n\n            DOMAIN=\"https://ai.avocado.ceo\"\n\n            echo \"\" >> .env\n            echo \"APP_HOST=${DOMAIN}\" >> .env\n            echo \"MINIAPP_URL=${DOMAIN}\" >> .env\n            echo \"HOST_UPLOAD_DIR=/root/upload\" >> .env\n\n            echo \"VITE_API_BASE=${DOMAIN}/api\" > admin/frontend/.env\n\n            # point worker-manager host paths to this checkout (repo/) so bind mounts resolve\n            echo \"HOST_ROOT_CONFIG_PATH=$(pwd)/worker-manager/infrastructure/docker/worker-settings/\" >> .env\n\n            echo \"GF_SERVER_DOMAIN=ai.avocado.ceo\" >> grafana.env\n            echo \"GF_SERVER_ROOT_URL=https://ai.avocado.ceo/grafana/\" >> grafana.env\n            echo \"GF_SERVER_SERVE_FROM_SUB_PATH=true\" >> grafana.env\n          fi\n\n      - name: Compose up\n        run: |\n          sudo docker compose up --build -d\n\n      - name: Cleanup\n        run: |\n          sudo docker system prune -a -f --filter \"label!=keep\"\n"
  },
  {
    "path": ".github/workflows/reboot-nginx.yml",
    "content": "name: REBOOT NGINX\n\n\non:\n  workflow_dispatch:\n\n\njobs:\n  reboot:\n    name: Reboot nginx docker service\n    runs-on: [\n      \"self-hosted\",\n      \"dev\"\n    ]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: Reboot\n        run: |\n          sudo docker compose stop nginx\n          sudo docker compose up --build -d nginx\n"
  },
  {
    "path": "bot/requirements.txt",
    "content": "aiofiles==24.1.0\naiogram==3.20.0.post0\naiohappyeyeballs==2.6.1\naiohttp==3.11.18\naiosignal==1.3.2\nannotated-types==0.7.0\nattrs==25.3.0\ncairocffi==1.7.1\nCairoSVG==2.7.1\ncertifi==2025.4.26\ncffi==1.17.1\ncssselect2==0.8.0\ndefusedxml==0.7.1\nffmpeg-python==0.2.0\nfrozenlist==1.6.0\nfuture==1.0.0\nglaxnimate==0.4.3\nidna==3.10\nimageio==2.37.0\nimageio-ffmpeg==0.6.0\nlottie==0.7.2\nmagic-filter==1.0.12\nmultidict==6.4.3\nnumpy==2.3.1\npillow==11.3.0\npropcache==0.3.1\npycairo==1.28.0\npycparser==2.22\npydantic==2.11.4\npydantic_core==2.33.2\ntinycss2==1.4.0\ntyping-inspection==0.4.0\ntyping_extensions==4.13.2\nwebencodings==0.5.1\nyarl==1.20.0\n"
  },
  {
    "path": "bot/Dockerfile",
    "content": "# worker-manager/Dockerfile\nARG PYTHON_VERSION=3.12.3\n\n# ─── builder ────────────────────────────────────────────────────\nFROM python:${PYTHON_VERSION}-slim AS builder\nENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1\n\n# gcc уже был, добавляем недостающее:\n#   • build-essential → libc6-dev, make, g++\n#   • pkg-config      → .pc-файлы для cairo\n#   • libcairo2-dev   → headers + либы\n#   • libgirepository1.0-dev → иногда требует gir для cairo\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n        build-essential \\\n        pkg-config \\\n        libcairo2-dev \\\n        libgirepository1.0-dev \\\n        libpq-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\n\n# 1) deps + shared\nCOPY bot/requirements.txt .\nCOPY shared/ ./shared\n\nRUN pip install --upgrade pip \\\n && pip install --prefix=/install -r requirements.txt \\\n && pip install --prefix=/install ./shared\n\n# ─── runtime ────────────────────────────────────────────────────\nFROM python:${PYTHON_VERSION}-slim AS runtime\nENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1 \\\n    TZ=Europe/Moscow\n\n# только то, что нужно в production\nRUN apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n        tzdata \\\n        libcairo2 \\\n    && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n    && echo $TZ > /etc/timezone \\\n    && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\n\n# bring in installed packages\nCOPY --from=builder /install /usr/local\n\n# copy your service code\nCOPY bot/ .\n\nENTRYPOINT [\"python3\", \"main.py\"]\n"
  },
  {
    "path": "bot/__init__.py",
    "content": ""
  },
  {
    "path": "bot/utils.py",
    "content": "import pathlib\nfrom uuid import uuid4\n\nimport imageio\nimport asyncio, tempfile, os, logging\nimport shutil\n\nlogger = logging.getLogger(__name__)\n\nLOTTIE_BIN = (\n    shutil.which(\"lottie_convert\")                # ищем без .py\n    or shutil.which(\"lottie_convert.py\")          # или с .py\n    or \"/usr/local/bin/lottie_convert.py\"         # жёсткий fallback\n)\nif not os.path.isfile(LOTTIE_BIN):\n    raise RuntimeError(f\"LOTTIE_BIN not found at {LOTTIE_BIN}\")\n\ndef _sync_convert_webm_to_webp(input_path: str) -> str:\n    \"\"\"\n    Synchronous helper that reads a .webm and writes an animated .webp\n    with the same basename.\n    \"\"\"\n    # derive output path\n    logger.info(f\"Converting webm to webp {input_path}\")\n    base, ext = os.path.splitext(input_path)\n    logger.info(f\"Converting webp to webp {base}, {ext}\")\n    output_path = f\"{base}.webp\"\n\n    reader = imageio.get_reader(input_path, 'ffmpeg')\n    meta = reader.get_meta_data()\n    fps = meta.get('fps', 24)  # fallback to 24fps if absent\n\n    writer = imageio.get_writer(\n        output_path,\n        format='webp',\n        mode='I',\n        duration=1 / fps\n    )\n\n    for frame in reader:\n        writer.append_data(frame)\n\n    writer.close()\n    reader.close()\n\n    return output_path\n\n\nasync def convert_webm_to_webp(input_path: str) -> str:\n    \"\"\"\n    Async wrapper that offloads the blocking conversion to a thread executor.\n    Returns the path to the created .webp file.\n    \"\"\"\n    loop = asyncio.get_running_loop()\n    output_path = await loop.run_in_executor(\n        None,  # uses default ThreadPoolExecutor\n        _sync_convert_webm_to_webp,\n        input_path\n    )\n    return output_path\n\n# определяем бинарь-конвертер один раз\n_LOTTIE = (\n    shutil.which(\"lottie_convert\") or\n    shutil.which(\"lottie_convert.py\") or\n    \"/usr/local/bin/lottie_convert.py\"\n)\nif not os.path.isfile(_LOTTIE):\n    raise RuntimeError(\"lottie_convert не найден — установите lottie[cli]\")\n\nasync def convert_tgs_to_webp(tgs_bytes: bytes) -> bytes:\n    \"\"\"\n    Конвертирует .tgs (Lottie) прямо в анимированный .webp.\n    Возвращает готовый байт-массив WEBP.\n    \"\"\"\n    with tempfile.TemporaryDirectory() as td:\n        src = pathlib.Path(td) / f\"{uuid4()}.tgs\"\n        dst = pathlib.Path(td) / f\"{uuid4()}.webp\"\n        src.write_bytes(tgs_bytes)\n\n        proc = await asyncio.create_subprocess_exec(\n            _LOTTIE, str(src), str(dst),\n            stdout=asyncio.subprocess.PIPE,\n            stderr=asyncio.subprocess.PIPE,\n        )\n        out, err = await proc.communicate()\n\n        if proc.returncode != 0 or not dst.exists():\n            logger.error(\"lottie_convert error:\\n%s\", (err or out).decode().strip())\n            raise RuntimeError(\"Ошибка конвертации .tgs → .webp (см. лог)\")\n\n        return dst.read_bytes()\n"
  },
  {
    "path": "bot/settings.py",
    "content": "from pathlib import Path\n\nfrom pydantic import Field\nfrom pydantic_settings import (\n    SettingsConfigDict,\n)\nfrom shared.infrastructure.main_db import MainDBSettings\nfrom shared.settings import AbstractSettings, EnvironmentSettings, BotSettings, MiniappSettings\n\n\nclass Settings(AbstractSettings):\n    main_db: MainDBSettings = Field(default_factory=MainDBSettings)\n    env: EnvironmentSettings = Field(default_factory=EnvironmentSettings)\n    bot: BotSettings\n    miniapp: MiniappSettings\n\n    model_config = SettingsConfigDict(\n        extra=\"ignore\",\n        json_file=Path(__file__).parent / \"settings.json\",\n        json_file_encoding=\"utf-8\",\n    )\n\n\nsettings = Settings()\n"
  },
  {
    "path": "bot/main.py",
    "content": "import asyncio\nimport logging\nimport os\nimport pathlib\nfrom uuid import uuid4\n\nfrom aiogram import Bot, Dispatcher, types, F\nfrom aiogram.filters import CommandStart, Command, StateFilter\nfrom aiogram.fsm.context import FSMContext\nfrom aiogram.fsm.state import StatesGroup, State\nfrom aiogram.fsm.storage.memory import MemoryStorage\nfrom aiogram.types import (\n    InlineKeyboardMarkup,\n    InlineKeyboardButton,\n    WebAppInfo,\n    ContentType,\n)\nfrom httpx import AsyncClient\nfrom shared.dependencies.repositories import get_proxy_repository\nfrom shared.dependencies.services.emoji import get_emoji_service\nfrom shared.domain.dto import CreateProxyDTO\nfrom shared.domain.dto.emoji import CreateEmojiDTO\nfrom shared.infrastructure.main_db import init_db\nfrom shared.infrastructure.main_db.entities import EmojiFormat\n\nfrom dependencies.service.upload import get_upload_service\nfrom settings import settings\nfrom utils import convert_webm_to_webp, convert_tgs_to_webp\n\n# ——— Logging & Bot setup —————————————————————————————————————\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n)\nlogger = logging.getLogger(__name__)\n\nlogger.info(f'starting bot with token: {settings.bot.token.get_secret_value()}')\n\nbot = Bot(token=settings.bot.token.get_secret_value())\ndp = Dispatcher(storage=MemoryStorage())  # <-- attach FSM storage\n\n\n# ——— Define our two “waiting” states —————————————————————————\nclass BotStates(StatesGroup):\n    waiting_for_proxy = State()\n    waiting_for_emoji = State()\n    waiting_for_remove_emoji = State()\n    waiting_for_sticker_pack = State()\n\n\n# ——— /start handlers (unchanged) ————————————————————————————\n@dp.message(CommandStart(deep_link=True))\nasync def handler_start_deep(message: types.Message):\n    kb = InlineKeyboardMarkup(\n        inline_keyboard=[\n            [\n                InlineKeyboardButton(\n                    text=\"Открыть админку\",\n                    web_app=WebAppInfo(url=settings.miniapp.url),\n                )\n            ]\n        ]\n    )\n    await message.answer(\n        \"Привет! ♡\\n\\nЭто админ-панель*✧･ﾟ: *✧･ﾟ:*\\n\\n\"\n        \"Команда /add_emoji добавляет кастом-эмоджи-стикер,\\n\\n \"\n        \"/add_sticker_pack добавляет весь набор стикеров.\\n\\n\",\n        \"Чтобы удалить стикер жми /remove_emoji\\n\\n\"\n        \"/cancel чтобы отменить действие\\n\\n\",\n        reply_markup=kb,\n        parse_mode=\"HTML\",\n        disable_web_page_preview=True,\n    )\n\n\n@dp.message(CommandStart(deep_link=False))\nasync def handler_start_plain(message: types.Message):\n    kb = InlineKeyboardMarkup(\n        inline_keyboard=[\n            [\n                InlineKeyboardButton(\n                    text=\"Открыть админку\",\n                    web_app=WebAppInfo(url=settings.miniapp.url),\n                )\n            ]\n        ]\n    )\n    await message.answer(\n        \"Привет! ♡\\n\\nЭто админ-панель*✧･ﾟ: *✧･ﾟ:*\\n\\n\"\n        \"Команда /add_emoji добавляет кастом-эмоджи-стикер,\\n\\n \"\n        \"/add_sticker_pack добавляет весь набор стикеров.\\n\\n\"\n        \"Чтобы удалить стикер жми /remove_emoji\\n\\n\"\n        \"/cancel чтобы отменить действие\\n\\n\",\n        reply_markup=kb,\n        disable_web_page_preview=True,\n    )\n\n\n@dp.message(Command(commands=[\"cancel\"]))\nasync def cmd_cancel(message: types.Message, state: FSMContext):\n    await state.set_state(None)\n    await message.reply(\n        \"Операция отменена\"\n    )\n\n\n# ——— /add_proxy — ask for text, go into proxy‐state —————————————\n@dp.message(Command(commands=[\"add_proxy\"]))\nasync def cmd_add_proxy(message: types.Message, state: FSMContext):\n    await message.reply(\n        \"🌐 Пришлите список URL для подключения прокси. Каждый URL – на новой строке\"\n    )\n    await state.set_state(BotStates.waiting_for_proxy)\n\n\n# ——— proxy‐state handler: only text, only in waiting_for_proxy —————\n@dp.message(\n    StateFilter(BotStates.waiting_for_proxy),\n    F.content_type == ContentType.TEXT,\n)\nasync def process_proxy(msg: types.Message, state: FSMContext):\n    proxies = msg.text.split()\n    repo = get_proxy_repository()\n    for proxy in proxies:\n        dto = CreateProxyDTO(proxy_string=proxy)\n        await repo.create(dto)\n    total = await repo.get_available_proxies_count()\n    await msg.reply(f\"Добавлено {len(proxies)} новых прокси. Всего доступно {total} прокси.\")\n    await state.clear()  # done with proxies\n\n\n# ——— /add_emoji — ask for sticker, go into emoji‐state ——————————\n@dp.message(Command(commands=[\"add_emoji\"]))\nasync def cmd_add_emoji(message: types.Message, state: FSMContext):\n    await message.reply(\"📩 Пришлите ваш кастом-эмоджи-стикер.\")\n    await state.set_state(BotStates.waiting_for_emoji)\n\n\n# ——— /add_sticker_pack — ask for sticker, go into sticker_pack‐state ——————————\n@dp.message(Command(commands=[\"add_sticker_pack\"]))\nasync def cmd_add_sticker_pack(message: types.Message, state: FSMContext):\n    await message.reply(\n        \"📦 Пришлите ваш кастом-эмоджи-стикер из пака — и я добавлю весь набор.\")\n    await state.set_state(BotStates.waiting_for_sticker_pack)\n\n# ──────────────────────────────────────────────────────────────────\n# /add_emoji  — регистрируем один кастом-эмоджи\n# ──────────────────────────────────────────────────────────────────\n@dp.message(StateFilter(BotStates.waiting_for_emoji))\nasync def process_sticker(msg: types.Message, state: FSMContext):\n    # NEW: универсально достаём кастом-эмоджи из сообщения\n    sticker = (\n        msg.sticker if (msg.sticker and msg.sticker.type == \"custom_emoji\")           # 1) сообщение-стикер\n        else next((e for e in (msg.entities or []) if e.type == \"custom_emoji\"), None) # 2) emoji-entity в тексте\n    )\n    if not sticker:\n        return await msg.reply(\"Это не эмоджи-стикер, попробуйте ещё раз.\")\n\n    # CHANGED: здесь гарантировано custom_emoji_id\n    emoji_service = get_emoji_service()\n    if await emoji_service.get_emoji_by_custom_emoji_id(sticker.custom_emoji_id):\n        return await msg.reply(\"⚠️ Такой эмоджи уже существует.\")\n\n    # ---------- качаем оригинал ----------\n    entity   = (await bot.get_custom_emoji_stickers([sticker.custom_emoji_id]))[0]\n    tg_file  = await bot.get_file(entity.file_id)\n    url      = (\n        f\"https://api.telegram.org/file/bot{settings.bot.token.get_secret_value()}/\"\n        f\"{tg_file.file_path}\"\n    )\n\n    async with AsyncClient() as client:\n        r = await client.get(url)\n        if not r.is_success:\n            logger.error(\"TG download failed: %s\", r.status_code)\n            return await msg.reply(\"Не удалось загрузить медиа 😢 Попробуйте ещё раз.\")\n\n    ext, content = tg_file.file_path.rsplit(\".\", 1)[-1].lower(), r.content\n\n    # ---------- конвертация ----------\n    if ext == \"tgs\":\n        content = await convert_tgs_to_webp(content)  # bytes ← новая функция\n        ext = \"webp\"\n        emoji_format = EmojiFormat.static\n\n\n    elif ext == \"webm\":\n        tmp = f\"/tmp/{uuid4()}.webm\"\n        pathlib.Path(tmp).write_bytes(content)\n        new_webp  = await convert_webm_to_webp(tmp)\n        content   = pathlib.Path(new_webp).read_bytes()\n        os.remove(tmp); os.remove(new_webp)\n        ext, emoji_format = \"webp\", EmojiFormat.video\n\n    else:\n        emoji_format = EmojiFormat.static  # NOTE: .webp уже ок\n\n    # ---------- upload & save ----------\n    upload = get_upload_service()\n    filename   = await upload.upload(content, extension=ext)\n    public_url = upload.get_file_url(filename)\n\n    name = f\"{entity.emoji or ''}_{entity.set_name}_{sticker.custom_emoji_id}\"\n    dto  = CreateEmojiDTO(\n        name=name,\n        img_url=public_url,\n        custom_emoji_id=sticker.custom_emoji_id,\n        format=emoji_format,\n    )\n    await emoji_service.create_emoji(dto)\n    await msg.reply(f\"✅ Эмоджи «{name}» зарегистрировано.\")\n    await state.clear()\n\n\n\n# ──────────────────────────────────────────────────────────────────\n# /add_sticker_pack  — загружаем весь пак по одному кастом-эмоджи\n# ──────────────────────────────────────────────────────────────────\n@dp.message(Command(\"add_sticker_pack\"))\nasync def cmd_add_sticker_pack(message: types.Message, state: FSMContext):\n    await message.reply(\n        \"📦 Пришлите кастом-эмоджи-стикер из нужного пака — добавлю весь набор.\"\n        \" (Это займёт около минуты)\"\n    )\n    await state.set_state(BotStates.waiting_for_sticker_pack)\n\n\n@dp.message(StateFilter(BotStates.waiting_for_sticker_pack))\nasync def process_sticker_pack(msg: types.Message, state: FSMContext):\n    # NEW: универсально достаём кастом-эмоджи\n    sticker = (\n        msg.sticker if (msg.sticker and msg.sticker.type == \"custom_emoji\")\n        else next((e for e in (msg.entities or []) if e.type == \"custom_emoji\"), None)\n    )\n    if not sticker:\n        await msg.reply(\"Пришлите именно кастом-эмоджи-стикер из пака.\")\n        return await state.clear()\n\n    entity       = (await bot.get_custom_emoji_stickers([sticker.custom_emoji_id]))[0]\n    pack_name    = entity.set_name\n    sticker_set  = await bot.get_sticker_set(pack_name)\n\n    upload_service = get_upload_service()\n    emoji_service  = get_emoji_service()\n\n    added = doubles = failed = 0\n    # CHANGED: список уже существующих custom_emoji_id\n    all_ids      = [s.custom_emoji_id for s in sticker_set.stickers if s.custom_emoji_id]\n    existing_ids = await emoji_service.get_existing_custom_ids(all_ids)\n\n    for st in sticker_set.stickers:\n        # NOTE: пропускаем обычные стикеры без custom_emoji_id\n        if not st.custom_emoji_id:\n            continue\n        if st.custom_emoji_id in existing_ids:\n            doubles += 1\n            continue\n\n        tg_file = await bot.get_file(st.file_id)\n        url = (\n            f\"https://api.telegram.org/file/bot{settings.bot.token.get_secret_value()}/\"\n            f\"{tg_file.file_path}\"\n        )\n        async with AsyncClient() as client:\n            r = await client.get(url)\n            if not r.is_success:\n                failed += 1\n                continue\n\n        ext, content = tg_file.file_path.rsplit(\".\", 1)[-1].lower(), r.content\n\n        # ---------- конвертация ----------\n        if ext == \"tgs\":\n            try:\n                content = await convert_tgs_to_webp(content)\n            except RuntimeError:\n                failed += 1\n                raise\n            ext = \"webp\"\n\n\n        elif ext == \"webm\":\n            tmp = f\"/tmp/{uuid4()}.webm\"\n            pathlib.Path(tmp).write_bytes(content)\n            new_webp = await convert_webm_to_webp(tmp)\n            content  = pathlib.Path(new_webp).read_bytes()\n            os.remove(tmp); os.remove(new_webp)\n            ext = \"webp\"\n\n        filename   = await upload_service.upload(content, extension=ext)\n        public_url = upload_service.get_file_url(filename)\n\n        name = f\"{st.emoji or ''}_{entity.set_name}_{st.custom_emoji_id}\"\n        dto  = CreateEmojiDTO(\n            name=name,\n            img_url=public_url,\n            custom_emoji_id=st.custom_emoji_id,\n            format=EmojiFormat.video if ext == \"webm\" else EmojiFormat.static,\n        )\n        await emoji_service.create_emoji(dto)\n        added += 1\n\n    await msg.reply(\n        f\"✅ Добавлено {added} из {added + failed + doubles}.\\n\"\n        f\"Ошибок: {failed}\\n\"\n        f\"Дубликатов: {doubles}\"\n    )\n    await state.clear()\n\n# remove added emoji\n@dp.message(Command(commands=[\"remove_emoji\"]))\nasync def cmd_remove_emoji(message: types.Message, state: FSMContext):\n    await message.reply(\"📩 Пришлите кастом-эмоджи-стикер, который нужно удалить\")\n    await state.set_state(BotStates.waiting_for_remove_emoji)\n\n\n@dp.message(\n    StateFilter(BotStates.waiting_for_remove_emoji),\n)\nasync def process_remove_sticker(msg: types.Message, state: FSMContext):\n    entities: list = msg.entities or [None]\n    sticker = entities[0]\n    if not sticker or not sticker.type == \"custom_emoji\":\n        return await msg.reply(\"Это не эмоджи-стикер, попробуйте ещё раз.\")\n\n    custom_emoji_id = sticker.custom_emoji_id\n    emoji_service = get_emoji_service()\n    emoji = await emoji_service.get_emoji_by_custom_emoji_id(custom_emoji_id)\n    if not emoji:\n        await msg.reply(f\"Такого эмоджи у меня нет :(\")\n        return\n\n    await emoji_service.remove_added_emoji(emoji.id)\n    await msg.reply(f\"✅ Эмоджи «{emoji.name}» удалено.\")\n    await state.clear()\n\n\n# ——— bootstrap & run ——————————————————————————————————————\nasync def main():\n    init_db(settings.main_db.url)\n    logger.info(\"DB initialized\")\n    logger.info(\"Starting bot...\")\n    await dp.start_polling(bot)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n"
  },
  {
    "path": "bot/dependencies/__init__.py",
    "content": ""
  },
  {
    "path": "bot/dependencies/service/upload.py",
    "content": "from shared.abstractions.services import UploadServiceInterface\nfrom shared.dependencies.services import get_upload_service as get_base_upload_service\n\nfrom settings import settings\n\n\ndef get_upload_service() -> UploadServiceInterface:\n    return get_base_upload_service(\n        public_backend_base_url=settings.env.api_host,\n    )\n"
  },
  {
    "path": "bot/dependencies/service/__init__.py",
    "content": ""
  },
  {
    "path": "worker/requirements.txt",
    "content": "alembic==1.15.2\nalembic-postgresql-enum==1.7.0\nannotated-types==0.7.0\nasyncpg==0.30.0\ngreenlet==3.2.2\nMako==1.3.10\nMarkupSafe==3.0.2\npyaes==1.6.1\npyasn1==0.6.1\npydantic==2.11.4\npydantic-settings==2.9.1\npydantic_core==2.33.2\npython-dotenv==1.1.0\npython-socks==2.7.1\nrsa==4.9.1\nSQLAlchemy==2.0.41\nTelethon==1.40.0\ntyping-inspection==0.4.0\ntyping_extensions==4.13.2\n"
  },
  {
    "path": "worker/Dockerfile",
    "content": "# worker-manager/Dockerfile\nARG PYTHON_VERSION=3.12.3\nFROM python:${PYTHON_VERSION}-slim AS builder\nENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1\n\nRUN apt-get update \\\n && apt-get install --no-install-recommends -y gcc libpq-dev \\\n && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\n\n# 1) copy & install service deps + shared\nCOPY worker/requirements.txt .\nCOPY shared/           ./shared\n\nRUN pip install --upgrade pip \\\n && pip install --prefix=/install -r requirements.txt \\\n && pip install --prefix=/install ./shared\n\n# ─── runtime ────────────────────────────────────────────────────\nFROM python:${PYTHON_VERSION}-slim AS runtime\nENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1\n# Set the TZ environment variable\nENV TZ=Europe/Moscow\n\n# Install tzdata, configure the timezone, and clean up\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends tzdata \\\n && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n && echo $TZ > /etc/timezone \\\n && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\n\n# bring in installed packages\nCOPY --from=builder /install /usr/local\n\n# copy your service code\nCOPY worker/ .\n\nENTRYPOINT [\"python3\", \"main.py\"]\n#ENTRYPOINT [\"python3\", \"test.py\"]\n"
  },
  {
    "path": "worker/__init__.py",
    "content": ""
  },
  {
    "path": "worker/settings.py",
    "content": "from pathlib import Path\n\nfrom pydantic import Field\nfrom pydantic_settings import SettingsConfigDict\nfrom shared.infrastructure.main_db import MainDBSettings\nfrom shared.services.upload.settings import UploadSettings\nfrom shared.services.watcher_client import WatcherSettings\nfrom shared.settings import EnvironmentSettings\nfrom shared.settings.worker import WorkerSettings\n\n\nclass Settings(WorkerSettings):\n    db: MainDBSettings = Field(default_factory=MainDBSettings)\n    upload: UploadSettings = Field(default_factory=UploadSettings)\n    watcher: WatcherSettings = Field(default_factory=WatcherSettings)\n    environment: EnvironmentSettings = Field(default_factory=EnvironmentSettings)\n\n    model_config = SettingsConfigDict(\n        extra=\"ignore\",\n        json_file=Path(__file__).parent / \"settings.json\",\n        json_file_encoding=\"utf-8\",\n    )\n\nsettings = Settings()\n"
  },
  {
    "path": "worker/main.py",
    "content": "import logging\n\nfrom shared.infrastructure.main_db import init_db\n\nfrom dependencies.services.message_consumer import get_message_consumer\nfrom services.exceptions import NoMessagesShutdown\nfrom settings import settings\n\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n)\nlogger = logging.getLogger(__name__)\n\n\nasync def main():\n    init_db(settings.db.url)\n\n    # Test Telegram connection before starting consumer\n    logger.info(\"Testing Telegram connection...\")\n    try:\n        from telethon import TelegramClient\n        from telethon.sessions import StringSession\n\n        client = TelegramClient(\n            session=StringSession(settings.user.session_string),\n            api_id=settings.api_id,\n            api_hash=settings.api_hash,\n        )\n\n        await client.connect()\n        logger.info(\"Telegram connection test successful\")\n        await client.disconnect()\n    except Exception as e:\n        logger.error(f\"Telegram connection test failed: {e}\")\n        logger.error(\"Worker cannot connect to Telegram. Check network, proxy settings, or session validity.\")\n        exit(1)\n\n    consumer = get_message_consumer()\n\n    try:\n        await consumer.execute()\n    except NoMessagesShutdown:\n        logger.info(\"No messages in queue, shutting down...\")\n        exit(0)\n    except KeyboardInterrupt:\n        logger.info(f\"Received KeyboardInterrupt, shutting down...\")\n        exit(0)\n    except Exception as e:\n        logger.error(e, exc_info=True)\n        exit(1)\n\n\nif __name__ == '__main__':\n    import asyncio\n\n    # time.sleep(10000)\n\n    asyncio.run(main())\n"
  },
  {
    "path": "worker/dependencies/__init__.py",
    "content": ""
  },
  {
    "path": "worker/dependencies/repositories/telegram.py",
    "content": "from abstractions.repositories import TelegramMessagesRepositoryInterface\nfrom infrastructure.repositories.telegram import TelethonTelegramMessagesRepository\nfrom settings import settings\n\n\ndef get_telegram_message_repository() -> TelegramMessagesRepositoryInterface:\n    return TelethonTelegramMessagesRepository(\n        api_id=settings.api_id,\n        api_hash=settings.api_hash,\n        worker=settings.user,\n    )\n"
  },
  {
    "path": "worker/dependencies/repositories/__init__.py",
    "content": ""
  },
  {
    "path": "worker/dependencies/services/sender.py",
    "content": "from abstractions.services.sender import SenderInterface\nfrom dependencies.repositories.telegram import get_telegram_message_repository\nfrom services.sender import Sender\n\n\ndef get_sender() -> SenderInterface:\n    return Sender(\n        messenger=get_telegram_message_repository(),\n    )\n"
  },
  {
    "path": "worker/dependencies/services/upload.py",
    "content": "from shared.abstractions.services import UploadServiceInterface\nfrom shared.dependencies.services import get_upload_service as get_base_upload_service\n\nfrom settings import settings\n\n\ndef get_upload_service() -> UploadServiceInterface:\n    return get_base_upload_service(\n        public_backend_base_url=settings.environment.api_host,\n    )\n"
  },
  {
    "path": "worker/dependencies/services/__init__.py",
    "content": ""
  },
  {
    "path": "worker/dependencies/services/watcher_client.py",
    "content": "from shared.abstractions.services.watcher_client import WatcherClientInterface\nfrom shared.dependencies.services.watcher_client import get_watcher_client_from_url\n\nfrom settings import settings\n\n\ndef get_watcher_client() -> WatcherClientInterface:\n    return get_watcher_client_from_url(settings.watcher.url)\n"
  },
  {
    "path": "worker/dependencies/services/message_consumer.py",
    "content": "from shared.dependencies.repositories.worker_message import get_worker_message_repository\n\nfrom abstractions.services.message_consumer import MessageConsumerInterface\nfrom dependencies.services.sender import get_sender\nfrom dependencies.services.watcher_client import get_watcher_client\nfrom services.message_consumer import MessageConsumer\n\n\ndef get_message_consumer() -> MessageConsumerInterface:\n    return MessageConsumer(\n        sender=get_sender(),\n        worker_messages_repository=get_worker_message_repository(),\n        watcher_client=get_watcher_client(),\n    )\n"
  },
  {
    "path": "worker/abstractions/__init__.py",
    "content": ""
  },
  {
    "path": "worker/abstractions/repositories/telegram.py",
    "content": "from abc import ABC, abstractmethod\nfrom typing import Optional\n\nfrom shared.domain.dto.post_to_publish import MessageEntityDTO\n\n\nclass TelegramMessagesRepositoryInterface(\n    ABC,\n):\n    @abstractmethod\n    async def send_message(\n            self,\n            chat_id: int,\n            text: str,\n            entities: Optional[list[MessageEntityDTO]] = None,\n            media_path: Optional[str] = None,\n            reply_to: Optional[int] = None,\n    ) -> int:\n        pass\n\n    @abstractmethod\n    async def join_chat(self, chat: str | int):\n        ...\n"
  },
  {
    "path": "worker/abstractions/repositories/__init__.py",
    "content": "from .telegram import TelegramMessagesRepositoryInterface\n"
  },
  {
    "path": "worker/abstractions/services/sender.py",
    "content": "from abc import ABC, abstractmethod\n\nfrom shared.domain.models import WorkerMessage\n\n\nclass SenderInterface(ABC):\n    @abstractmethod\n    async def send(self, message: WorkerMessage):\n        ...\n"
  },
  {
    "path": "worker/abstractions/services/__init__.py",
    "content": ""
  },
  {
    "path": "worker/abstractions/services/message_consumer.py",
    "content": "from abc import ABC\n\nfrom shared.abstractions.services.consumer import ConsumerInterface\n\nfrom abstractions.services.sender import SenderInterface\n\n\nclass MessageConsumerInterface(\n    ConsumerInterface[SenderInterface],\n    ABC,\n):\n    ...\n"
  },
  {
    "path": "worker/infrastructure/__init__.py",
    "content": ""
  },
  {
    "path": "worker/infrastructure/repositories/__init__.py",
    "content": ""
  },
  {
    "path": "worker/infrastructure/repositories/telegram/__init__.py",
    "content": "import logging\nimport re\nfrom asyncio import IncompleteReadError\nfrom dataclasses import dataclass\nfrom typing import Optional, Any\n\nfrom shared.domain.dto.post_to_publish import MessageEntityDTO\nfrom telethon import TelegramClient as Client\nfrom telethon.sessions import StringSession\nfrom telethon.tl.functions.channels import JoinChannelRequest\nfrom telethon.tl.types import (\n    MessageEntityCustomEmoji,\n    MessageEntityBold,\n    MessageEntityItalic,\n    MessageEntityUnderline,\n    MessageEntityStrike,\n    MessageEntityTextUrl,\n    MessageEntityBlockquote,   # ← добавили\n    TypeMessageEntity\n)\n\nfrom abstractions.repositories import TelegramMessagesRepositoryInterface\nfrom shared.domain.models import UserWithSessionString\n\nfrom dependencies.services.upload import get_upload_service\nfrom settings import settings\nfrom .exceptions import ChatJoinError, UnhandlableError\n\nlogger = logging.getLogger(__name__)\nclient_logger = logger.getChild(\"client\")\nclient_logger.setLevel(logging.ERROR)\n\n\n@dataclass\nclass TelethonTelegramMessagesRepository(\n    TelegramMessagesRepositoryInterface,\n):\n    api_id: int\n    api_hash: str\n\n    worker: UserWithSessionString\n\n    async def join_chat(self, chat: str | int):\n        logger.info(f\"Joining chat {chat} with bot {self.worker.telegram_username} ({self.worker.id})\")\n\n        client = Client(\n            session=StringSession(self.worker.session_string),\n            api_id=self.api_id,\n            api_hash=self.api_hash,\n            base_logger=client_logger,\n        )\n\n        await client.connect()\n        try:\n            entity = await client.get_entity(chat)\n\n            await client(JoinChannelRequest(entity))  # noqa\n            await client.disconnect()\n        except Exception as e:\n            await client.disconnect()\n            raise ChatJoinError(\n                f\"There is an error joining chat {chat} with bot {self.worker.telegram_username} ({self.worker.id}):\"\n                f\" {type(e).__name__}: {e}\"\n            )\n\n    async def send_message(\n            self,\n            chat_id: int,\n            text: str,\n            entities: Optional[list[MessageEntityDTO]] = None,\n            media_path: Optional[str] = None,\n            reply_to: Optional[int] = None,\n            retry: int = 0,\n    ) -> int:\n        if not self.api_id or not self.api_hash or not self.worker.session_string:\n            logger.info(\n                f\"One of required parameters \"\n                f\"(api_id={self.api_id}, api_hash={self.api_hash}, \"\n                f\"worker={self.worker.session_string[:5]}...{self.worker.session_string[-5:]}) \"\n                f\"is missing, aborting sending message\"\n            )\n            raise ValueError(\"api_id, api_hash and session_string are required\")\n\n        client = Client(\n            session=StringSession(self.worker.session_string),\n            api_id=self.api_id,\n            api_hash=self.api_hash,\n            base_logger=client_logger,\n            proxy=self.parse_proxy(self.worker.proxy.proxy_string) if self.worker.proxy else None,\n            auto_reconnect=True,\n        )\n\n        try:\n            await client.connect()\n            logger.info(\"Client connected\")\n\n            sending_args: dict[str, Any] = {\n                \"entity\": chat_id,\n                \"message\": text,\n            }\n\n            if reply_to:\n                sending_args['reply_to'] = reply_to\n\n            if media_path:\n                upload_service = get_upload_service()\n                logger.info(f\"Uploading file {media_path}\")\n                sending_args['file'] = upload_service.get_file_url(media_path)\n                logger.info(f\"File path: {sending_args['file']}\")\n\n            if entities:\n                entities_to_send = self._prepare_entities(entities)\n                sending_args['formatting_entities'] = entities_to_send\n                logger.info(\n                    f\"TELETHON_SEND text={sending_args.get(\"message\", \"\")[:200]} \"\n                    f\"ENT={sending_args.get('formatting_entities', [])[:8]}\",\n                )\n                sending_args['link_preview'] = False\n\n            logger.info(f\"Sending {sending_args}\")\n            message = await client.send_message(**sending_args)\n            logger.info('Message sent')\n\n            await client.disconnect()\n            logger.info(\"Client disconnected\")\n            return message.id\n        except (RuntimeError, IncompleteReadError, ConnectionResetError) as e:\n            try:\n                await client.disconnect()\n            except:\n                pass\n\n            if retry > 5:\n                logger.error(\"Cannot connect to Telegram\")\n                raise UnhandlableError from e\n\n            return await self.send_message(\n                chat_id=chat_id,\n                text=text,\n                reply_to=reply_to,\n                retry=retry + 1,\n            )\n\n    @staticmethod\n    def parse_proxy(proxy_string: Optional[str]) -> Optional[tuple]:\n        if not proxy_string:\n            return\n\n        # Regex to parse the proxy string\n        pattern = re.compile(\n            r\"^(?P<protocol>http|socks5|socks4)://(?P<username>.+?):(?P<password>.+?)@(?P<host>.+?):(?P<port>\\d+)$\"\n        )\n        match = pattern.match(proxy_string)\n        if not match:\n            raise ValueError(\"Invalid proxy format\")\n\n        # Extracting components\n        components = match.groupdict()\n        protocol = components[\"protocol\"]\n        username = components[\"username\"]\n        password = components[\"password\"]\n        host = components[\"host\"]\n        port = int(components[\"port\"])\n\n        # Map protocol to PySocks format\n        proxy_type = {\n            \"http\": \"HTTP\",\n            \"socks5\": \"SOCKS5\",\n            \"socks4\": \"SOCKS4\"\n        }.get(protocol, None)\n\n        if not proxy_type:\n            raise ValueError(\"Unsupported proxy protocol\")\n\n        # PySocks/Telethon-compatible format\n        proxy = (proxy_type, host, port, True, username, password)\n        return proxy\n\n    @staticmethod\n    def _prepare_entities(raw_entities: list[MessageEntityDTO]) -> list[TypeMessageEntity]:\n        entities = []\n        for raw_entity in raw_entities:\n            match raw_entity.type:\n                case \"custom_emoji\":\n                    entity_to_add = MessageEntityCustomEmoji(\n                        offset=raw_entity.offset,\n                        length=raw_entity.length,\n                        document_id=raw_entity.custom_emoji_id,\n                    )\n                    entities.append(entity_to_add)\n                case 'bold':\n                    entity_to_add = MessageEntityBold(\n                        offset=raw_entity.offset,\n                        length=raw_entity.length,\n                    )\n                    entities.append(entity_to_add)\n                case 'italic':\n                    entity_to_add = MessageEntityItalic(\n                        offset=raw_entity.offset,\n                        length=raw_entity.length,\n                    )\n                    entities.append(entity_to_add)\n                case 'underline':\n                    entity_to_add = MessageEntityUnderline(\n                        offset=raw_entity.offset,\n                        length=raw_entity.length,\n                    )\n                    entities.append(entity_to_add)\n                case 'strikethrough':\n                    entity_to_add = MessageEntityStrike(\n                        offset=raw_entity.offset,\n                        length=raw_entity.length,\n                    )\n                    entities.append(entity_to_add)\n                case 'text_link':\n                    entity_to_add = MessageEntityTextUrl(\n                        offset=raw_entity.offset,\n                        length=raw_entity.length,\n                        url=raw_entity.url,\n                    )\n                    entities.append(entity_to_add)\n                case 'blockquote':                                  # ← добавили\n                    entity_to_add = MessageEntityBlockquote(\n                        offset=raw_entity.offset,\n                        length=raw_entity.length,\n                    )\n                    entities.append(entity_to_add)\n\n        return entities\n"
  },
  {
    "path": "worker/infrastructure/repositories/telegram/exceptions.py",
    "content": "class NoSuchWorkerException(Exception):\n    ...\n\n\nclass ChatJoinError(Exception):\n    ...\n\n\nclass UnhandlableError(Exception):\n    ...\n"
  },
  {
    "path": "worker/services/sender.py",
    "content": "from dataclasses import dataclass\n\nfrom shared.abstractions.services.watcher_client import WatcherClientInterface\nfrom shared.domain.enums import WorkerMessageType\nfrom shared.domain.models import WorkerMessage\nfrom shared.domain.requests import PostMessageSentRequest\n\nfrom abstractions.repositories import TelegramMessagesRepositoryInterface\nfrom abstractions.services.sender import SenderInterface\nfrom services.exceptions import CannotSendMessageException\n\n\n@dataclass\nclass Sender(SenderInterface):\n    messenger: TelegramMessagesRepositoryInterface\n\n    async def send(self, message: WorkerMessage):\n        match message.type:\n            case WorkerMessageType.POST:\n                await self._send_post(message)\n\n    async def _send_post(self, message: WorkerMessage):\n        try:\n            await self.messenger.send_message(\n                chat_id=message.chat_id,\n                text=message.text,\n                entities=message.entities,\n                media_path=message.media_path,\n            )\n        except Exception as e:\n            raise CannotSendMessageException from e\n"
  },
  {
    "path": "worker/services/__init__.py",
    "content": ""
  },
  {
    "path": "worker/services/exceptions.py",
    "content": "class NoMessagesShutdown(Exception):\n    ...\n\nclass CannotSendMessageException(Exception):\n    ...\n"
  },
  {
    "path": "worker/services/message_consumer.py",
    "content": "import logging\nfrom asyncio import sleep\nfrom dataclasses import dataclass\nfrom datetime import datetime\nfrom typing import NoReturn\n\nfrom shared.abstractions.repositories.worker_message import WorkerMessageRepositoryInterface\nfrom shared.abstractions.services.watcher_client import WatcherClientInterface\nfrom shared.domain.dto import UpdateWorkerMessageDTO\nfrom shared.domain.enums import WorkerMessageStatus\nfrom shared.domain.requests import MessageSentRequest, PostMessageSentRequest\n\nfrom abstractions.services.message_consumer import MessageConsumerInterface\nfrom abstractions.services.sender import SenderInterface\nfrom services.exceptions import NoMessagesShutdown, CannotSendMessageException\n\nlogger = logging.getLogger(__name__)\n\n@dataclass\nclass MessageConsumer(MessageConsumerInterface):\n    sender: SenderInterface\n    worker_messages_repository: WorkerMessageRepositoryInterface\n    watcher_client: WatcherClientInterface\n\n    global_delay: int = 1\n    shutdown_delay: int = 60\n\n    async def execute(self) -> NoReturn:\n        to_shutdown = False\n        while True:\n            message = await self.worker_messages_repository.get_queued_message()\n            logger.info(f\"message: {message}\")\n            if not message:\n                if to_shutdown:\n                    raise NoMessagesShutdown\n\n                to_shutdown = True\n                await sleep(self.shutdown_delay)\n                continue\n\n            await self.worker_messages_repository.set_message_status(\n                message_id=message.id,\n                status=WorkerMessageStatus.IN_PROGRESS,\n            )\n\n            try:\n                await self.sender.send(message)\n                await self.worker_messages_repository.set_message_status(\n                    message_id=message.id,\n                    status=WorkerMessageStatus.SENT,\n                    sent_at=datetime.now(),\n                )\n                report = PostMessageSentRequest(\n                    message_id=message.id,\n                )\n                await self.watcher_client.report_message_sent(report)\n            except CannotSendMessageException:\n                await self.worker_messages_repository.set_message_status(\n                    message_id=message.id,\n                    status=WorkerMessageStatus.FAILED,\n                )\n                logger.error(\"Cannot send message\", exc_info=True)\n            except Exception as e:\n                logger.error(e, exc_info=True)\n                await self.worker_messages_repository.set_message_status(\n                    message_id=message.id,\n                    status=WorkerMessageStatus.FAILED,\n                )\n\n\n            await sleep(self.global_delay)\n"
  },
  {
    "path": "data/loki/boltdb-shipper-active/uploader/name",
    "content": "9f1cd894151e-1756983036680525758"
  },
  {
    "path": "data/loki/wal/checkpoint.000432.tmp/00000000",
    "content": ""
  },
  {
    "path": "data/promtail/positions.yaml",
    "content": "positions:\n  cursor-01cc1803050a74883e421e4e0edd5c29f5466ef1dc83120101b79a301b57501e: \"1757524802\"\n  cursor-0ba00e9cde011baf65fae622964751cfbed2f6a71da3ce75d14a32db3c9ed77f: \"1757428163\"\n  cursor-0bb069b7200486eb58f210a68b74797092bdd186b1491babefc9de65627d25e1: \"1756993375\"\n  cursor-0dcea11505f48312428f929ab728205e527a2f2aade817bd7873839b6a866793: \"1757835045\"\n  cursor-0dde188bc4af83802305d85fc7c4ecf8a6e21b66f94a9c8b81750ffb243753da: \"1757227610\"\n  cursor-0e2d31414c8a62189e7baaec7dd63a9ec9331a89fa70e1138fb24e54b5c483e9: \"1757931669\"\n  cursor-0fb6e736105dbc2bd73f33fcb10aea67d155601b2bad512d800b9800e4264909: \"1757694283\"\n  cursor-2a5189dea911482214ca5c8906f20c6a9658acbd7162d6dfcca2a3465fca1c65: \"1758557547\"\n  cursor-2be728a4a62961820eb4088feb1bd8d7e038ad1e407d784038a13e0761fb5339: \"1757524812\"\n  cursor-2d81489f364d8f790e8f60928d4229b9cf03842fde4058ae97e52eb18ec40a96: \"1757566769\"\n  cursor-2e2e490473b583c0b5c0322f93132d2be1fe78aca4e44ecde46ef6663714bd33: \"1757489524\"\n  cursor-2eeaa93139448d993e50d1f713c6997cdec5fcba1bb2ecdbce3e2013d5becc62: \"1758480804\"\n  cursor-3a51a69ce9801fc1d8ef2de062f17fe882b4d7756b0b8d523f8328f314e2b7d5: \"1757524812\"\n  cursor-3abe7ff96ba7cb9ae0dd27bf0c889fa680fd05972e2e60b1898c3dfe5b4a38a1: \"1757501882\"\n  cursor-3e484b06d64ac03c32c4f5c5dd1f28f177a717e508a74f7ec0fcb66c72bf9f1e: \"1757933562\"\n  cursor-3e73899805ffb39023f60480813d4aa28a918aa3133ed796f880731b3eb428ad: \"1758615887\"\n  cursor-3eb6c1b8012ca0d5e54ea154fbce150626d4e9b53ae29be34d066c51ab9f8fe4: \"1757498467\"\n  cursor-4ab11a97b6fd52d9a67d240472c760fac5e054b71f989d5965f0955a8972379e: \"1757694314\"\n  cursor-4e2eabaee3d0d4d8e326dd4828520092d1d1f59a1438376b98c38b9b6b9e0524: \"1757835241\"\n  cursor-4f6a0e549f5197441e60d3283f41d5cc3b8f089d8d233e5d8d4008f7aac85167: \"1756986657\"\n  cursor-5a8e27e5ed7c76a15a676dbf0888c32a2e78cf858a3c8f0fdb93876d0f64e1c3: \"1757140533\"\n  cursor-5add44483b904478d045e06cef2f37f82d1c0705df84face23c68389db283380: \"1758625109\"\n  cursor-5ca6333ff1250448f2a7fcba404eb43bba994b73ed01cffc980514289b545416: \"1757840134\"\n  cursor-5dca708087e24587968058620736b4bddf8985d38619dc25b4d49a70fb3d1794: \"1757524790\"\n  cursor-5def2442341c1af8750aa1751c09e7ada297986c0242abccb2610c8f828db558: \"1757838432\"\n  cursor-6b93f76062094c4e7be848e3f86c20b16afd7db8d5b182b0dc201da06cfbf1ed: \"1757524270\"\n  cursor-6c0b9ed33fe71a566b64157f5ce4173dfc5193875fe6131207688fd435e40bac: \"1757480310\"\n  cursor-6ffdc1eecf54f5e5e64f4f849e7bf0653b636540e07c80acd77079a84ab31008: \"1757507779\"\n  cursor-7bae5d06c3d02a2ab8a8be4a3de510618d8e23c5416b5205f91c42adc3508a32: \"1757140037\"\n  cursor-7bb99ff6764881423e4bb75c3b32bc740486048ba8f6b052c661d86157510f68: \"1757053326\"\n  cursor-7cdc56017de21365dc1e44ac3b6f7f180dab1178cd77a3e47803128fd9f4a514: \"1756981866\"\n  cursor-7d34bd0fef87630963bc2d374b5cb9709add8e18b93a325065799c71cced3288: \"1756991921\"\n  cursor-7dcaa5e558fac72a829787f7fae5508fa0fb416e4fc86942b099b98a4c5dfc57: \"1757837381\"\n  cursor-7de11ab08c9dc3257d7a6e9f73e48141415f14efc911f8c635a2befccc841bf8: \"1757839570\"\n  cursor-7f055e80d2a466badfad462cd61b20345ce03c4715526e6c4cb010fde4f4544f: \"1758637199\"\n  cursor-9a001d54972fd4a743503ab51a603a95b80d1ca9ff81ff6159ffae23ac41d978: \"1757480459\"\n  cursor-9a4754aee8e5c11b40498f1d9449cb94dfa1f694c9f82eb49951c3f5eca82016: \"1757053255\"\n  cursor-9c18f1d757c30f6e97c21505dc8dd3bbdb57ac23cd1860dcdc6b62c7910d84a6: \"1758007807\"\n  cursor-9ca9cf08f763f179b3480560b81ed4d3d131e467a5cf8d0e709c5e2fc0502f3b: \"1757505274\"\n  cursor-9f1cd894151ec68bd7ab854efd9035da3f5f057b0aa25d542146ffed807f7b63: \"1757566760\"\n  cursor-9f66d70bed4275319b26cf3b710b0a9b5b1784545d990bca9e7f6b90ba23683b: \"1756986655\"\n  cursor-10a182af608d27475df6367e792b1a679b8ce3d2a6fa33083b703a30ca01d70b: \"1757481374\"\n  cursor-10a5941f634c2aee5123f658bd255ff31be5e56da6d9c91b591abfc0d4af6b11: \"1757949887\"\n  cursor-10e9a7430a18a69b0f0346d11f70a8482a6c71473cb11a54b2d05010087b6307: \"1756986868\"\n  cursor-11c717cd719cb82c072503de98cb60a6ba27718ea3c6ad83b033ad2230aa7f8c: \"1758615871\"\n  cursor-15bab421d055193d7c249e7bd839e5ea7ed3fe44fc0c7b4a27c58430d9356ad5: \"1758541451\"\n  cursor-16e085a5ebe734cbc8d784994683fdad672f44dae5c9f77a02146934ec484206: \"1757838420\"\n  cursor-1c7c9a7090703ca7ba0384ac6780dadc7f4ce1bc0e48ebeca785128b69bec6ea: \"1756991915\"\n  cursor-1c5563900a1a845435d9f62ef6d23f0be88b0c9cb4ed7e43fa7f5d5da8914698: \"1758648502\"\n  cursor-1cdfec54a867bfddfe20093fc620ffb746da5c9afab27f2a23e98ef6885839f5: \"1757503678\"\n  cursor-1e694ea28a438554df95154c3088ea8b1b0d0b925535ba3a6cdfe320b8b3a628: \"1757837394\"\n  cursor-1f5afac6bb6dd97be9c316e0754fcb3a44cefefba1abee8b777d22c6251c2f9d: \"1757227605\"\n  cursor-26f7d79b5c35def58a9c38544e3f80f648fc1df1b139ae084a1d863546a47fe3: \"1757524848\"\n  cursor-27a2a87fa94cf9bc849f1f609e4d5882c38c5341aae82ac66c171d81f5abd16d: \"1757140037\"\n  cursor-29b650d8d866c73b78187498e9586b111fd422e889f13adf5dfc4f46dbeaf5e8: \"1757931669\"\n  cursor-32b4b8b3fde888c461d9d95976baaf3410e9a226e03b73d7b9ea6c36ad2a414d: \"1756990825\"\n  cursor-33fd79ff204f70944325017474511afb67ce0d61a88c558eb61ac02274bf80e0: \"1758637199\"\n  cursor-35d9e1c0b7ed4b594a871cd8f23d0cf8f13cd5cc13118af4f90ef0376577185f: \"1757053313\"\n  cursor-42fd564359e4fbe074c99a5571a667182ffaf490ae9f62b4beb513e6616979e7: \"1757565618\"\n  cursor-43f6678c38ad148727f6b31ee29937d9d36ca558d18e38dc746609c32b80a0f8: \"1757504600\"\n  cursor-44abdfd2716d40379600b8d0a2a0b51072d230a67f10880dd66e5218c032bad1: \"1757857000\"\n  cursor-45cd101235a91e396fadfeadfdd5847a1355fca4b63f72ef5fcfd527fbcf9721: \"1756979466\"\n  cursor-48a040aea7607ca354f975b2167cdc62f28adc4d566ce4b2d979e7a631a7a20c: \"1757489503\"\n  cursor-48bfc2aed9c77c31c2b7f5ffe7f4cd33d84b1c97ac9555312f2fac52966abad6: \"1758648503\"\n  cursor-50ca68a168e775bcc141ffa631d48d8da9bbeba6be3944eb69f091fc620b681e: \"1757838420\"\n  cursor-51c39cf796f45b9d50be57a1fc5e60a45f9b1807d9bb19dcd9cce38bed50ce56: \"1757835581\"\n  cursor-57efef1ddd8ec9c0fae3354537bf233aac5a3584f3039992ddee6494a061ac61: \"1757507408\"\n  cursor-59a04219fdd3e58617344388f0e6b445346e9e7c5241f570676c6ed523e2e6dc: \"1757836952\"\n  cursor-62addd034926a0492a7d4a05b83b40211a7c62f42e3c4e105e6ca7f36b305042: \"1757837381\"\n  cursor-62fe6e5f4211e63335343aee4ba1ca0b482e6ec5667f36c807405f9fc11e82e7: \"1757428109\"\n  cursor-65ecda9b4b89a2ef4e0e1e81dbe6eed264ab2296274cd4d662b459c274f7a3f4: \"1758625135\"\n  cursor-65f482d61cd0ce56ae272f1f4cccf0d9b6a70bb2af4603a3aeec7145983f9d3c: \"1757507407\"\n  cursor-66f8c9b65ecd459d46f924e1276b1e7e24f585fdf3a41f65e7ee5d3734e489b7: \"1756991915\"\n  cursor-67aa88c6efbdc9b581df954469e3bbe56bdbf101b73ac996ceb228c30305ae1e: \"1758224061\"\n  cursor-67d9dfd13b463fb399d39800bcd4a81842282cde93ae484e258a180c03cc0259: \"1757771836\"\n  cursor-69e7abc64887e2ac57dc115895446db11b66b4dee7b127d917bfbe141fe7222f: \"1758538672\"\n  cursor-0074cc227e7e701bf600f235db4755305ea31309b6f37308ab58184bf6585540: \"1757478353\"\n  cursor-76b7dc0081b15f11b897f0b46af35ebc9c98563a23ea4b3b1abb771611ab843c: \"1757834333\"\n  cursor-77a80d6d292dea7ea5ca3deb208ec08c63f7f4d88831886af2ff620bc75b1d69: \"1758480688\"\n  cursor-82d19b7cecdf1ecbb56a8efe80d653beb7d5930596e8f394f7eb991f7cccf6cb: \"1756991938\"\n  cursor-87a95a76828431c667c8c3a90c025f38f3daef7c667695654994e76a1c1c6824: \"1756979470\"\n  cursor-89c7be50d793abc6fbc2c1ec9506ce4fbedba865c9e4a87c901e8b28bea5af7d: \"1756979461\"\n  cursor-8a3075c3a000bc7d210e57bf1b035666f86fdb9c15941ae99506ad27df7cc5c2: \"1758273973\"\n  cursor-8a32993fd1e448fd7f1037c00ab7d8c67b482a9c08acfecf5ad8398ba67291cd: \"1758539181\"\n  cursor-8c14ed5fdc6a78cf03de4f3f0412c782d263ac7fb7c034e9a155d044b33b1eae: \"1757053293\"\n  cursor-8e545a69bac40925f4339f0a8c0821f1a3de6b2cf7e3dca735112e83d7cdde84: \"1756990825\"\n  cursor-8f26af164fc32789a3536df0427b75eb4cea0239f116a06d4290d234432d7430: \"1757837384\"\n  cursor-95b82e76b81186848b36e363f7fb03dc15c55b8f222532665f5c16457efe7d10: \"1757781877\"\n  cursor-96d8cea34afffa0b1bf4050576e2af5eac2ef92665b66cc61dd824d98262fefb: \"1757524790\"\n  cursor-128b67b33c4df7e728783f4608acd862a439e343b3c308437288af37158cb436: \"1756979461\"\n  cursor-135c5cf8d82033d556b7c685588097bfb5495877a790c1f6672522e8f9cfafb0: \"1758625109\"\n  cursor-163f2d39a1616690acecf3ca64ef0160bb675a0d3a7ef6d27b3e85056848e9f3: \"1757845500\"\n  cursor-166bfaadda9a74868e7b92311c97ed49c3df55e06e6db1b32f2163120bbb7437: \"1757834267\"\n  cursor-251e4073dee349b9ee5a3cf577981ce2027f5d6482d793ac121df88040df1551: \"1758540593\"\n  cursor-311e85155b3485a8cb69882d699a2854129df810fb39725cdb064b95d98f794b: \"1756979202\"\n  cursor-323e2736d21cb6afdeab71d53b18fced7da124300da51ac6feb535b9e465e262: \"1757837381\"\n  cursor-386fd3370be7cad9ee600804beb1018594a05278f76ac7863a8505cd7097404e: \"1757494787\"\n  cursor-457a0a7895763af83c0a3b9619ce85e11c4a9b3e399b0707b13388a511b290f3: \"1757507778\"\n  cursor-474c35d4cff91ecd307448b93ecb38cbdec39f2c1ddad666f63d97b7189e1a3d: \"1758638071\"\n  cursor-602d9263b1b845446f3613c7e21b32cca74b44ba71f59edf4dc53cd3bee0de41: \"1757931697\"\n  cursor-693e90753dc8a03e08be056e22eeb3d5998529f8ff2e2cd73efcc8616671e60f: \"1757949913\"\n  cursor-773e4f8d30d9723faa8f8394bdc6eb6c18a2d094b812cf51f5866a2c1286dc82: \"1757507519\"\n  cursor-897d4a6569d2c32c5ab4243f5a7378e49c096fbaa18b2403c7ea825d30f58bf5: \"1757495764\"\n  cursor-959cd0580bb02a8408ea7e56f150aa529f004db9734851bf092a5213ee8ef504: \"1758648503\"\n  cursor-963e860fe21cbff7f5b433cd9e462beedacefdaa29e1785fb86a95bd7bbe86c5: \"1758540588\"\n  cursor-978cc6c90c12c70e23c8d31a62d94ac8b79bac95965ddc04994cf49c15cde1ff: \"1756986869\"\n  cursor-1922a86b984330694f31a6f23aab65589f00fce95229bac43606f5933dc7b1c9: \"1757834289\"\n  cursor-2087e48476f269603336905cb18ae435ca982042e01877f40eb843c0cae69f4d: \"1757836940\"\n  cursor-2149ff1a4adfd8312d3c933309de3f03d0df74764f686fe652da63359359e158: \"1757481004\"\n  cursor-2288b45e64fd99697fc75cad639e010a54511bcd76ea092ef021f8087a77bc85: \"1758637202\"\n  cursor-3196a0e85ac994f49d44cb064b5f79801e1fc6352b27d36c0e0f1071b6d49f1d: \"1757501870\"\n  cursor-3467b7be3e9d64d25e9df4a437bef9ba9a4fcb27f87a8209e19f7c089a0aef49: \"1757837389\"\n  cursor-3872c5808c22a51adda136bde104e587097d9b3c7ac06710139d81d1c78087e5: \"1758640323\"\n  cursor-3914cbffb442edee47428fabdc8e64c955d22826f8c6ca412f08447d5de6d05e: \"1757835576\"\n  cursor-4670d6e2f5cc23782d7b8623d67ae5ff2d27409d472bd96b637d06acbf7d0df0: \"1757480314\"\n  cursor-4944df9b73081ded02be9538aa7a0afd956ea6321f1a31ca06a076f2f55a547c: \"1757771836\"\n  cursor-5478f473bd7e50a9dcbe8706035bf0e7e676eb1d94b7905abdbfcad918788cfb: \"1757502900\"\n  cursor-6482f8547a26a5a6983c514b6b9b1fdf8a083739178da7c4c6cd3ce939fe06a1: \"1756993374\"\n  cursor-6564e467f2150be89cadceb8ed3e2772b33ed58cd1b6ab7a2e546ca2396546c1: \"1757478667\"\n  cursor-7050ce0c5fb74f662bb9140066396e5587cb4ef4bac62672721bff867e79387a: \"1757480722\"\n  cursor-7889d361b7bcbf2c5e94dc0f452331b07f69ce6c7bc5efe12a70452b1509d4e5: \"1757838420\"\n  cursor-9046aedf938629fcd096d694049d5d2cfdd2d89829bfc37d3880c5801fcf34a9: \"1757857000\"\n  cursor-41597ccb3cf7d8c3195e99c69fbe50bb3fe436132da6ac4bb906ba54c82b3862: \"1757771836\"\n  cursor-54339db6da3914cac9cc9912b8475a195916099c403e5d1a1cbb5115afc1bfe0: \"1757507718\"\n  cursor-74994ecf4c3c8f04eb1af61d30558fc383b2efaef08721a524beb470bb2c4671: \"1757489907\"\n  cursor-87271dc4a14fd8afd5e7f11b8fc831625dd21efeb224440563cd7f74e4cb3816: \"1757566776\"\n  cursor-88293dfa84573d1ae89a364ff7b752ef126b98e3d4defa55e90ef597f90a295a: \"1758640347\"\n  cursor-88680c95e0bb08de585dee0c7ee4855386be0adff452422092aac556c09496b5: \"1757504141\"\n  cursor-103176e56126fef81352876fce4255734e75ae028d7080d8597f77a5014cc5cb: \"1758538866\"\n  cursor-123391b908155fa4d1945c44b59408e0fc2030ef9fb2d532be8cbfa8a4f0fe3c: \"1757524790\"\n  cursor-138054d2fbd4628f93fce75cd26e8cd8df0a58522c79af484edf76d26e3823cb: \"1757489501\"\n  cursor-258263d5d5c434307bee47215574bf28bad6b35537f2a4b3002ed76a9877f169: \"1758640318\"\n  cursor-269805d0a2b2ad69df0a9ae7b0023cf953f0f36d03708d17014aaef2c982ac57: \"1758648500\"\n  cursor-341818b88e39c83ee6f23c2fcb67d964b706706bc84649febb0b876cf4b2f74a: \"1757836943\"\n  cursor-755361e1a690513586e5271639f0ed1b15d1ed71c236ffb697ab3cd99d5db212: \"1758480812\"\n  cursor-1441406b0856295c224133d7389885c696222101afc5ecfc74d03278bd787442: \"1757489856\"\n  cursor-1548156ebf0f41591079aae9ee10bd01943ee15896527607c5ad0c802453e307: \"1756993374\"\n  cursor-4179470f41ca2270a291c4ecd019676601cfa0f06804ecfc8ffdf7d1cccff5be: \"1757480707\"\n  cursor-5469548b249cce5fbc888200dee1f6cc062ae67c80df752db7fa3dbe36e2ca2c: \"1757507421\"\n  cursor-15768797ab1f31c14598e1486eba75e3bf5aa5c6ce417dc454585e602cc402e5: \"1757566776\"\n  cursor-38970878dbc27add5ccd3ca37412e3ec3659e6a6097865936c989b81590e231f: \"1757836940\"\n  cursor-706836088ae20a7d5529fb214d33ca0dc1f6252dcc8f884ece4895bc436eb8fe: \"1758007695\"\n  cursor-a1fc7c421628dd72d8a5d171cae7fe59d4e8ffc81d53d25ab82b0b44569536b3: \"1757428740\"\n  cursor-a4d9c1d5515d2b4c5867d853795bfe00495b9b31f79d9f9fc59e2db9f49ac083: \"1757428109\"\n  cursor-a8f4e9240013602c9bda0f11fb494d86521ab21abcaacbb00d3a647ab135cc21: \"1758625117\"\n  cursor-a8f760362d6a9afd28ac3ea4aec246c4cf88d5d822d6460eb48007505541598c: \"1757781053\"\n  cursor-a609d0c861e0fcff205e98e7fea7cd9a46c40d4821abdd8a66bfb21f3c615c87: \"1757478353\"\n  cursor-a692d5d55567ca9af9a82e2b698999db10b04708f3140a2b2103a17867e0ddc2: \"1757838907\"\n  cursor-a860e8ed652637e699912445b5ba3c579b3d6f7eae514322e8878e96bdb52120: \"1757771836\"\n  cursor-a168323575010953b13ec6f4d66ec420ec12ebea42f747fbdfed15b48e592d01: \"1758625114\"\n  cursor-aa6bcb4a184bf0e2fdd293f10d1387fc79b76035dbe4e2eb7263392921bf9b59: \"1758274156\"\n  cursor-acde0bbb4efe05ba54d4303ca0a53c29c1c2a06d47f238ac2b20aae8f924dc60: \"1758540712\"\n  cursor-ad8c8669fbdaf334d01859918448023d8857fecbc760151ef7e9dfceaa085f95: \"1758376216\"\n  cursor-ae303a63ff6a163d1e7dffdedd9923d2bb222fc1cb317ad37bd7a1c4b58a4afc: \"1757501870\"\n  cursor-afadb504c8961f887dee0be9c1a6eabc475b4e8a83b55797dedd2c62758d28df: \"1758640344\"\n  cursor-b3d1a5303951e2c3d2a009ab9c0f05d8b98143718d44ba481f6cb5d33ce3204d: \"1758540721\"\n  cursor-b13c8f41473cd07de4e1011656d926a4d9099332cf1112c1e131f01bee46bada: \"1758637199\"\n  cursor-b54c677d44233f7b3f7b584e51ae8f94530253cf63102c2fda02a92261dab27a: \"1757489524\"\n  cursor-b84f0af7468d11f3417daa6e3e20881f32cc40f576730bea5531d4caedd7ac5b: \"1757478362\"\n  cursor-b91c2e0a43b877e0414ab957a4286a755ecb11a2e095d569a98505f754a5d015: \"1756990825\"\n  cursor-b187ee233b2d3737eadd3528b28ca5449409f6e56aeaab4eafe3349c5b2bd39a: \"1758640390\"\n  cursor-b1add120d928d0bb282a9e467a28c7dad734b22a0c281764c157748388aa8bcf: \"1757505302\"\n  cursor-b802a20b6fb7999513e98eb65efcc6e5d9a1aedf1edd7c9ecd77f53b68fb1af7: \"1757838902\"\n  cursor-ba8a455a244a17ba8cc574e908280b98cc8fdbf1017ced0ad41a4407939e20d4: \"1757834293\"\n  cursor-bacff811244e773ff1195f8ea6624ed77743f71be4b7a26ebd9087e8bdc633f5: \"1757525110\"\n  cursor-bca2f452930539c54f2df61f03c36784f4aa275b9fe53018cc486262cebbfb7c: \"1757503668\"\n  cursor-bd219d27200658081996e84c966ee34f4cac55a20a005955ff06dd5418a78940: \"1758615886\"\n  cursor-bd054357438418ad3cf218df9fb12302c53f7ec4b403b260ebf3b3ca6ab40fd7: \"1757225590\"\n  cursor-be0fdddb1282cf7fffc70719463c3f6dce19fbad26583f3765ed3e10b2c43115: \"1758007696\"\n  cursor-bf45698d951e7d3e006e331d305fdf35a4f9357261e435958edcd58d23a93166: \"1757836949\"\n  cursor-bff5c393ec2d3b19c0ee272be4f6f9d88a6d79e17626eeff76b633dcc929df2e: \"1757524823\"\n  cursor-c7b762c189d3c045f940787dde3f97315e234b4aaeef8c0e5b4f0903dcc2356a: \"1758616385\"\n  cursor-c7eeafba4809abb443586f234c4bbb3dd387422434dbe129cecf791bb03522d4: \"1757839520\"\n  cursor-c8cfed9ac4c66af8cfad5f6b48c6df271bc8370044f37da7f84e7cda4f55e989: \"1757838375\"\n  cursor-c30afba51194aab688487cab546f8800ab05a2e3af22ae6fa70f09f8786ec600: \"1758625116\"\n  cursor-c31e4eb0d46437391f2318ef6d027916e2d1a6cf5b4aeab0e3d862b0fc09ce85: \"1757835044\"\n  cursor-c88ef78637ae945fb14f0bf75115665c80b9e5d70ed5f68803c330e2251a5f17: \"1757836940\"\n  cursor-c94ada77c31000bc57080e8f29657eaf298d1a99a4ee51069f61e116223b6add: \"1758480813\"\n  cursor-c226e3caec44a829f054e2d3c178843ef1328890ae8632c78b8ae30e4053b6bf: \"1756986067\"\n  cursor-c2a74c95746632456e6a09d54e4521ab4946408de8231ff99ca029914b6f7a31: \"1758615871\"\n  cursor-c2ba77d84ffb828d35ccf276395571607c66708f26185149c290d56fc0386a23: \"1757566777\"\n  cursor-c779efadfaee829842fb96a8070ed07e916209c322dabd23b40edfcc89343963: \"1758541566\"\n  cursor-cbda4bf14eafcc9c56167520ad49f69e621c234d27ba06fee98816019fda1747: \"1757494512\"\n  cursor-cc6b7d215b63795b56b5e4b6c9485e07a7dfde11e5187e332d752bc0c399acb2: \"1758625016\"\n  cursor-ce6d35e4e18339feb57bbfa1ef82c41a01b7c088029501a986f096887674a88b: \"1757676261\"\n  cursor-ceeb62cfef58d30d20008a785bdf9498d2765fdb85627ea402c34e4be76e29ea: \"1758266492\"\n  cursor-d4cbd2c1fff1691e10dff5978a3435159fe04e343376758b943610ba506f40bd: \"1757949928\"\n  cursor-d7d29b2cf2a38e95dc690e3fa02eccc313cc8e5f70ce7ea4287643b583de54e7: \"1757489450\"\n  cursor-d9a13ab065cf9b072e7ee93301ff349b6ea66c5a1d1f94d72372d4da58033ef9: \"1757408280\"\n  cursor-d23f2a5df9d82c0999d7c625ab5d190953fac1dadc1f2cffdcc6da1d395c1e49: \"1758274186\"\n  cursor-d152bf794e1a236340e1f92a2803a29f6409a8565baf53040ef8691eebbdd51d: \"1757838425\"\n  cursor-d8242a24a6e8e25a41fad697613d2971e743d801281e9389d22de0f62e349b2d: \"1758648018\"\n  cursor-d54291fbb40161f27aabb923987cc4de4b672cdb632baf9967c200fd855480e4: \"1758267608\"\n  cursor-d893618dae96ee07232c0f882e74dcb93bc92babbc5446fcd68fac7b9e810909: \"1758637209\"\n  cursor-d888415528d067b92eeebcf065478d0beaa09a05bc8ffa22968125f2e6e5b512: \"1757147241\"\n  cursor-dd862e5f4b184ca5452b2da4f4edea6498314020285c55b7cb35ee74b0c0f876: \"1757227455\"\n  cursor-e7cfc2849c44cdcdc214c65d07838c09867089bb5afc20efc87692b58574f14b: \"1757478366\"\n  cursor-e7e83fe97cb9724926c94d5f9f6202007a83134aec3e8bd68a75af9bae7c9b7e: \"1758266491\"\n  cursor-e8854d31884de44b1bfaa4b7b840c8cef4df834a002e408f8893a8ba149fc6d0: \"1757478690\"\n  cursor-e8f618fec95e8c7b0bc3719e21758adb18afa4aa223afecf85c35fe0ff413de0: \"1757504745\"\n  cursor-e8f34717201488f720927b6487c7566ea106cebb85a266fa39fa83e603c31d4a: \"1757835043\"\n  cursor-e484476b3daef1a384d29099ce0a4653eff47d2012bba8a8d4a1f6100bb9549d: \"1757566771\"\n  cursor-ea8a58a40f7556840effe585bf7b0c3dc913993c5923b0833af5583b492e0143: \"1756991935\"\n  cursor-ed0ebb222011fde63cc6f2831550e6cd577b18f675693bdfdde29f2115ad17fb: \"1758625434\"\n  cursor-ed632e38a25e3c584b4f1921b53ace1f613c11389b5ff9cc9ce23361b42c8fc7: \"1757491475\"\n  cursor-efd33836652890697753337d3d4e7b9d55895379578beda4d84c463c014d9d38: \"1757053323\"\n  cursor-f0bba159022854028697760a72f08cda18f7d8c0d7bdc4e90bb3ea1035178781: \"1757227455\"\n  cursor-f2c2cd2b51d3ef92bc04c1edffc0697222ff62e51ce9d15d2485581afb5bd808: \"1758625201\"\n  cursor-f68aef66825d2b9a084fd08c915950fee93e5616dbadd988b0970561f2347f36: \"1757566776\"\n  cursor-f89ebb6718d9e81a765e5ed9d9a68f4637c7fc194e09f57f3de59f1f999f426d: \"1758541452\"\n  cursor-f8b6c73910d92c94faf5d08928493d8adaca228d037ff9ac4a092f9ad6f62509: \"1757504143\"\n  cursor-f37763ad1380afdb12381247b0d5fe3048132a526a6440090dfe0e9313bd1670: \"1758637211\"\n  cursor-f3609393ef2bfb0d6e9d48510c06797d909ac5a48fc2a96dddab58a1dbae00e1: \"1757524795\"\n  cursor-fa74aac1f89e38c01449ecc0457469dc85085fd16b47a8f384dc4a30f4c45e9a: \"1757566670\"\n  cursor-faa2eacf24b8b3c41e54d88a39a47a859c166bc1a0ab10d9c058198e5ecc53ae: \"1757500504\"\n  cursor-faf82edf48a39ae327e4864829b73f7f021372c7afbca1f3563b5c64f7c6b32d: \"1757834290\"\n  cursor-fdec3463c92f4a9f9361a0d2b3d30604174951b0a3b6c4938b8cdf2bfd39b770: \"1758625160\"\n"
  },
  {
    "path": "data/grafana/alerting/1/__default__.tmpl",
    "content": "\n{{ define \"__subject\" }}[{{ .Status | toUpper }}{{ if eq .Status \"firing\" }}:{{ .Alerts.Firing | len }}{{ if gt (.Alerts.Resolved | len) 0 }}, RESOLVED:{{ .Alerts.Resolved | len }}{{ end }}{{ end }}] {{ .GroupLabels.SortedPairs.Values | join \" \" }} {{ if gt (len .CommonLabels) (len .GroupLabels) }}({{ with .CommonLabels.Remove .GroupLabels.Names }}{{ .Values | join \" \" }}{{ end }}){{ end }}{{ end }}\n\n{{ define \"__text_values_list\" }}{{ if len .Values }}{{ $first := true }}{{ range $refID, $value := .Values -}}\n{{ if $first }}{{ $first = false }}{{ else }}, {{ end }}{{ $refID }}={{ $value }}{{ end -}}\n{{ else }}[no value]{{ end }}{{ end }}\n\n{{ define \"__text_alert_list\" }}{{ range . }}\nValue: {{ template \"__text_values_list\" . }}\nLabels:\n{{ range .Labels.SortedPairs }} - {{ .Name }} = {{ .Value }}\n{{ end }}Annotations:\n{{ range .Annotations.SortedPairs }} - {{ .Name }} = {{ .Value }}\n{{ end }}{{ if gt (len .GeneratorURL) 0 }}Source: {{ .GeneratorURL }}\n{{ end }}{{ if gt (len .SilenceURL) 0 }}Silence: {{ .SilenceURL }}\n{{ end }}{{ if gt (len .DashboardURL) 0 }}Dashboard: {{ .DashboardURL }}\n{{ end }}{{ if gt (len .PanelURL) 0 }}Panel: {{ .PanelURL }}\n{{ end }}{{ end }}{{ end }}\n\n{{ define \"default.title\" }}{{ template \"__subject\" . }}{{ end }}\n\n{{ define \"default.message\" }}{{ if gt (len .Alerts.Firing) 0 }}**Firing**\n{{ template \"__text_alert_list\" .Alerts.Firing }}{{ if gt (len .Alerts.Resolved) 0 }}\n\n{{ end }}{{ end }}{{ if gt (len .Alerts.Resolved) 0 }}**Resolved**\n{{ template \"__text_alert_list\" .Alerts.Resolved }}{{ end }}{{ end }}\n\n\n{{ define \"__teams_text_alert_list\" }}{{ range . }}\nValue: {{ template \"__text_values_list\" . }}\nLabels:\n{{ range .Labels.SortedPairs }} - {{ .Name }} = {{ .Value }}\n{{ end }}\nAnnotations:\n{{ range .Annotations.SortedPairs }} - {{ .Name }} = {{ .Value }}\n{{ end }}\n{{ if gt (len .GeneratorURL) 0 }}Source: [{{ .GeneratorURL }}]({{ .GeneratorURL }})\n\n{{ end }}{{ if gt (len .SilenceURL) 0 }}Silence: [{{ .SilenceURL }}]({{ .SilenceURL }})\n\n{{ end }}{{ if gt (len .DashboardURL) 0 }}Dashboard: [{{ .DashboardURL }}]({{ .DashboardURL }})\n\n{{ end }}{{ if gt (len .PanelURL) 0 }}Panel: [{{ .PanelURL }}]({{ .PanelURL }})\n\n{{ end }}\n{{ end }}{{ end }}\n\n\n{{ define \"teams.default.message\" }}{{ if gt (len .Alerts.Firing) 0 }}**Firing**\n{{ template \"__teams_text_alert_list\" .Alerts.Firing }}{{ if gt (len .Alerts.Resolved) 0 }}\n\n{{ end }}{{ end }}{{ if gt (len .Alerts.Resolved) 0 }}**Resolved**\n{{ template \"__teams_text_alert_list\" .Alerts.Resolved }}{{ end }}{{ end }}\n"
  },
  {
    "path": "assistant-service/__init__.py",
    "content": ""
  },
  {
    "path": "upload/.placeholder",
    "content": ""
  },
  {
    "path": "upload/.gitignore",
    "content": "*\n!.placeholder"
  },
  {
    "path": "story-service/__init__.py",
    "content": ""
  },
  {
    "path": "story-service/scheduler.py",
    "content": "from apscheduler.schedulers.asyncio import AsyncIOScheduler\nfrom apscheduler.triggers.date import DateTrigger\nfrom services.story import publish_story\n\nscheduler = AsyncIOScheduler()\n\ndef schedule_story(story_id: int, run_date):\n    scheduler.add_job(\n        func=publish_story,\n        trigger=DateTrigger(run_date=run_date),\n        args=[story_id],\n        id=f\"story_{story_id}\",\n        replace_existing=True,\n    )\n"
  },
  {
    "path": "story-service/main.py",
    "content": "import logging\n\nfrom backend.dependencies.services.bot import get_bot\nfrom backend.dependencies import get_mailing_service\n\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n)\nlogger = logging.getLogger(__name__)\n\nbot = get_bot()\n\n\nasync def main():\n    mailing = get_mailing_service()\n    mailing.schedule_jobs()\n\n    print('Бот и шедулер запущены...')\n    await bot.run_until_disconnected()\n\n    print(\"Бот остановлен\")\n\n\nif __name__ == '__main__':\n    bot.loop.run_until_complete(main())\n"
  },
  {
    "path": "story-service/dependencies/__init__.py",
    "content": ""
  },
  {
    "path": "story-service/dependencies/repositories/user.py",
    "content": "from backend.abstractions.repositories import UserRepositoryInterface\nfrom backend.dependencies.repositories.session_maker import get_session_maker\nfrom infrastructure.repositories.user import UserRepository\n\n\ndef get_user_repository() -> UserRepositoryInterface:\n    return UserRepository(\n        session_maker=get_session_maker()\n    )"
  },
  {
    "path": "story-service/dependencies/repositories/__init__.py",
    "content": ""
  },
  {
    "path": "story-service/dependencies/repositories/session_maker.py",
    "content": "from sqlalchemy.ext.asyncio import async_sessionmaker\n\nfrom infrastructure import session_maker\n\n\ndef get_session_maker() -> async_sessionmaker:\n    return session_maker"
  },
  {
    "path": "story-service/dependencies/repositories/analytics_service.py",
    "content": "from backend.abstractions.repositories import AnalyticsServiceRepositoryInterface\nfrom backend.dependencies.repositories.session_maker import get_session_maker\nfrom infrastructure.repositories.analytics_service import AnalyticsServiceRepository\n\n\ndef get_analytics_service_repository() -> AnalyticsServiceRepositoryInterface:\n    return AnalyticsServiceRepository(\n        session_maker=get_session_maker()\n    )"
  },
  {
    "path": "story-service/dependencies/services/user.py",
    "content": "from backend.abstractions.services.user import UserServiceInterface\nfrom backend.dependencies.repositories.user import get_user_repository\nfrom backend.services.user import UserService\n\n\ndef get_user_service() -> UserServiceInterface:\n    return UserService(\n        user_repository=get_user_repository()\n    )"
  },
  {
    "path": "story-service/dependencies/services/mailing.py",
    "content": "from backend.abstractions.services.mailing import MailingServiceInterface\nfrom backend.dependencies.services.analytics_service import get_analytics_service_service\nfrom backend.dependencies.services.bot import get_bot\nfrom backend.dependencies.services.gpt import get_gpt_service\nfrom backend.dependencies.services.user import get_user_service\nfrom backend.services import MailingService\n\n\ndef get_mailing_service() -> MailingServiceInterface:\n    return MailingService(\n        bot=get_bot(),\n        gpt=get_gpt_service(),\n        user_service=get_user_service(),\n        analytics_service_service=get_analytics_service_service()\n    )\n"
  },
  {
    "path": "story-service/dependencies/services/__init__.py",
    "content": ""
  },
  {
    "path": "story-service/dependencies/services/gpt.py",
    "content": "from backend.abstractions.services.gpt import GPTServiceInterface\nfrom backend.services import GPTService\n\ndef get_gpt_service() -> GPTServiceInterface:\n    return GPTService()"
  },
  {
    "path": "story-service/dependencies/services/analytics_service.py",
    "content": "from backend.abstractions.services.analytics_service import AnalyticsServiceServiceInterface\nfrom backend.dependencies.repositories.analytics_service import get_analytics_service_repository\nfrom backend.services.analytics_service_service import AnalyticsServiceService\n\n\ndef get_analytics_service_service() -> AnalyticsServiceServiceInterface:\n    return AnalyticsServiceService(\n        service_repository=get_analytics_service_repository()\n    )"
  },
  {
    "path": "story-service/abstractions/__init__.py",
    "content": ""
  },
  {
    "path": "story-service/abstractions/repositories/story.py",
    "content": "from abc import ABC\n\nfrom abstractions.repositories import CRUDRepositoryInterface\nfrom domain.dto.story import CreateStoryDTO, UpdateStoryDTO\nfrom domain.models.story import Story\n\n\nclass StoryRepositoryInterface(\n    CRUDRepositoryInterface[Story, CreateStoryDTO, UpdateStoryDTO],\n    ABC,\n):\n    ...\n"
  },
  {
    "path": "story-service/abstractions/repositories/user.py",
    "content": "from abc import ABC\n\nfrom abstractions.repositories import CRUDRepositoryInterface\nfrom domain.dto.user import CreateUserDTO, UpdateUserDTO\nfrom domain.models.user import User\n\n\nclass UserRepositoryInterface(\n    CRUDRepositoryInterface[User, CreateUserDTO, UpdateUserDTO],\n    ABC,\n):\n    async def get_by_telegram_id(self, telegram_id: int) -> User:\n        ...\n"
  },
  {
    "path": "story-service/abstractions/repositories/__init__.py",
    "content": "from .crud import CRUDRepositoryInterface\nfrom .user import UserRepositoryInterface\n"
  },
  {
    "path": "story-service/abstractions/repositories/crud.py",
    "content": "from abc import ABC, abstractmethod\nfrom uuid import UUID\n\n\nclass CRUDRepositoryInterface[Model, CreateDTO, UpdateDTO](ABC):\n    @abstractmethod\n    async def create(self, obj: CreateDTO) -> None:\n        ...\n\n    @abstractmethod\n    async def get(self, obj_id: UUID) -> Model:\n        ...\n\n    @abstractmethod\n    async def update(self, obj_id: UUID, obj: UpdateDTO) -> None:\n        ...\n\n    @abstractmethod\n    async def delete(self, obj_id: UUID) -> None:\n        ...\n\n    @abstractmethod\n    async def get_all(self, limit: int = 100, offset: int = 0) -> list[Model]:\n        ...\n"
  },
  {
    "path": "story-service/abstractions/repositories/analytics_service.py",
    "content": "from abc import ABC\nfrom typing import List\n\nfrom backend.abstractions.repositories import CRUDRepositoryInterface\nfrom domain.dto.analytics_service import CreateServiceDTO, UpdateServiceDTO\nfrom domain.models.analytics_service import Service\n\n\nclass AnalyticsServiceRepositoryInterface(\n    CRUDRepositoryInterface[Service, CreateServiceDTO, UpdateServiceDTO],\n    ABC,\n):\n\n    def entity_to_model(self, entity: Service) -> Service:\n        ...\n\n    def create_dto_to_entity(self, dto: CreateServiceDTO) -> Service:\n        ...\n\n    async def get_available_services(self) -> List[Service]:\n        ...\n\n"
  },
  {
    "path": "story-service/abstractions/services/story.py",
    "content": "from abc import ABC\n\n\n\nclass StoryServiceInterface(ABC):\n    ...\n\n"
  },
  {
    "path": "story-service/abstractions/services/user.py",
    "content": "from abc import ABC\nfrom typing import List\nfrom uuid import UUID\n\nfrom domain.dto.user import CreateUserDTO\nfrom domain.models.user import User\n\n\nclass UserServiceInterface(ABC):\n    async def get_all_users(self) -> List[User]:\n        ...\n\n    async def create_user(self, user: CreateUserDTO) -> None:\n        ...\n\n    async def get_user(self, user_id: UUID) -> User:\n        ...\n\n    async def get_user_by_telegram_id(self, telegram_id: int) -> User:\n        ...\n"
  },
  {
    "path": "story-service/abstractions/services/mailing.py",
    "content": "from abc import ABC\n\nfrom telethon import TelegramClient\n\nfrom backend.abstractions.services.gpt import GPTServiceInterface\nfrom backend.abstractions.services.user import UserServiceInterface\n\n\nclass MailingServiceInterface(ABC):\n    bot: TelegramClient\n    gpt: GPTServiceInterface\n    user_service: UserServiceInterface\n\n    async def send_batch(self, users, message_text: str):\n        ...\n\n    async def job_a(self):\n        ...\n\n    async def job_b(self):\n        ...\n\n    async def job_c(self):\n        ...\n\n    def schedule_jobs(self):\n        ..."
  },
  {
    "path": "story-service/abstractions/services/__init__.py",
    "content": ""
  },
  {
    "path": "story-service/abstractions/services/gpt.py",
    "content": "from abc import ABC\nfrom uuid import UUID\n\n\nclass GPTServiceInterface(ABC):\n    openai_api_key: str\n\n    async def start_gpt_conversation(self, user_id: int):\n        ...\n\n    async def get_gpt_response(self, user_id: UUID, user_input: str):\n        ...\n\n    async def end_conversation(self, user_id: int):\n        ...\n\n    async def ask(self, instructions: str, input: str) -> str:\n        ...\n"
  },
  {
    "path": "story-service/abstractions/services/analytics_service.py",
    "content": "from abc import ABC\nfrom typing import List, Optional\nfrom uuid import UUID\n\nfrom domain.models.analytics_service import Service\n\nclass AnalyticsServiceServiceInterface(ABC):\n\n    async def get_all_services(self) -> List[Service]:\n        ...\n\n    async def get_available_services(self) -> Optional[List[Service]]:\n        ...\n\n    async def update_service_active_status(self, svc_id: UUID, new_status: bool) -> None:\n        ...\n"
  },
  {
    "path": "story-service/infrastructure/__init__.py",
    "content": "\nfrom sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker\n\nfrom user_bot.settings import settings\n\n__all__ = [\n    \"session_maker\",\n]\n\n\nengine = create_async_engine(settings.db.url, echo=False, pool_recycle=1800, pool_timeout=30)\nsession_maker = async_sessionmaker(engine, expire_on_commit=False)\n"
  },
  {
    "path": "story-service/infrastructure/entities.py",
    "content": "from datetime import datetime\nfrom typing import Optional\nfrom uuid import UUID as pyUUID\n\nfrom infrastructure.enums.category import Category\nfrom infrastructure.enums.order_status import OrderStatus\nfrom infrastructure.enums.payout_time import PayoutTime\nfrom infrastructure.enums.product_status import ProductStatus\nfrom infrastructure.enums.push_status import PushStatus\nfrom infrastructure.enums.user_role import UserRole\nfrom sqlalchemy import DateTime, ForeignKey, UUID, BigInteger, Enum, Text, Boolean\nfrom sqlalchemy.orm import declarative_base, Mapped, mapped_column, relationship\n\nfrom infrastructure.enums.story_status import StoryStatus\nfrom infrastructure.enums.user_status import UserStatus\n\nBase = declarative_base()\n\n\nclass AbstractBase(Base):\n    __abstract__ = True\n\n    id: Mapped[pyUUID] = mapped_column(UUID(as_uuid=True), primary_key=True)\n    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.now)\n    updated_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.now, onupdate=datetime.now)\n\n\nclass User(AbstractBase):\n    __tablename__ = \"managers\"\n    telegram_id: Mapped[Optional[int]] = mapped_column(BigInteger, unique=True)\n    nickname: Mapped[Optional[str]]\n    status: Mapped[UserStatus] = mapped_column(default=UserStatus.USER)\n    session_string: Mapped[str] = mapped_column(Text, nullable=False)\n    stories = relationship(\"Story\", back_populates=\"manager\")\n\n\nclass Story(AbstractBase):\n    __tablename__ = \"stories\"\n    manager_id: Mapped[pyUUID] = mapped_column(UUID(as_uuid=True), ForeignKey(\"managers.id\"), nullable=False)\n    file_path: Mapped[str] = mapped_column(Text, nullable=False)\n    scheduled_time: Mapped[datetime] = mapped_column(DateTime, nullable=False)\n    status: Mapped[StoryStatus] = mapped_column(Enum(StoryStatus), default=StoryStatus.pending)\n    manager = relationship(\"Manager\", back_populates=\"stories\")\n\n\nclass Service(AbstractBase):\n    __tablename__ = 'services'\n    name: Mapped[str]\n    is_active: Mapped[bool] = mapped_column(Boolean, default=True)\n"
  },
  {
    "path": "story-service/infrastructure/enums/user_status.py",
    "content": "from enum import Enum\n\n\nclass UserStatus(Enum):\n    USER = \"user\"\n    MANAGER = \"manager\"\n"
  },
  {
    "path": "story-service/infrastructure/enums/story_status.py",
    "content": "from enum import StrEnum\n\nclass StoryStatus(StrEnum):\n    pending = \"pending\"\n    posted = \"posted\""
  },
  {
    "path": "story-service/infrastructure/repositories/story.py",
    "content": "import logging\nfrom dataclasses import dataclass\n\nfrom sqlalchemy import select\n\nfrom abstractions.repositories.story import StoryRepositoryInterface\nfrom domain.dto.story import CreateStoryDTO, UpdateStoryDTO\nfrom domain.models.story import Story as StoryModel\nfrom infrastructure.entities import Story\nfrom infrastructure.repositories.sqlalchemy import AbstractSQLAlchemyRepository\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass StoryRepository(\n    AbstractSQLAlchemyRepository[Story, StoryModel, CreateStoryDTO, UpdateStoryDTO],\n    StoryRepositoryInterface,\n):\n\n    async def get_by_telegram_id(self, telegram_id: int) -> Story:\n        async with self.session_maker() as session:\n            Story = await session.execute(\n                select(self.entity)\n                .where(self.entity.telegram_id == telegram_id)\n                .options(*self.options)\n            )\n            Story = Story.unique().scalars().one_or_none()\n\n        return self.entity_to_model(Story) if Story else None\n\n\n    def create_dto_to_entity(self, dto: CreateStoryDTO) -> Story:\n        return Story(\n            id=dto.id,\n            manager_id=dto.manager_id,\n            file_path=dto.file_path,\n            scheduled_time=dto.scheduled_time,\n            status=dto.status,\n            created_at=dto.created_at,\n            updated_at=dto.updated_at,\n        )\n\n    def entity_to_model(self, entity: Story) -> StoryModel:\n        return StoryModel(\n            id=entity.id,\n            manager_id=entity.manager_id,\n            file_path=entity.file_path,\n            scheduled_time=entity.scheduled_time,\n            status=entity.status,\n            manager=entity.manager,\n            created_at=entity.created_at,\n            updated_at=entity.updated_at,\n        )\n"
  },
  {
    "path": "story-service/infrastructure/repositories/user.py",
    "content": "import logging\nfrom dataclasses import dataclass\n\nfrom sqlalchemy import select\n\nfrom abstractions.repositories import UserRepositoryInterface\nfrom infrastructure.repositories.sqlalchemy import AbstractSQLAlchemyRepository\nfrom domain.dto.user import CreateUserDTO, UpdateUserDTO\nfrom domain.models.user import User as UserModel\n\nfrom infrastructure.entities import User\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass UserRepository(\n    AbstractSQLAlchemyRepository[User, UserModel, CreateUserDTO, UpdateUserDTO],\n    UserRepositoryInterface,\n):\n\n    async def get_by_telegram_id(self, telegram_id: int) -> User:\n        async with self.session_maker() as session:\n            user = await session.execute(\n                select(self.entity)\n                .where(self.entity.telegram_id == telegram_id)\n                .options(*self.options)\n            )\n            user = user.unique().scalars().one_or_none()\n\n        return self.entity_to_model(user) if user else None\n\n\n    def create_dto_to_entity(self, dto: CreateUserDTO) -> User:\n        return User(\n            id=dto.id,\n            nickname=dto.nickname,\n            telegram_id=dto.telegram_id,\n            status=dto.status,\n            created_at=dto.created_at,\n            updated_at=dto.updated_at,\n        )\n\n    def entity_to_model(self, entity: User) -> UserModel:\n        return UserModel(\n            id=entity.id,\n            nickname=entity.nickname,\n            status=entity.status,\n            telegram_id=entity.telegram_id,\n            created_at=entity.created_at,\n            updated_at=entity.updated_at,\n        )\n"
  },
  {
    "path": "story-service/infrastructure/repositories/__init__.py",
    "content": ""
  },
  {
    "path": "story-service/infrastructure/repositories/sqlalchemy.py",
    "content": "import logging\nfrom abc import abstractmethod\nfrom dataclasses import dataclass, field\nfrom typing import Type, Optional\nfrom uuid import UUID\n\nfrom sqlalchemy import select\nfrom sqlalchemy.exc import NoResultFound\nfrom sqlalchemy.ext.asyncio import async_sessionmaker\nfrom sqlalchemy.orm import joinedload, InstrumentedAttribute\n\nfrom backend.abstractions.repositories import CRUDRepositoryInterface\nfrom .exceptions import NotFoundException\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass AbstractSQLAlchemyRepository[Entity, Model, CreateDTO, UpdateDTO](\n    CRUDRepositoryInterface[Model, CreateDTO, UpdateDTO]\n):\n    session_maker: async_sessionmaker\n\n    joined_fields: dict[str, Optional[list[str]]] = field(default_factory=dict)\n    options: list = field(default_factory=list)\n\n    def __post_init__(self):\n        self.entity: Type[Entity] = self.__orig_bases__[0].__args__[0]  # noqa\n        self._set_lazy_fields()\n\n    def _set_lazy_fields(self):\n        if not self.joined_fields:\n            return\n\n        def convert_to_nested_dict(fields):\n            return {field: {} for field in (fields or [])}\n\n        def get_associated_entity_class(attr_field):\n            \"\"\"\n            Extract the associated entity class from an InstrumentedAttribute.\n            \"\"\"\n            if hasattr(attr_field, \"comparator\") and hasattr(attr_field.comparator, \"prop\"):\n                relationship_prop = attr_field.comparator.prop\n                if hasattr(relationship_prop, \"mapper\"):\n                    return relationship_prop.mapper.entity\n            return None\n\n        def build_joinedload(attr_field, subfields, depth=0):\n            \"\"\"\n            Recursively build joinedload options for nested relationships.\n            \"\"\"\n            associated_entity = get_associated_entity_class(attr_field)\n            if not associated_entity:\n                raise ValueError(f\"Cannot determine associated entity class for attribute {attr_field}\")\n\n            loader = joinedload(attr_field)\n            for subfield, nested_subfields in subfields.items():\n                nested_attr_field = getattr(associated_entity, subfield, None)\n                if nested_attr_field is None:\n                    raise ValueError(f\"{subfield} is not a valid attribute of {associated_entity}\")\n\n                subloader = build_joinedload(nested_attr_field, nested_subfields, depth + 1)\n                loader = loader.options(subloader)\n            return loader\n\n        # Convert self.joined_fields to nested dictionaries if not already\n        joined_fields = {}\n        for field in self.joined_fields:\n            joined_fields[field] = convert_to_nested_dict(self.joined_fields[field])\n\n        options_to_add = []\n        for attr, subfields in joined_fields.items():\n            attr_field: InstrumentedAttribute = getattr(self.entity, attr)\n            if attr_field.comparator.prop.uselist:\n                loader = build_joinedload(attr_field, subfields or {})\n                options_to_add.append(loader)\n            else:\n                options_to_add.append(joinedload(attr_field))\n\n        self.options.extend(options_to_add)\n\n    async def create(self, obj: CreateDTO) -> None:\n        async with self.session_maker() as session:\n            async with session.begin():\n                session.add(self.create_dto_to_entity(obj))\n\n    async def get(self, obj_id: UUID) -> Model:\n        async with self.session_maker() as session:\n            try:\n                if self.options:\n                    res = await session.execute(\n                        select(self.entity)\n                        .where(self.entity.id == obj_id)\n                        .options(*self.options)\n                    )\n                    obj = res.unique().scalars().one()\n                else:\n                    obj = await session.get(self.entity, obj_id)\n                return self.entity_to_model(obj)\n            except NoResultFound:\n                raise NotFoundException\n\n    async def update(self, obj_id: UUID, obj: UpdateDTO) -> None:\n        async with self.session_maker() as session:\n            async with session.begin():\n                entity = await session.get(self.entity, obj_id)\n                for key, value in obj.model_dump(exclude_unset=True).items():\n                    setattr(entity, key, value)\n\n    async def delete(self, obj_id: UUID) -> None:\n        async with self.session_maker() as session:\n            async with session.begin():\n                obj = await session.get(self.entity, obj_id)\n                await session.delete(obj)\n\n    async def get_all(self, limit: int = 100, offset: int = 0, joined: bool = True) -> list[Model]:\n        async with self.session_maker() as session:\n            if joined:\n                if self.options:\n                    return [\n                        self.entity_to_model(entity)\n                        for entity in (await session.execute(\n                            select(self.entity)\n                            .limit(limit)\n                            .offset(offset)\n                            .options(*self.options)\n                        )).unique().scalars().all()\n                    ]\n            res = (await session.execute(\n                select(self.entity)\n                .limit(limit)\n                .offset(offset)\n            )).scalars().all()\n            return [\n                self.entity_to_model(entity)\n                for entity in res\n            ]\n\n    @abstractmethod\n    def entity_to_model(self, entity: Entity) -> Model:\n        ...\n\n    @abstractmethod\n    def create_dto_to_entity(self, dto: CreateDTO) -> Entity:\n        ...\n"
  },
  {
    "path": "story-service/infrastructure/repositories/exceptions.py",
    "content": "class NotFoundException(Exception):\n    ...\n"
  },
  {
    "path": "story-service/infrastructure/repositories/analytics_service.py",
    "content": "import logging\nfrom dataclasses import dataclass\nfrom typing import List\n\nfrom sqlalchemy import select\n\nfrom backend.abstractions.repositories import AnalyticsServiceRepositoryInterface\nfrom infrastructure.repositories.sqlalchemy import AbstractSQLAlchemyRepository\nfrom domain.dto.analytics_service import CreateServiceDTO, UpdateServiceDTO\nfrom domain.models.analytics_service import Service as ServiceModel\nfrom infrastructure.entities import Service\n\nlogger = logging.getLogger(__name__)\n\n\n@dataclass\nclass AnalyticsServiceRepository(\n    AbstractSQLAlchemyRepository[Service, ServiceModel, CreateServiceDTO, UpdateServiceDTO],\n    AnalyticsServiceRepositoryInterface,\n):\n\n    async def get_available_services(self) -> List[ServiceModel]:\n        async with self.session_maker() as session:\n            services = await session.execute(select(self.entity).where(self.entity.is_active))\n\n        services = services.scalars().all()\n        return [self.entity_to_model(service) for service in services]\n\n    def create_dto_to_entity(self, dto: CreateServiceDTO) -> Service:\n        return Service(\n            id=dto.id,\n            name=dto.name,\n            is_active=dto.is_active,\n            created_at=dto.created_at,\n            updated_at=dto.updated_at,\n        )\n\n    def entity_to_model(self, entity: Service) -> ServiceModel:\n        return ServiceModel(\n            id=entity.id,\n            name=entity.name,\n            is_active=entity.is_active,\n            created_at=entity.created_at,\n            updated_at=entity.updated_at,\n        )\n"
  },
  {
    "path": "story-service/domain/__init__.py",
    "content": ""
  },
  {
    "path": "story-service/domain/dto/service.py",
    "content": "from typing import Optional\n\nfrom domain.dto.base import UpdateDTO, CreateDTO\n\n\nclass CreateServiceDTO(CreateDTO):\n    name: str\n    is_active: bool\n\nclass UpdateServiceDTO(UpdateDTO):\n    name: Optional[str]\n    is_active: Optional[bool]\n"
  },
  {
    "path": "story-service/domain/dto/story.py",
    "content": "from datetime import datetime\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom infrastructure.enums.story_status import StoryStatus\nfrom domain.dto.base import CreateDTO, UpdateDTO\nfrom domain.models.user import User\n\n\nclass CreateStoryDTO(CreateDTO):\n    manager_id: UUID\n    file_path: str\n    scheduled_time: datetime\n    status: StoryStatus\n\nclass UpdateStoryDTO(UpdateDTO):\n    manager_id: Optional[UUID]\n    file_path: Optional[str]\n    scheduled_time: Optional[datetime]\n    status: Optional[StoryStatus]\n"
  },
  {
    "path": "story-service/domain/dto/user.py",
    "content": "from typing import Optional\n\nfrom infrastructure.entities import Story\nfrom infrastructure.enums.user_status import UserStatus\nfrom domain.dto.base import CreateDTO, UpdateDTO\n\n\nclass CreateUserDTO(CreateDTO):\n    telegram_id: int\n    nickname: Optional[str]\n    status: UserStatus\n    session_string: str\n    stories: list[Story]\n\n\nclass UpdateUserDTO(UpdateDTO):\n    telegram_id: Optional[int]\n    nickname: Optional[str]\n    status: Optional[UserStatus]\n    session_string: Optional[str]\n    stories: list[Story]\n"
  },
  {
    "path": "story-service/domain/dto/__init__.py",
    "content": ""
  },
  {
    "path": "story-service/domain/dto/base.py",
    "content": "from datetime import datetime\nfrom typing import Optional\nfrom uuid import UUID, uuid4\n\nfrom pydantic import BaseModel, Field\n\n\nclass CreateDTO(BaseModel):\n    id: UUID = Field(default_factory=uuid4)\n    created_at: datetime = Field(default_factory=datetime.now)\n    updated_at: datetime = Field(default_factory=datetime.now)\n\nclass UpdateDTO(BaseModel):\n    updated_at: Optional[datetime] = Field(default_factory=datetime.now)"
  },
  {
    "path": "story-service/domain/dto/analytics_service.py",
    "content": "from typing import Optional\n\nfrom domain.dto.base import CreateDTO, UpdateDTO\n\n\nclass CreateServiceDTO(CreateDTO):\n    name: str\n    is_active: bool\n\nclass UpdateServiceDTO(UpdateDTO):\n    name: Optional[str] = None\n    is_active: Optional[bool] = None"
  },
  {
    "path": "story-service/domain/models/abstract.py",
    "content": "from datetime import datetime\nfrom uuid import UUID\n\nfrom pydantic import BaseModel\n\n\nclass Model(BaseModel):\n    id: UUID\n    created_at: datetime\n    updated_at: datetime\n"
  },
  {
    "path": "story-service/domain/models/story.py",
    "content": "from datetime import datetime\nfrom uuid import UUID\n\nfrom domain.models.abstract import Model\nfrom domain.models.user import User\nfrom infrastructure.enums.story_status import StoryStatus\n\n\nclass Story(Model):\n    manager_id: UUID\n    file_path: str\n    scheduled_time: datetime\n    status: StoryStatus\n    manager: User\n\n    model_config = ConfigDict(from_attributes=True)\n"
  },
  {
    "path": "story-service/domain/models/user.py",
    "content": "from pydantic import ConfigDict\n\nfrom .abstract import Model\nfrom ...infrastructure.enums.user_status import UserStatus\n\n\nclass User(Model):\n    telegram_id: int\n    nickname: str\n    status: UserStatus\n\n    model_config = ConfigDict(from_attributes=True)\n"
  },
  {
    "path": "story-service/domain/models/__init__.py",
    "content": ""
  },
  {
    "path": "story-service/domain/models/analytics_service.py",
    "content": "from pydantic import ConfigDict\n\nfrom .abstract import Model\n\n\nclass Service(Model):\n    name: str\n    is_active: bool\n\n    model_config = ConfigDict(from_attributes=True)\n"
  },
  {
    "path": "story-service/routes/user.py",
    "content": "# File: story-service/app/routes/admin.py\nfrom fastapi import APIRouter, HTTPException\n\nfrom dependencies.services.user import get_user_service\nfrom domain.dto.user import CreateUserDTO\n\nrouter = APIRouter(\n    prefix=\"/user\",\n    tags=[\"user\"],\n)\n\n@router.post(\"/\")\nasync def create_manager(user: CreateUserDTO):\n    user_service = get_user_service()\n    return user_service.create_user(user)\n"
  },
  {
    "path": "story-service/routes/posts.py",
    "content": ""
  },
  {
    "path": "story-service/routes/stories.py",
    "content": "# File: story-service/app/routes/story.py\nfrom uuid import UUID\n\nfrom fastapi import APIRouter, UploadFile, File, Form, HTTPException\nfrom datetime import datetime\nimport os\n\nfrom dependencies.services.user import get_user_service\nfrom domain.dto.story import CreateStoryDTO\nfrom infrastructure.entities import Story\nfrom ..scheduler import schedule_story\nfrom ..settings import settings\n\nrouter = APIRouter()\n\n@router.post(\"/\")\nasync def create_story(\n    manager_id: UUID = Form(...),\n    scheduled_time: datetime = Form(...),\n    file: UploadFile = File(...),\n):\n    # Проверка менеджера\n    user_service = get_user_service()\n    mgr = user_service.get_manager(manager_id)\n    if not mgr:\n        raise HTTPException(status_code=404, detail=\"Manager not found\")\n\n    # Сохраняем файл\n    os.makedirs(settings.media_dir, exist_ok=True)\n    file_path = os.path.join(\n        settings.media_dir,\n        f\"{int(datetime.utcnow().timestamp())}_{file.filename}\"\n    )\n    content = await file.read()\n    with open(file_path, \"wb\") as f:\n        f.write(content)\n\n    # Создаём запись\n    story = CreateStoryDTO(manager_id=manager_id, file_path=file_path, scheduled_time=scheduled_time)\n    story_service = get_story_service()\n\n    # Планируем публикацию\n    schedule_story(story.id, run_date=scheduled_time)\n    return story\n"
  },
  {
    "path": "story-service/routes/__init__.py",
    "content": ""
  },
  {
    "path": "story-service/routes/admin.py",
    "content": ""
  },
  {
    "path": "story-service/services/story.py",
    "content": "# File: story-service/app/services/story.py\nimport logging\nfrom dataclasses import dataclass\nfrom uuid import UUID\n\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom telethon import TelegramClient\nfrom telethon.sessions import StringSession\n\nfrom abstractions.repositories import UserRepositoryInterface\nfrom abstractions.repositories.story import StoryRepositoryInterface\nfrom abstractions.services.story import StoryServiceInterface\nfrom domain.dto.story import CreateStoryDTO\nfrom infrastructure.enums.story_status import StoryStatus\nfrom infrastructure.repositories.story import StoryRepository\nfrom user_bot.settings import settings\n\nlogger = logging.getLogger(__name__)\n\n@dataclass\nclass StoryService(StoryServiceInterface):\n    story_repository: StoryRepositoryInterface\n    user_repository: UserRepositoryInterface\n\n\n    async def create_story(self, story: CreateStoryDTO):\n        await self.story_repository.create(story)\n\n\n    async def publish_story(self, story_id: UUID):\n        story = await self.story_repository.get(story_id)\n        if not story or story.status != StoryStatus.pending:\n            return\n        manager = await self.user_repository.get(story.manager_id)\n\n        client = TelegramClient(\n            StringSession(manager.session_string),\n            api_id=settings.telegram_api_id,\n            api_hash=settings.telegram_api_hash,\n        )\n        await client.start()\n        try:\n            await client.send_file(\"me\", story.file_path, story=True)\n            story.status = StoryStatus.posted\n            await session.commit()\n            logger.info(f\"Posted story {story_id} for manager {manager.id}\")\n        except Exception as e:\n            logger.error(f\"Failed to post story {story_id}: {e}\")\n        finally:\n            await client.disconnect()\n"
  },
  {
    "path": "story-service/services/user.py",
    "content": "from dataclasses import dataclass\nfrom typing import List\nfrom uuid import UUID\n\nfrom backend.abstractions.repositories import UserRepositoryInterface\nfrom backend.abstractions.services.user import UserServiceInterface\nfrom domain.dto.user import CreateUserDTO\nfrom domain.models.user import User\n\n\n@dataclass\nclass UserService(UserServiceInterface):\n    user_repository: UserRepositoryInterface\n\n    async def get_all_users(self) -> List[User]:\n        return await self.user_repository.get_all()\n\n    async def get_user(self, user_id: UUID) -> User:\n        return await self.user_repository.get(user_id)\n\n    async def create_user(self, user: CreateUserDTO) -> None:\n        return await self.user_repository.create(user)\n\n    async def get_user_by_telegram_id(self, telegram_id: int) -> User:\n        return await self.user_repository.get_by_telegram_id(telegram_id)"
  },
  {
    "path": "story-service/services/__init__.py",
    "content": ""
  },
  {
    "path": "story-service/services/gpt_service.py",
    "content": "import logging\nfrom dataclasses import dataclass\nfrom uuid import UUID\n\nfrom openai import OpenAI\nfrom backend.abstractions.services.gpt import GPTServiceInterface\nfrom user_bot.settings import settings\n\n\nlogger = logging.getLogger(__name__)\n\n@dataclass\nclass GPTService(GPTServiceInterface):\n    client: OpenAI = OpenAI(\n        api_key=settings.assistant.openai_api_key,\n    )\n\n    # храним историю диалога для каждого user_id\n    user_conversations: dict[UUID, list[dict]] = None\n\n    def __post_init__(self):\n        # инициализируем словарь, чтобы избежать разделяемого mutable по умолчанию\n        if self.user_conversations is None:\n            self.user_conversations = {}\n\n    async def start_gpt_conversation(self, user_id: UUID):\n        self.user_conversations[user_id] = []\n\n    async def get_gpt_response(self, user_id: UUID, user_input: str) -> str:\n        # получаем или создаём историю\n        history = self.user_conversations.setdefault(user_id, [])\n\n        # добавляем новое сообщение от пользователя\n        history.append({\"role\": \"user\", \"content\": user_input})\n\n        logger.info(f\"Отправляем в ассистент ({settings.assistant.assistant_id}): {history}\")\n\n        # assistant = self.client.beta.assistants.retrieve(settings.assistant.assistant_id)\n\n        thread = self.client.beta.threads.create()\n\n        logger.info(f\"сообщения из контекста: {history}\")\n        for msg in history:\n            self.client.beta.threads.messages.create(\n                thread_id=thread.id,\n                role=msg['role'],\n                content=msg[\"content\"],\n            )\n\n        run = self.client.beta.threads.runs.create_and_poll(\n            thread_id=thread.id,\n            assistant_id=settings.assistant.assistant_id,\n        )\n\n        if run.status == 'completed':\n            msgs_page = self.client.beta.threads.messages.list(\n                thread_id=thread.id\n            )\n            last_message = msgs_page.data[0]\n            reply = last_message.content[0].text.value\n            logger.info(f\"Ответ ассистента: {reply}\")\n        else:\n            logger.error(run.status)\n            return\n\n        # сохраняем в историю\n        history.append({\"role\": \"assistant\", \"content\": reply})\n        self.user_conversations[user_id] = history\n\n        return reply\n\n    async def end_conversation(self, user_id: UUID) -> bool:\n        return self.user_conversations.pop(user_id, None) is not None\n\n\n    #\n    # async def ask(self, instructions: str, input: str) -> str:\n    #     # Формируем список именно из параметров нужных типов\n    #     messages = [\n    #         ChatCompletionSystemMessageParam(content=instructions),\n    #         ChatCompletionUserMessageParam(content=input),\n    #     ]\n    #     logger.info(f\"Одноразовый запрос ассистенту {settings.assistant.assistant_id}: {messages}\")\n    #\n    #     response = self.client.chat.completions.create(\n    #         model=settings.assistant.assistant_id,\n    #         messages=messages\n    #     )\n    #\n    #     reply = response.choices[0].message.content\n    #     logger.info(f\"Ответ ассистента: {reply}\")\n    #     return reply\n"
  },
  {
    "path": "story-service/services/mailing_service.py",
    "content": "import asyncio\nimport logging\nfrom dataclasses import dataclass\nfrom datetime import timezone\n\nfrom apscheduler.schedulers.asyncio import AsyncIOScheduler\nfrom backend.abstractions.services.analytics_service import AnalyticsServiceServiceInterface\nfrom backend.abstractions.services.gpt import GPTServiceInterface\nfrom backend.abstractions.services.mailing import MailingServiceInterface\nfrom backend.abstractions.services.user import UserServiceInterface\nfrom telethon import TelegramClient\n\nfrom user_bot.settings import settings\n\nlogger = logging.getLogger(__name__)\n# Инициализация планировщика\nscheduler = AsyncIOScheduler(timezone=timezone.utc)\n\n\n@dataclass\nclass MailingService(MailingServiceInterface):\n    bot: TelegramClient\n    gpt: GPTServiceInterface\n    user_service: UserServiceInterface\n    analytics_service_service: AnalyticsServiceServiceInterface\n\n    async def send_batch(self, users, message_text: str):\n        for user in users:\n            logger.info(f\"Sending message to {user.id}\")\n            if user.nickname != 'firs_iln':\n                return\n            try:\n                logger.info(f\"Sending message to {user.telegram_id}\")\n                await self.bot.send_message(user.telegram_id, message_text)\n                logger.info(f\"Message sent to {user.telegram_id}\")\n            except Exception:\n                logger.error(f\"Error sending to {user.telegram_id}\", exc_info=True)\n            await asyncio.sleep(1)\n\n    async def job_a(self):\n        logger.info(\"зашли в джобу A\")\n        services = await self.analytics_service_service.get_available_services()\n        services_names = [svc.name for svc in services]\n\n        instructions = \"ты ахуенный продажник. у тебя огромный опыт в продажах и общении с клиентами\"\n        prompt = (f\"постарайся продать сервисы {services_names} следуя загруженным инструкциям. напиши сообщение \"\n                  f\"клиенту с предложениями. клиент тебе еще не писал. ты первый пишешь с предложениями\")\n\n        users = await self.user_service.get_all_users()\n        logger.info(f\"Пользователи для рассылки A: {[u.id for u in users]}\")\n\n        # Генерим и отправляем каждому своё сообщение\n        for user in users:\n            # создаём или продолжаем диалог для данного user.id\n            message = await self.gpt.get_gpt_response(\n                user_id=user.id,\n                user_input=prompt\n            )\n            await self.send_batch([user], message)\n\n    # async def job_b(self):\n    #     logger.info(\"зашли в джобу B\")\n    #     instructions = \"ты исследователь белок\"\n    #     prompt = \"Сколько живут белки?\"\n    #\n    #     users = await self.user_service.get_all_users()\n    #     logger.info(f\"Пользователи для рассылки B: {[u.id for u in users]}\")\n    #\n    #     for user in users:\n    #         message = await self.gpt.get_gpt_response(\n    #             user_id=user.id,\n    #             user_input=prompt\n    #         )\n    #         await self.send_batch([user], message)\n\n    # async def job_c(self):\n    #     logger.info(\"зашли в джобу C\")\n    #     instructions = \"ты исследователь китов\"\n    #     prompt = \"Сколько живут киты?\"\n    #\n    #     users = await self.user_service.get_all_users()\n    #     logger.info(f\"Пользователи для рассылки C: {[u.id for u in users]}\")\n    #\n    #     for user in users:\n    #         message = await self.gpt.get_gpt_response(\n    #             user_id=user.id,\n    #             user_input=prompt\n    #         )\n    #         await self.send_batch([user], message)\n\n    def schedule_jobs(self):\n        scheduler.add_job(self.job_a,\n                          'cron',\n                          day_of_week=settings.mailing.a_days,\n                          hour=settings.mailing.a_hour,\n                          minute=settings.mailing.a_minute,\n                          )\n        logger.info(\"джоба 1 добавлена\")\n        # scheduler.add_job(self.job_b, 'cron',\n        #                   day_of_week=settings.mailing.b_days, hour=settings.mailing.b_hour,\n        #                   minute=settings.mailing.b_minute)\n        # logger.info(\"джоба 2 добавлена\")\n        # scheduler.add_job(self.job_c, 'cron',\n        #                   day_of_week=settings.mailing.c_days, hour=settings.mailing.c_hour,\n        #                   minute=settings.mailing.c_minute)\n        logger.info(\"джоба 3 добавлена\")\n\n        scheduler.start()\n        for job in scheduler.get_jobs():\n            logger.info(f\"Job {job.id} next run at {job.next_run_time}\")\n"
  },
  {
    "path": "story-service/services/analytics_service_service.py",
    "content": "from dataclasses import dataclass\nfrom typing import List, Optional\nfrom uuid import UUID\n\nfrom backend.abstractions.repositories import AnalyticsServiceRepositoryInterface\nfrom backend.abstractions.services.analytics_service import AnalyticsServiceServiceInterface\nfrom domain.dto.analytics_service import UpdateServiceDTO\nfrom domain.models.analytics_service import Service\n\n@dataclass\nclass AnalyticsServiceService(AnalyticsServiceServiceInterface):\n    service_repository: AnalyticsServiceRepositoryInterface\n    \n    async def get_all_services(self) -> List[Service]:\n        return await self.service_repository.get_all()\n\n    async def get_available_services(self) -> Optional[List[Service]]:\n        return await self.service_repository.get_available_services()\n\n    async def update_service_active_status(self, svc_id: UUID, new_status: bool) -> None:\n        update_model = UpdateServiceDTO(\n            is_active=new_status,\n        )\n        return await self.service_repository.update(svc_id, update_model)\n"
  }
]
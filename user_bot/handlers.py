import logging
from datetime import datetime, timezone

from telethon import TelegramClient
from telethon import events
from telethon.tl.functions.stories import SendStoryRequest
from telethon.tl.types import InputPrivacyValueAllowAll
from telethon.tl.types import User as TelegramUser

from backend.dependencies.services.gpt import get_gpt_service
from backend.dependencies.services.user import get_user_service
from domain.dto.user import CreateUserDTO
from infrastructure.enums.user_status import UserStatus
from user_bot.settings import settings

bot = TelegramClient(
    session='ai_assistant_bot',
    api_id=settings.account.api_id,
    api_hash=settings.account.api_hash,
)

bot.start(
    phone=settings.account.phone,
)

story_states = {}
story_schedule_states = {}

logger = logging.getLogger(__name__)



async def get_sender(event: events.NewMessage.Event) -> TelegramUser:
    return await bot.get_entity(event.chat_id)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏
@bot.on(events.NewMessage(pattern='/post_story'))
async def cmd_post_story(event: events.NewMessage.Event):
    sender = await get_sender(event)
    if sender.username != 'firs_iln':
        return

    user_service = get_user_service()
    user = await user_service.get_user_by_telegram_id(sender.id)
    if not user:
        await user_service.create_user(CreateUserDTO(
            telegram_id=sender.id,
            nickname=sender.username,
        ))

        user = await user_service.get_user_by_telegram_id(sender.id)

    if user.status != UserStatus.MANAGER:
        return await event.respond('üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.')

    story_states[event.sender_id] = {}
    await event.respond('üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏:')


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏
@bot.on(events.NewMessage(pattern='/schedule_story'))
async def cmd_schedule_story(event: events.NewMessage.Event):
    sender = await get_sender(event)
    if sender.username != 'firs_iln':
        return

    user_service = get_user_service()
    user = await user_service.get_user_by_telegram_id(event.chat_id)
    if user.status != UserStatus.MANAGER:
        return await event.respond('üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.')

    story_schedule_states[event.sender_id] = {}
    await event.respond('üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏:')


# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@bot.on(events.NewMessage())
async def handle_messages(event):
    sender = await get_sender(event)
    if sender.username != 'firs_iln':
        return

    user_id = event.sender_id
    # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
    if user_id in story_states:
        state = story_states[user_id]
        if 'text' not in state:
            state['text'] = event.raw_text
            return await event.respond('üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ /skip:')
        if event.raw_text.strip() == '/skip':
            # await user_bot.send_message('@ampstats', state['text'])
            await event.respond('‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.')
            del story_states[user_id]
            return
        if event.photo or event.document:
            media = event.photo or event.document
            if media:
                # uploaded = await user_bot.upload_file(state['file'])
                # file_id = uploaded

                await bot(SendStoryRequest(
                    peer='daria0028',
                    media=media,
                    privacy_rules=[InputPrivacyValueAllowAll()],
                ))
            # await user_bot.send_file('@ampstats', media, caption=state['text'])
            await event.respond('‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.')
            del story_states[user_id]
            return
        return
    # –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
    if user_id in story_schedule_states:
        state = story_schedule_states[user_id]
        if 'text' not in state:
            state['text'] = event.raw_text
            return await event.respond('üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ /skip:')
        if 'file' not in state:
            if event.raw_text.strip() == '/skip':
                state['file'] = None
            elif event.photo or event.document:
                state['file'] = event.photo or event.document
            else:
                return await event.respond('‚ùó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ /skip.')
            return await event.respond('‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (YYYY-MM-DD HH:MM, UTC):')
        # –®–∞–≥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        try:
            dt = datetime.strptime(event.raw_text.strip(), '%Y-%m-%d %H:%M')
            dt = dt.replace(tzinfo=timezone.utc)
        except ValueError:
            return await event.respond('‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ (YYYY-MM-DD HH:MM):')

        # story_service = get_story_service()
        # file_id = None
        if state['file']:
            uploaded = await bot.upload_file(state['file'])
            # file_id = uploaded

            await bot(SendStoryRequest(
                peer='daria0028',
                media=uploaded,
                privacy_rules=[InputPrivacyValueAllowAll()],
            ))
        # await story_service.schedule_story(text=state['text'], file_id=file_id, publish_at=dt)
        await event.respond(f'‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {dt.isoformat()}')
        del story_schedule_states[user_id]
        return
    return
    # # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    # user_service = get_user_service()
    # await user_service.create_user(event.sender_id)



@bot.on(events.NewMessage(incoming=True))
async def handle_client_reply(event: events.NewMessage.Event):
    if not event.is_private:
        return
    gpt_service = get_gpt_service()
    user_service = get_user_service()

    sender_id = event.sender_id
    text = event.raw_text

    # 1) –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ª–æ–≥–∏–∫–∞ –≤—ã—à–µ)
    if text.startswith('/') and sender_id in (story_states or {}) | (story_schedule_states or {}):
        return

    # 2) –ï—Å–ª–∏ —É –Ω–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ —ç—Ç–æ–º—É user_id ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
    await gpt_service.start_gpt_conversation(sender_id)

    # 3) –ü–æ—Å—ã–ª–∞–µ–º —Ç–µ–∫—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤ GPT, –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
    reply = await gpt_service.get_gpt_response(
        user_id=sender_id,
        user_input=text,
    )

    # 4) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –∫–ª–∏–µ–Ω—Ç—É
    await event.respond(reply)


# # Inline-–∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
# def build_service_buttons(services):
#     buttons = []
#     for svc in services:
#         label = f"‚úÖ {svc.name}" if svc.is_active else f"‚ùå {svc.name}"
#         buttons.append(Button.inline(label, data=f"toggle:{svc.name}"))
#     return [buttons[i:i + 2] for i in range(0, len(buttons), 2)]
#
#
# # –ö–æ–º–∞–Ω–¥–∞: –ø–æ–∫–∞–∑–∞—Ç—å –∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
# @user_bot.on(events.NewMessage(pattern='/services_status'))
# async def cmd_services_status(event):
#     user_service = get_user_service()
#     user = await user_service.get_user_by_telegram_id(event.sender.id)
#     if user.status != UserStatus.MANAGER:
#         return await event.respond('üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.')
#
#     analytics_service = get_analytics_service_service()
#     services = await analytics_service.get_all_services()
#     text = 'üõ† –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:'
#     await event.respond(text, buttons=build_service_buttons(services))
#
#
# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞
# @user_bot.on(events.CallbackQuery)
# async def callback_toggle(event):
#     data = event.data.decode()
#     user_service = get_user_service()
#     user = await user_service.get_user_by_telegram_id(event.sender.id)
#
#     if not data.startswith('toggle:') or user.status != UserStatus.MANAGER:
#         return
#
#     _, name = data.split(':', 1)
#     analytics_service = get_analytics_service_service()
#     services = await analytics_service.get_all_services()
#     svc = next((s for s in services if s.name == name), None)
#     if not svc:
#         return await event.answer('–°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω', alert=True)
#
#     new_status = not svc.is_active
#     success = await analytics_service.update_service_active_status(svc.id, new_status)
#     if success:
#         updated = await analytics_service.get_all_services()
#         await event.edit(buttons=build_service_buttons(updated))
#         await event.answer(f"–°—Ç–∞—Ç—É—Å {name} " + ("–≤–∫–ª—é—á—ë–Ω" if new_status else "–æ—Ç–∫–ª—é—á—ë–Ω"))
#     else:
#         await event.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.', alert=True)

#
# @user_bot.on(events.NewMessage())
# async def auto_register(event: events.NewMessage.Event):
#     # \"\"\"
#     # –ü—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ë–î,
#     # –∑–∞–ø–æ–ª–Ω—è—è telegram_id, nickname, –∞ —Å—Ç–∞—Ç—É—Å –æ—Å—Ç–∞—ë—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º.
#     # \"\"\"
#     user_service = get_user_service()
#
#     # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
#     sender = await event.get_sender()
#     nickname = sender.username or ((sender.first_name or '') +
#                                    (' ' + (sender.last_name or '') if sender.last_name else '')).strip()
#
#     user = await user_service.get_user_by_telegram_id(event.sender.id)
#
#     if user:
#         return
#     else:
#         dto = CreateUserDTO(
#             telegram_id=event.sender_id,
#             nickname=nickname,
#         )
#
#     await user_service.create_user(dto)

import React, {useEffect, useRef, useState} from 'react'
import type {Emoji, MessageEntityDTO} from '../services/api'
import {EmojiPicker} from './EmojiPicker'

export interface RichEditorProps {
    /** –°–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –∏–∑ –ë–î */
    emojis: Emoji[]
    /** –ù–∞—á–∞–ª—å–Ω–æ–µ HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ */
    initialContent?: string
    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏:
     * - html: —Ç–µ–∫—É—â–µ–µ innerHTML
     * - text: textContent –±–µ–∑ HTML
     * - entities: –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –≤–∏–¥–∞ { type:'custom_emoji', offset, length:2, custom_emoji_id }
     */
    onChange: (payload: {
        html: string
        text: string
        entities: MessageEntityDTO[]
    }) => void
}

/**
 * –ü—Ä–æ—Å—Ç–æ–π WYSIWYG-—Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–∞ contentEditable,
 * —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∏–∫–µ—Ä–∞ –ø–ª–∞—Ç–Ω—ã—Ö —ç–º–æ–¥–∑–∏.
 *
 * - –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ React –≤—Å–µ–≥–¥–∞ –±–µ—Ä—É—Ç—Å—è –∏–∑ emoji.custom_emoji_id
 * - –ù–∏–∫–∞–∫–∏—Ö random-–∫–ª—é—á–µ–π –∏ uuid-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ render‚Äô–∞
 */
export const RichEditor: React.FC<RichEditorProps> = ({
                                                          emojis,
                                                          initialContent = '',
                                                          onChange,
                                                      }) => {
    const editorRef = useRef<HTMLDivElement>(null);
    const [pickerOpen, setPickerOpen] = useState(false);

    useEffect(() => {
        if (editorRef.current) {
            editorRef.current.innerHTML = initialContent;
        }
    }, []);

    // –ü—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –∫–∞–∂–¥–æ–º –≤–≤–æ–¥–µ —Å–æ–±–∏—Ä–∞–µ–º html/text/entities –∏ –∑–æ–≤—ë–º onChange
    useEffect(() => {
        const el = editorRef.current;
        if (!el) return;

        const handleInput = () => {
            const html = el.innerHTML;
            const text = el.textContent || '';

            // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ <img data-custom-emoji-id="...">
            const entities: MessageEntityDTO[] = [];
            el.querySelectorAll<HTMLImageElement>('img[data-custom-emoji-id]').forEach(img => {
                const id = img.dataset.customEmojiId!;
                // –ø–æ–∑–∏—Ü–∏—è –≤ plain-—Ç–µ–∫—Å—Ç–µ: –Ω–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –≤—Ö–æ–∂–¥–µ–Ω–∏–π alt-—Ç–µ–∫—Å—Ç–∞
                const offset = text.indexOf(img.alt);
                entities.push({
                    type: 'custom_emoji',
                    offset,
                    length: 2,
                    custom_emoji_id: id,
                });
            });

            onChange({html, text, entities});
        }

        el.addEventListener('input', handleInput);
        return () => el.removeEventListener('input', handleInput);
    }, [onChange])

    // –í—Å—Ç–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π emoji (–æ–±—ä–µ–∫—Ç –∏–∑ props) –≤ –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
    const insertEmoji = (emoji: Emoji) => {
        const sel = window.getSelection();
        if (!sel || !sel.rangeCount) return;
        const range = sel.getRangeAt(0);
        range.deleteContents();

        // –°–æ–∑–¥–∞—ë–º <img> c –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        const img = document.createElement('img');
        img.src = emoji.img_url;
        img.alt = emoji.name;
        img.width = img.height = 24;
        img.setAttribute('data-custom-emoji-id', emoji.custom_emoji_id);
        img.style.display = 'inline-block';
        img.style.verticalAlign = 'middle';

        range.insertNode(img);
        range.setStartAfter(img);
        sel.removeAllRanges();
        sel.addRange(range);

        // –§–æ—Ä—Å–∏—Ä—É–µ–º input-—Å–æ–±—ã—Ç–∏–µ, —á—Ç–æ–±—ã onChange —Å—Ä–∞–±–æ—Ç–∞–ª —Å—Ä–∞–∑—É
        editorRef.current?.dispatchEvent(new Event('input'));
    }

    return (
        <div className="relative">
            {/* –¢—É–ª–±–∞—Ä —Å –∫–Ω–æ–ø–∫–æ–π —ç–º–æ–¥–∑–∏ */}
            <div className="flex items-center mb-2">
                <button
                    type="button"
                    onClick={() => setPickerOpen(v => !v)}
                    className="px-2 py-1 rounded hover:bg-gray-200"
                >
                    üòä
                </button>
            </div>

            {/* –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π –±–ª–æ–∫ */}
            <div
                ref={editorRef}
                contentEditable
                suppressContentEditableWarning
                className="border p-2 rounded min-h-[150px] focus:outline-none"
            />

            {/* –ü–∏–∫–µ—Ä —ç–º–æ–¥–∑–∏ */}
            {pickerOpen && (
                <EmojiPicker
                    emojis={emojis}
                    onSelect={emoji => {
                        insertEmoji(emoji)
                        setPickerOpen(false)
                    }}
                />
            )}
        </div>
    )
}

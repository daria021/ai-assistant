name: DEPLOY


on:
  push:
    branches:
      - main
  workflow_dispatch:


jobs:
  deploy:
    name: Deploy all
    runs-on: [
      "self-hosted",
      "prod"
    ]
    defaults:
      run:
        working-directory: repo
    env:
      DEPLOY_ENV: prod
      COMPOSE_PROJECT_NAME: ai-assistant
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          clean: false   # avoid deleting workspace with root-owned data/
          fetch-depth: 0
          path: repo

      - name: Prepare environment
        run: |
          touch .env
          touch grafana.env
          touch ./posts-service/jobs.sqlite

          # persistent dirs for logs/state (survive docker system prune -af)
          sudo mkdir -p ./data/loki ./data/grafana ./data/promtail
          sudo chmod -R 0777 ./data

          make bw
          make mn

          if [ "$DEPLOY_ENV" = "prod" ]; then
            cp prod.env .env

            DOMAIN="https://ai.avocado.ceo"

            echo "" >> .env
            echo "APP_HOST=${DOMAIN}" >> .env
            echo "MINIAPP_URL=${DOMAIN}" >> .env
            echo "HOST_UPLOAD_DIR=/root/upload" >> .env
          
            echo "BOT_TOKEN=${{ secrets.BOT_TOKEN }}" >> .env
            echo "SERVICE_BOT_TOKEN=${{ secrets.SERVICE_BOT_TOKEN }}" >> .env
            echo "SA_SESSION_STRING=${{ secrets.SA_SESSION_STRING }}" >> .env
            echo "POSTING_BOT_TOKEN=${{ secrets.SERVICE_BOT_TOKEN }}" >> .env

            echo "VITE_API_BASE=${DOMAIN}/api" > admin/frontend/.env

            # point worker-manager host paths to this checkout (repo/) so bind mounts resolve
            echo "HOST_ROOT_CONFIG_PATH=$(pwd)/worker-manager/infrastructure/docker/worker-settings/" >> .env

            echo "GF_SERVER_DOMAIN=ai.avocado.ceo" >> grafana.env
            echo "GF_SERVER_ROOT_URL=https://ai.avocado.ceo/grafana/" >> grafana.env
            echo "GF_SERVER_SERVE_FROM_SUB_PATH=true" >> grafana.env
          fi

      - name: Compose up
        run: |
          sudo docker compose up --build -d

      - name: Cleanup
        run: |
          sudo docker system prune -a -f --filter "label!=keep"
